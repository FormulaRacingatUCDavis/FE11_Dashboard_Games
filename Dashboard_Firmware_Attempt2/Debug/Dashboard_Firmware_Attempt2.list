
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009158  08009158  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200002b8  08009418  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  08009418  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d749  00000000  00000000  0002032b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003928  00000000  00000000  0003da74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  000413a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c8  00000000  00000000  00042fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002add9  00000000  00000000  00044578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f6f6  00000000  00000000  0006f351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001056ca  00000000  00000000  0008ea47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008230  00000000  00000000  00194114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0019c344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002b8 	.word	0x200002b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800902c 	.word	0x0800902c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002bc 	.word	0x200002bc
 800020c:	0800902c 	.word	0x0800902c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_GPIO_EXTI_Callback>:
bool row_empty(game_t *game, int row);
void clear_input();
void HAL_GPIO_EXTI_Callback(uint16_t pin);


HAL_GPIO_EXTI_Callback(uint16_t pin){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	switch(pin){
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005bc:	d01b      	beq.n	80005f6 <HAL_GPIO_EXTI_Callback+0x4a>
 80005be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005c2:	dc1c      	bgt.n	80005fe <HAL_GPIO_EXTI_Callback+0x52>
 80005c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005c8:	d011      	beq.n	80005ee <HAL_GPIO_EXTI_Callback+0x42>
 80005ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005ce:	dc16      	bgt.n	80005fe <HAL_GPIO_EXTI_Callback+0x52>
 80005d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005d4:	d003      	beq.n	80005de <HAL_GPIO_EXTI_Callback+0x32>
 80005d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005da:	d004      	beq.n	80005e6 <HAL_GPIO_EXTI_Callback+0x3a>
			break;
		case GPIO_PIN_12:
			user_input.right = true;
			break;
	}
}
 80005dc:	e00f      	b.n	80005fe <HAL_GPIO_EXTI_Callback+0x52>
			user_input.rotate_left = true;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_GPIO_EXTI_Callback+0x60>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	709a      	strb	r2, [r3, #2]
			break;
 80005e4:	e00b      	b.n	80005fe <HAL_GPIO_EXTI_Callback+0x52>
			user_input.rotate_right = true;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_GPIO_EXTI_Callback+0x60>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	70da      	strb	r2, [r3, #3]
			break;
 80005ec:	e007      	b.n	80005fe <HAL_GPIO_EXTI_Callback+0x52>
			user_input.left = true;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_GPIO_EXTI_Callback+0x60>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
			break;
 80005f4:	e003      	b.n	80005fe <HAL_GPIO_EXTI_Callback+0x52>
			user_input.right = true;
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_GPIO_EXTI_Callback+0x60>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	705a      	strb	r2, [r3, #1]
			break;
 80005fc:	bf00      	nop
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200002d4 	.word	0x200002d4

08000610 <clear_input>:

void clear_input(){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	user_input.left = false;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <clear_input+0x28>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	user_input.right = false;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <clear_input+0x28>)
 800061c:	2200      	movs	r2, #0
 800061e:	705a      	strb	r2, [r3, #1]
	user_input.rotate_left = false;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <clear_input+0x28>)
 8000622:	2200      	movs	r2, #0
 8000624:	709a      	strb	r2, [r3, #2]
	user_input.rotate_left = false;
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <clear_input+0x28>)
 8000628:	2200      	movs	r2, #0
 800062a:	709a      	strb	r2, [r3, #2]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200002d4 	.word	0x200002d4

0800063c <piece_cell>:


cell_t piece_cell(piece_t *piece, int x, int y){
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
    if(x < 0 || y < 0 || x >= piece->proto->size || y >= piece->proto->size){
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db07      	blt.n	800065e <piece_cell+0x22>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db04      	blt.n	800065e <piece_cell+0x22>
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	429a      	cmp	r2, r3
        CELL_EMPTY;
    }

    return piece->proto->cell[piece->rotation][x][y];
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	7b1b      	ldrb	r3, [r3, #12]
 8000666:	0099      	lsls	r1, r3, #2
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	440b      	add	r3, r1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	441a      	add	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	3311      	adds	r3, #17
 8000676:	781b      	ldrb	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <board_cell>:

cell_t board_cell(game_t *game, int x, int y){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    if(x < 0 || y < 0 || x >= BOARD_WIDTH || y >= BOARD_HEIGHT_ACTUAL){
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	2b00      	cmp	r3, #0
 8000694:	db08      	blt.n	80006a8 <board_cell+0x24>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db05      	blt.n	80006a8 <board_cell+0x24>
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	2b09      	cmp	r3, #9
 80006a0:	dc02      	bgt.n	80006a8 <board_cell+0x24>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b17      	cmp	r3, #23
 80006a6:	dd01      	ble.n	80006ac <board_cell+0x28>
        return CELL_OUT_OF_BOUNDS;
 80006a8:	2305      	movs	r3, #5
 80006aa:	e00a      	b.n	80006c2 <board_cell+0x3e>
    }

    return game->board[x][y];
 80006ac:	68f9      	ldr	r1, [r7, #12]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	18ca      	adds	r2, r1, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	330c      	adds	r3, #12
 80006c0:	781b      	ldrb	r3, [r3, #0]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <init_board>:

void init_board(game_t *game){
 80006ce:	b480      	push	{r7}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < BOARD_WIDTH; i++){
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e017      	b.n	800070c <init_board+0x3e>
        for(int j = 0; j < BOARD_HEIGHT_ACTUAL; j++){
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	e00e      	b.n	8000700 <init_board+0x32>
            game->board[i][j] = CELL_COLOR1;
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	18ca      	adds	r2, r1, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	330c      	adds	r3, #12
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < BOARD_HEIGHT_ACTUAL; j++){
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b17      	cmp	r3, #23
 8000704:	dded      	ble.n	80006e2 <init_board+0x14>
    for(int i = 0; i < BOARD_WIDTH; i++){
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b09      	cmp	r3, #9
 8000710:	dde4      	ble.n	80006dc <init_board+0xe>
        }
    }
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <pos_possible>:

bool pos_possible(piece_t *piece, game_t *game){
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < piece->proto->size; i++){
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	e02a      	b.n	8000786 <pos_possible+0x66>
        for(int j = 0; j < piece->proto->size; j++){
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	e01e      	b.n	8000774 <pos_possible+0x54>
            int board_x = piece->pos_x + i;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	4413      	add	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
            int board_y = piece->pos_y + j;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4413      	add	r3, r2
 8000748:	60bb      	str	r3, [r7, #8]

            // check for cell collisions
            if(board_cell(game, board_x, board_y) != CELL_EMPTY && piece_cell(piece, i, j) != CELL_EMPTY){
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	6838      	ldr	r0, [r7, #0]
 8000750:	f7ff ff98 	bl	8000684 <board_cell>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d009      	beq.n	800076e <pos_possible+0x4e>
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	6979      	ldr	r1, [r7, #20]
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff6c 	bl	800063c <piece_cell>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <pos_possible+0x4e>
                return false;
 800076a:	2300      	movs	r3, #0
 800076c:	e012      	b.n	8000794 <pos_possible+0x74>
        for(int j = 0; j < piece->proto->size; j++){
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	3301      	adds	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	dbda      	blt.n	8000736 <pos_possible+0x16>
    for(int i = 0; i < piece->proto->size; i++){
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3301      	adds	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	429a      	cmp	r2, r3
 8000790:	dbce      	blt.n	8000730 <pos_possible+0x10>
            }
        }
    }

    // position is possible
    return true;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <integrate_piece>:
//         case DIRECTION_DOWN:
//             if()
//     }
// }

bool integrate_piece(piece_t *piece, game_t *game){
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    // confirm that piece position is valid
    if(!pos_possible(piece, game)){
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ffb9 	bl	8000720 <pos_possible>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <integrate_piece+0x22>
        return false;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e03d      	b.n	800083a <integrate_piece+0x9e>
    }

    for(int i = 0; i < piece->proto->size; i++){
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	e033      	b.n	800082c <integrate_piece+0x90>
        for(int j = 0; j < piece->proto->size; j++){
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	e027      	b.n	800081a <integrate_piece+0x7e>
            int board_x = piece->pos_x + i;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4413      	add	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
            int board_y = piece->pos_y + j;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4413      	add	r3, r2
 80007dc:	60bb      	str	r3, [r7, #8]

            if(piece_cell(piece, i, j) != CELL_EMPTY){
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	6979      	ldr	r1, [r7, #20]
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ff2a 	bl	800063c <piece_cell>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d012      	beq.n	8000814 <integrate_piece+0x78>
                game->board[board_x][board_y] = piece_cell(piece, i, j);
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	6979      	ldr	r1, [r7, #20]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff22 	bl	800063c <piece_cell>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4618      	mov	r0, r3
 80007fc:	6839      	ldr	r1, [r7, #0]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	18ca      	adds	r2, r1, r3
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	330c      	adds	r3, #12
 8000810:	4602      	mov	r2, r0
 8000812:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < piece->proto->size; j++){
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	3301      	adds	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	429a      	cmp	r2, r3
 8000824:	dbd1      	blt.n	80007ca <integrate_piece+0x2e>
    for(int i = 0; i < piece->proto->size; i++){
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbc5      	blt.n	80007c4 <integrate_piece+0x28>
            }
        }
    }

    return true;
 8000838:	2301      	movs	r3, #1
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <move_piece>:

bool move_piece(piece_t *piece, game_t *game, direction_t direction){
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	4613      	mov	r3, r2
 800084e:	71fb      	strb	r3, [r7, #7]
    int original_x = piece->pos_x;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	617b      	str	r3, [r7, #20]
    int original_y = piece->pos_y;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	613b      	str	r3, [r7, #16]

    switch(direction){
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d012      	beq.n	8000888 <move_piece+0x46>
 8000862:	2b03      	cmp	r3, #3
 8000864:	dc16      	bgt.n	8000894 <move_piece+0x52>
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <move_piece+0x2e>
 800086a:	2b01      	cmp	r3, #1
 800086c:	d006      	beq.n	800087c <move_piece+0x3a>
 800086e:	e011      	b.n	8000894 <move_piece+0x52>
        case DIRECTION_DOWN:
            piece->pos_y--;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	605a      	str	r2, [r3, #4]
            break;
 800087a:	e00b      	b.n	8000894 <move_piece+0x52>
        case DIRECTION_LEFT:
            piece->pos_x--;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	601a      	str	r2, [r3, #0]
            break;
 8000886:	e005      	b.n	8000894 <move_piece+0x52>
        case DIRECTION_RIGHT:
            piece->pos_x++;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	601a      	str	r2, [r3, #0]
            break;
 8000892:	bf00      	nop
    }

    // check if move is possible
    if(pos_possible(piece, game)){
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff ff42 	bl	8000720 <pos_possible>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <move_piece+0x64>
        return true;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e006      	b.n	80008b4 <move_piece+0x72>
    }

    // move is blocked, cancel move
    piece->pos_x = original_x;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	601a      	str	r2, [r3, #0]
    piece->pos_y = original_y;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	605a      	str	r2, [r3, #4]

    return false;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <rotate_piece>:

bool rotate_piece(piece_t *piece, game_t *game, bool clockwise){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	4613      	mov	r3, r2
 80008c8:	71fb      	strb	r3, [r7, #7]
    int original_rotation = piece->rotation;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	7b1b      	ldrb	r3, [r3, #12]
 80008ce:	617b      	str	r3, [r7, #20]

    // update piece rotation
    if(clockwise){
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <rotate_piece+0x28>
        piece->rotation++;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7b1b      	ldrb	r3, [r3, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	731a      	strb	r2, [r3, #12]
 80008e2:	e005      	b.n	80008f0 <rotate_piece+0x34>
    } else {
        piece->rotation--;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	7b1b      	ldrb	r3, [r3, #12]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	731a      	strb	r2, [r3, #12]
    }

    // handle overflow
    if(piece->rotation < 0) {
        piece->rotation = piece->proto->num_rotations - 1;
    } else if (piece->rotation >= piece->proto->num_rotations){
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	7b1b      	ldrb	r3, [r3, #12]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	db02      	blt.n	8000906 <rotate_piece+0x4a>
        piece->rotation = 0;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2200      	movs	r2, #0
 8000904:	731a      	strb	r2, [r3, #12]
    }

    // check if move is possible
    if(pos_possible(piece, game)){
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f7ff ff09 	bl	8000720 <pos_possible>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <rotate_piece+0x5c>
        return true;
 8000914:	2301      	movs	r3, #1
 8000916:	e004      	b.n	8000922 <rotate_piece+0x66>
    }

    // move is blocked, cancel move
    piece->rotation = original_rotation;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	731a      	strb	r2, [r3, #12]

    return false;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <player_move>:


void player_move(game_t *game, piece_t *piece){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    if(user_input.left){
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <player_move+0x64>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <player_move+0x1e>
		move_piece(piece, game, DIRECTION_LEFT);
 800093e:	2201      	movs	r2, #1
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f7ff ff7d 	bl	8000842 <move_piece>
 8000948:	e008      	b.n	800095c <player_move+0x30>
    } else if(user_input.right){
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <player_move+0x64>)
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <player_move+0x30>
		move_piece(piece, game, DIRECTION_RIGHT);
 8000952:	2203      	movs	r2, #3
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f7ff ff73 	bl	8000842 <move_piece>
    }

    if(user_input.rotate_left){
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <player_move+0x64>)
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <player_move+0x44>
    	rotate_piece(piece, game, false);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f7ff ffa7 	bl	80008bc <rotate_piece>
 800096e:	e008      	b.n	8000982 <player_move+0x56>
    } else if(user_input.rotate_right){
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <player_move+0x64>)
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <player_move+0x56>
		rotate_piece(piece, game, true);
 8000978:	2201      	movs	r2, #1
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f7ff ff9d 	bl	80008bc <rotate_piece>
    }

    clear_input();
 8000982:	f7ff fe45 	bl	8000610 <clear_input>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002d4 	.word	0x200002d4

08000994 <board_update>:

result_t board_update(piece_t *active_piece, game_t *game){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    active_piece->frames_since_shift++;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	609a      	str	r2, [r3, #8]

    player_move(game, active_piece);
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	6838      	ldr	r0, [r7, #0]
 80009ac:	f7ff ffbe 	bl	800092c <player_move>

    if(active_piece->frames_since_shift >= game->shift_period){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	db18      	blt.n	80009ee <board_update+0x5a>
        if(move_piece(active_piece, game, DIRECTION_DOWN)){
 80009bc:	2200      	movs	r2, #0
 80009be:	6839      	ldr	r1, [r7, #0]
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff3e 	bl	8000842 <move_piece>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <board_update+0x42>
            active_piece->frames_since_shift = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
            return PIECE_FALLING;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00b      	b.n	80009ee <board_update+0x5a>
        } else {
            integrate_piece(active_piece, game);
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff fedf 	bl	800079c <integrate_piece>
            collapse_board(game);
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f000 f8d0 	bl	8000b84 <collapse_board>
            new_piece(active_piece);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f807 	bl	80009f8 <new_piece>
            return PIECE_LANDED;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e7ff      	b.n	80009ee <board_update+0x5a>
        }
        
    }
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <new_piece>:

void new_piece(piece_t *piece){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    static piece_type_t last_piece_type = PIECE_NONE;

    piece_type_t piece_type = rand() % NUM_PIECES;
 8000a00:	f007 fb2e 	bl	8008060 <rand>
 8000a04:	4602      	mov	r2, r0
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <new_piece+0x90>)
 8000a08:	fb83 1302 	smull	r1, r3, r3, r2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	1099      	asrs	r1, r3, #2
 8000a10:	17d3      	asrs	r3, r2, #31
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	460b      	mov	r3, r1
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	1a5b      	subs	r3, r3, r1
 8000a1a:	1ad1      	subs	r1, r2, r3
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	73fb      	strb	r3, [r7, #15]

    // reroll if same piece as last time
    if(piece_type == last_piece_type){
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <new_piece+0x94>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d10f      	bne.n	8000a4a <new_piece+0x52>
        piece_type = rand() % NUM_PIECES;
 8000a2a:	f007 fb19 	bl	8008060 <rand>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <new_piece+0x90>)
 8000a32:	fb83 1302 	smull	r1, r3, r3, r2
 8000a36:	4413      	add	r3, r2
 8000a38:	1099      	asrs	r1, r3, #2
 8000a3a:	17d3      	asrs	r3, r2, #31
 8000a3c:	1ac9      	subs	r1, r1, r3
 8000a3e:	460b      	mov	r3, r1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a5b      	subs	r3, r3, r1
 8000a44:	1ad1      	subs	r1, r2, r3
 8000a46:	460b      	mov	r3, r1
 8000a48:	73fb      	strb	r3, [r7, #15]
    }

    last_piece_type = piece_type;
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <new_piece+0x94>)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	7013      	strb	r3, [r2, #0]
    piece->proto = get_piece_proto(piece_type);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe60 	bl	8001718 <get_piece_proto>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	615a      	str	r2, [r3, #20]

    piece->pos_x = piece->proto->spawn_pos_x;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
    piece->pos_y = piece->proto->spawn_pos_y;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	605a      	str	r2, [r3, #4]
    piece->frames_since_shift = 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
    piece->rotation = DIRECTION_DOWN;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	731a      	strb	r2, [r3, #12]
}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	92492493 	.word	0x92492493
 8000a8c:	20000000 	.word	0x20000000

08000a90 <clear_rows>:

void clear_rows(game_t *game, int row_start, int row_end){
 8000a90:	b480      	push	{r7}
 8000a92:	b08d      	sub	sp, #52	; 0x34
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
    //printf("Start: %i, End: %i\n", row_start, row_end);

    if(row_start < 0 || row_start >= BOARD_HEIGHT){
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db66      	blt.n	8000b70 <clear_rows+0xe0>
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	2b13      	cmp	r3, #19
 8000aa6:	dc63      	bgt.n	8000b70 <clear_rows+0xe0>
        return;
    }
    if(row_end < 0 || row_end >= BOARD_HEIGHT){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db62      	blt.n	8000b74 <clear_rows+0xe4>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b13      	cmp	r3, #19
 8000ab2:	dc5f      	bgt.n	8000b74 <clear_rows+0xe4>
        return;
    }
    if(row_start >= row_end){
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	da5d      	bge.n	8000b78 <clear_rows+0xe8>
    }

    // TODO: animation to show row clears

    // move down rows above clear
    for(int i = 0; i < (BOARD_HEIGHT - row_end); i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ac0:	e02a      	b.n	8000b18 <clear_rows+0x88>
        int source_row = row_end + i;
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac6:	4413      	add	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        int dest_row = row_start + i;
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	4413      	add	r3, r2
 8000ad0:	617b      	str	r3, [r7, #20]
        for(int j = 0; j < BOARD_WIDTH; j++){
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ad6:	e019      	b.n	8000b0c <clear_rows+0x7c>
           game->board[j][dest_row] = game->board[j][source_row]; 
 8000ad8:	68f9      	ldr	r1, [r7, #12]
 8000ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	18ca      	adds	r2, r1, r3
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	4413      	add	r3, r2
 8000aea:	330c      	adds	r3, #12
 8000aec:	7818      	ldrb	r0, [r3, #0]
 8000aee:	68f9      	ldr	r1, [r7, #12]
 8000af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	18ca      	adds	r2, r1, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	4413      	add	r3, r2
 8000b00:	330c      	adds	r3, #12
 8000b02:	4602      	mov	r2, r0
 8000b04:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < BOARD_WIDTH; j++){
 8000b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b08:	3301      	adds	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	2b09      	cmp	r3, #9
 8000b10:	dde2      	ble.n	8000ad8 <clear_rows+0x48>
    for(int i = 0; i < (BOARD_HEIGHT - row_end); i++){
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	3301      	adds	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1c3 0314 	rsb	r3, r3, #20
 8000b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbce      	blt.n	8000ac2 <clear_rows+0x32>
        }
    }

    // clear out top rows
    for(int i = 0; i < (row_end - row_start); i++){
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
 8000b28:	e01b      	b.n	8000b62 <clear_rows+0xd2>
        int row = (BOARD_HEIGHT - 1) - i;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	f1c3 0313 	rsb	r3, r3, #19
 8000b30:	61fb      	str	r3, [r7, #28]
        for(int j = 0; j < BOARD_WIDTH; j++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	e00e      	b.n	8000b56 <clear_rows+0xc6>
           game->board[j][row] = CELL_EMPTY;
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	6a3a      	ldr	r2, [r7, #32]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	18ca      	adds	r2, r1, r3
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	4413      	add	r3, r2
 8000b4a:	330c      	adds	r3, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < BOARD_WIDTH; j++){
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	3301      	adds	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	2b09      	cmp	r3, #9
 8000b5a:	dded      	ble.n	8000b38 <clear_rows+0xa8>
    for(int i = 0; i < (row_end - row_start); i++){
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	3301      	adds	r3, #1
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbdd      	blt.n	8000b2a <clear_rows+0x9a>
 8000b6e:	e004      	b.n	8000b7a <clear_rows+0xea>
        return;
 8000b70:	bf00      	nop
 8000b72:	e002      	b.n	8000b7a <clear_rows+0xea>
        return;
 8000b74:	bf00      	nop
 8000b76:	e000      	b.n	8000b7a <clear_rows+0xea>
        return;
 8000b78:	bf00      	nop
        }
    }
}
 8000b7a:	3734      	adds	r7, #52	; 0x34
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <collapse_board>:

void collapse_board(game_t *game){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    int row_full_start = ROW_NONE;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	60fb      	str	r3, [r7, #12]
    int row = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]

    while (row < BOARD_HEIGHT) {
 8000b96:	e01e      	b.n	8000bd6 <collapse_board+0x52>

        if(row_full(game, row)){
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f823 	bl	8000be6 <row_full>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <collapse_board+0x30>

            if(row_full_start == ROW_NONE){
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d110      	bne.n	8000bd0 <collapse_board+0x4c>
                row_full_start = row;  // record the start of full rows
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e00d      	b.n	8000bd0 <collapse_board+0x4c>
            }

        } else { // row is empty
            // check if rows before were full, if so then clear out those rows and set back the row counter
            if(row_full_start != ROW_NONE){ 
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bba:	d009      	beq.n	8000bd0 <collapse_board+0x4c>
                clear_rows(game, row_full_start, row);
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	68f9      	ldr	r1, [r7, #12]
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff65 	bl	8000a90 <clear_rows>
                
                row = row_full_start; 
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
                row_full_start = ROW_NONE;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	60fb      	str	r3, [r7, #12]
            }

        }

        row++;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
    while (row < BOARD_HEIGHT) {
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b13      	cmp	r3, #19
 8000bda:	dddd      	ble.n	8000b98 <collapse_board+0x14>
    }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <row_full>:

bool row_full(game_t *game, int row){
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < BOARD_WIDTH; i++){
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e011      	b.n	8000c1a <row_full+0x34>
        // if any cell is empty, row is not full
        if(game->board[i][row] == CELL_EMPTY){
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	18ca      	adds	r2, r1, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	330c      	adds	r3, #12
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <row_full+0x2e>
            return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e006      	b.n	8000c22 <row_full+0x3c>
    for(int i = 0; i < BOARD_WIDTH; i++){
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b09      	cmp	r3, #9
 8000c1e:	ddea      	ble.n	8000bf6 <row_full+0x10>
        }
    }
    return true;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <row_empty>:

bool row_empty(game_t *game, int row){
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < BOARD_WIDTH; i++){
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e011      	b.n	8000c62 <row_empty+0x34>
        // if any cell is empty, row is not full
        if(game->board[i][row] != CELL_EMPTY){
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	18ca      	adds	r2, r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	330c      	adds	r3, #12
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <row_empty+0x2e>
            return false;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e006      	b.n	8000c6a <row_empty+0x3c>
    for(int i = 0; i < BOARD_WIDTH; i++){
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b09      	cmp	r3, #9
 8000c66:	ddea      	ble.n	8000c3e <row_empty+0x10>
        }
    }
    return true;
 8000c68:	2301      	movs	r3, #1
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <topped_out>:

bool topped_out(game_t *game){
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
    // should only need to check the first row above board, but check all just in case
    for(int row = BOARD_HEIGHT; row < BOARD_HEIGHT_ACTUAL; row++){
 8000c7e:	2314      	movs	r3, #20
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	e00e      	b.n	8000ca2 <topped_out+0x2c>
        if(!row_empty(game, row)){
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffd1 	bl	8000c2e <row_empty>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <topped_out+0x26>
            return true;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e006      	b.n	8000caa <topped_out+0x34>
    for(int row = BOARD_HEIGHT; row < BOARD_HEIGHT_ACTUAL; row++){
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b17      	cmp	r3, #23
 8000ca6:	dded      	ble.n	8000c84 <topped_out+0xe>
        }
    }

    return false;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f001 feeb 	bl	8002ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f820 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 fc20 	bl	8001540 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d00:	f000 fb96 	bl	8001430 <MX_DMA_Init>
  MX_CAN2_Init();
 8000d04:	f000 f9b6 	bl	8001074 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 8000d08:	f000 f9ea 	bl	80010e0 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8000d0c:	f000 f882 	bl	8000e14 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000d10:	f000 f8ea 	bl	8000ee8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000d14:	f000 fa14 	bl	8001140 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d18:	f000 fa68 	bl	80011ec <MX_TIM4_Init>
  MX_UART4_Init();
 8000d1c:	f000 faf8 	bl	8001310 <MX_UART4_Init>
  MX_UART7_Init();
 8000d20:	f000 fb26 	bl	8001370 <MX_UART7_Init>
  MX_FMC_Init();
 8000d24:	f000 fbaa 	bl	800147c <MX_FMC_Init>
  MX_CAN1_Init();
 8000d28:	f000 f93c 	bl	8000fa4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000d2c:	f000 fb50 	bl	80013d0 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000d30:	f000 fab4 	bl	800129c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  Tetris();
 8000d34:	f001 fa72 	bl	800221c <Tetris>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x48>
	...

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	; 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f007 facb 	bl	80082e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a29      	ldr	r2, [pc, #164]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000da8:	23d8      	movs	r3, #216	; 0xd8
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000db0:	2309      	movs	r3, #9
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	4618      	mov	r0, r3
 8000dba:	f003 fc47 	bl	800464c <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dc4:	f000 fc9c 	bl	8001700 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dc8:	f003 fbf0 	bl	80045ac <HAL_PWREx_EnableOverDrive>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dd2:	f000 fc95 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2107      	movs	r1, #7
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fecd 	bl	8004b94 <HAL_RCC_ClockConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e00:	f000 fc7e 	bl	8001700 <Error_Handler>
  }
}
 8000e04:	bf00      	nop
 8000e06:	3750      	adds	r7, #80	; 0x50
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40007000 	.word	0x40007000

08000e14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <MX_ADC1_Init+0xd0>)
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e76:	f001 feab 	bl	8002bd0 <HAL_ADC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e80:	f000 fc3e 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e84:	230a      	movs	r3, #10
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000e96:	f001 fedf 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ea0:	f000 fc2e 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000eae:	f001 fed3 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000eb8:	f000 fc22 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_ADC1_Init+0xc8>)
 8000ec6:	f001 fec7 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000ed0:	f000 fc16 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//
  /* USER CODE END ADC1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200002d8 	.word	0x200002d8
 8000ee0:	40012000 	.word	0x40012000
 8000ee4:	0f000001 	.word	0x0f000001

08000ee8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <MX_ADC3_Init+0xb4>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <MX_ADC3_Init+0xb8>)
 8000f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f4a:	f001 fe41 	bl	8002bd0 <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 fbd4 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f6a:	f001 fe75 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000f74:	f000 fbc4 	bl	8001700 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC3_Init+0xb0>)
 8000f82:	f001 fe69 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000f8c:	f000 fbb8 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000320 	.word	0x20000320
 8000f9c:	40012200 	.word	0x40012200
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fac:	4a30      	ldr	r2, [pc, #192]	; (8001070 <MX_CAN1_Init+0xcc>)
 8000fae:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fb2:	2212      	movs	r2, #18
 8000fb4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fc8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fd0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_CAN1_Init+0xc8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_CAN1_Init+0xc8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ff6:	481d      	ldr	r0, [pc, #116]	; (800106c <MX_CAN1_Init+0xc8>)
 8000ff8:	f002 f87e 	bl	80030f8 <HAL_CAN_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001002:	f000 fb7d 	bl	8001700 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /*##-2- Configure the CAN Filter ###########################################*/
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001006:	2301      	movs	r3, #1
 8001008:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800100a:	2312      	movs	r3, #18
 800100c:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0;
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800102a:	2314      	movs	r3, #20
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <MX_CAN1_Init+0xc8>)
 8001034:	f002 f95c 	bl	80032f0 <HAL_CAN_ConfigFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_CAN1_Init+0x9e>
  	{
  	  /* Filter configuration Error */
  	  Error_Handler();
 800103e:	f000 fb5f 	bl	8001700 <Error_Handler>
  	}

  	/*##-3- Start the CAN peripheral ###########################################*/
  	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <MX_CAN1_Init+0xc8>)
 8001044:	f002 fa34 	bl	80034b0 <HAL_CAN_Start>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_CAN1_Init+0xae>
  	{
  	  /* Start Error */
  	  Error_Handler();
 800104e:	f000 fb57 	bl	8001700 <Error_Handler>
  	}

  	/*##-4- Activate CAN RX notification #######################################*/
  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001052:	2102      	movs	r1, #2
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_CAN1_Init+0xc8>)
 8001056:	f002 fa6f 	bl	8003538 <HAL_CAN_ActivateNotification>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_CAN1_Init+0xc0>
  	{
  	  /* Notification Error */
  	  Error_Handler();
 8001060:	f000 fb4e 	bl	8001700 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000428 	.word	0x20000428
 8001070:	40006400 	.word	0x40006400

08001074 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_CAN2_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_CAN2_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_CAN2_Init+0x64>)
 8001080:	2212      	movs	r2, #18
 8001082:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_CAN2_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_CAN2_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_CAN2_Init+0x64>)
 8001092:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001096:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_CAN2_Init+0x64>)
 800109a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800109e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_CAN2_Init+0x64>)
 80010c6:	f002 f817 	bl	80030f8 <HAL_CAN_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 fb16 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000450 	.word	0x20000450
 80010dc:	40006800 	.word	0x40006800

080010e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_SDMMC1_SD_Init+0x5c>)
 80010e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 80010fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001102:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 8001112:	f004 fb53 	bl	80057bc <HAL_SD_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 800111c:	f000 faf0 	bl	8001700 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_SDMMC1_SD_Init+0x58>)
 8001126:	f004 fda5 	bl	8005c74 <HAL_SD_ConfigWideBusOperation>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_SDMMC1_SD_Init+0x54>
  {
    Error_Handler();
 8001130:	f000 fae6 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000478 	.word	0x20000478
 800113c:	40012c00 	.word	0x40012c00

08001140 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_TIM2_Init+0xa8>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_TIM2_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM2_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_TIM2_Init+0xa8>)
 8001176:	f04f 32ff 	mov.w	r2, #4294967295
 800117a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM2_Init+0xa8>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM2_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <MX_TIM2_Init+0xa8>)
 800118a:	f005 f91a 	bl	80063c2 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001194:	f000 fab4 	bl	8001700 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001198:	2307      	movs	r3, #7
 800119a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800119c:	2370      	movs	r3, #112	; 0x70
 800119e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM2_Init+0xa8>)
 80011b4:	f005 fa7b 	bl	80066ae <HAL_TIM_SlaveConfigSynchro>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011be:	f000 fa9f 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM2_Init+0xa8>)
 80011d0:	f005 fc96 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011da:	f000 fa91 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200004fc 	.word	0x200004fc

080011ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_TIM4_Init+0xa8>)
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <MX_TIM4_Init+0xac>)
 8001210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_TIM4_Init+0xa8>)
 8001214:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001218:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM4_Init+0xa8>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_TIM4_Init+0xa8>)
 8001222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001226:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_TIM4_Init+0xa8>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM4_Init+0xa8>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001234:	4817      	ldr	r0, [pc, #92]	; (8001294 <MX_TIM4_Init+0xa8>)
 8001236:	f005 f8c4 	bl	80063c2 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 fa5e 	bl	8001700 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001244:	2307      	movs	r3, #7
 8001246:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001248:	2370      	movs	r3, #112	; 0x70
 800124a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_TIM4_Init+0xa8>)
 8001260:	f005 fa25 	bl	80066ae <HAL_TIM_SlaveConfigSynchro>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800126a:	f000 fa49 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_TIM4_Init+0xa8>)
 800127c:	f005 fc40 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001286:	f000 fa3b 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000548 	.word	0x20000548
 8001298:	40000800 	.word	0x40000800

0800129c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_TIM7_Init+0x70>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012ce:	480e      	ldr	r0, [pc, #56]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012d0:	f005 f877 	bl	80063c2 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012da:	f000 fa11 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_TIM7_Init+0x6c>)
 80012ec:	f005 fc08 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80012f6:	f000 fa03 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  NVIC_EnableIRQ(TIM7_IRQn);
 80012fa:	2037      	movs	r0, #55	; 0x37
 80012fc:	f7ff fcda 	bl	8000cb4 <__NVIC_EnableIRQ>

  /* USER CODE END TIM7_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000594 	.word	0x20000594
 800130c:	40001400 	.word	0x40001400

08001310 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_UART4_Init+0x58>)
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <MX_UART4_Init+0x5c>)
 8001318:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_UART4_Init+0x58>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_UART4_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_UART4_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_UART4_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_UART4_Init+0x58>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_UART4_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_UART4_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_UART4_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_UART4_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_UART4_Init+0x58>)
 8001354:	f005 fc80 	bl	8006c58 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f9cf 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200005e0 	.word	0x200005e0
 800136c:	40004c00 	.word	0x40004c00

08001370 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_UART7_Init+0x58>)
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <MX_UART7_Init+0x5c>)
 8001378:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_UART7_Init+0x58>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_UART7_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_UART7_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_UART7_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_UART7_Init+0x58>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_UART7_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_UART7_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_UART7_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_UART7_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_UART7_Init+0x58>)
 80013b4:	f005 fc50 	bl	8006c58 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 f99f 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000668 	.word	0x20000668
 80013cc:	40007800 	.word	0x40007800

080013d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <MX_USART3_UART_Init+0x5c>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART3_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART3_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART3_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART3_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART3_UART_Init+0x58>)
 8001414:	f005 fc20 	bl	8006c58 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800141e:	f000 f96f 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200006f0 	.word	0x200006f0
 800142c:	40004800 	.word	0x40004800

08001430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_DMA_Init+0x48>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <MX_DMA_Init+0x48>)
 800143c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_DMA_Init+0x48>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2038      	movs	r0, #56	; 0x38
 8001454:	f002 fbab 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001458:	2038      	movs	r0, #56	; 0x38
 800145a:	f002 fbc4 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2039      	movs	r0, #57	; 0x39
 8001464:	f002 fba3 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001468:	2039      	movs	r0, #57	; 0x39
 800146a:	f002 fbbc 	bl	8003be6 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <MX_FMC_Init+0xbc>)
 8001496:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800149a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_FMC_Init+0xbc>)
 800149e:	4a27      	ldr	r2, [pc, #156]	; (800153c <MX_FMC_Init+0xc0>)
 80014a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_FMC_Init+0xbc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_FMC_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_FMC_Init+0xbc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_FMC_Init+0xbc>)
 80014b6:	2210      	movs	r2, #16
 80014b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_FMC_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_FMC_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_FMC_Init+0xbc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_FMC_Init+0xbc>)
 80014ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_FMC_Init+0xbc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_FMC_Init+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_FMC_Init+0xbc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_FMC_Init+0xbc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_FMC_Init+0xbc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_FMC_Init+0xbc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_FMC_Init+0xbc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80014fe:	230f      	movs	r3, #15
 8001500:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001502:	230f      	movs	r3, #15
 8001504:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001506:	23ff      	movs	r3, #255	; 0xff
 8001508:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800150a:	230f      	movs	r3, #15
 800150c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800150e:	2310      	movs	r3, #16
 8001510:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001512:	2311      	movs	r3, #17
 8001514:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_FMC_Init+0xbc>)
 8001522:	f004 ff06 	bl	8006332 <HAL_SRAM_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 800152c:	f000 f8e8 	bl	8001700 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000778 	.word	0x20000778
 800153c:	a0000104 	.word	0xa0000104

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	623b      	str	r3, [r7, #32]
 800156c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a51      	ldr	r2, [pc, #324]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a4b      	ldr	r2, [pc, #300]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a45      	ldr	r2, [pc, #276]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <MX_GPIO_Init+0x1a8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2108      	movs	r1, #8
 800161a:	4834      	ldr	r0, [pc, #208]	; (80016ec <MX_GPIO_Init+0x1ac>)
 800161c:	f002 ff94 	bl	8004548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS2_Pin;
 8001620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS2_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	482e      	ldr	r0, [pc, #184]	; (80016f0 <MX_GPIO_Init+0x1b0>)
 8001636:	f002 fddb 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 800163a:	2302      	movs	r3, #2
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4829      	ldr	r0, [pc, #164]	; (80016f4 <MX_GPIO_Init+0x1b4>)
 800164e:	f002 fdcf 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001652:	2308      	movs	r3, #8
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4820      	ldr	r0, [pc, #128]	; (80016ec <MX_GPIO_Init+0x1ac>)
 800166a:	f002 fdc1 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHORTED_TO_PB11_Pin SHORTED_TO_PB10_Pin BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = SHORTED_TO_PB11_Pin|SHORTED_TO_PB10_Pin|BAT_12V_MEASURE_Pin;
 800166e:	f24c 0308 	movw	r3, #49160	; 0xc008
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001680:	4619      	mov	r1, r3
 8001682:	481d      	ldr	r0, [pc, #116]	; (80016f8 <MX_GPIO_Init+0x1b8>)
 8001684:	f002 fdb4 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG11 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001688:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <MX_GPIO_Init+0x1bc>)
 80016a0:	f002 fda6 	bl	80041f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HV_REQUEST_Pin DRIVE_REQUEST_Pin GASP_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = HV_REQUEST_Pin|DRIVE_REQUEST_Pin|GASP_INTERRUPT_Pin;
 80016a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4810      	ldr	r0, [pc, #64]	; (80016fc <MX_GPIO_Init+0x1bc>)
 80016ba:	f002 fd99 	bl	80041f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2017      	movs	r0, #23
 80016c4:	f002 fa73 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016c8:	2017      	movs	r0, #23
 80016ca:	f002 fa8c 	bl	8003be6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f002 fa6b 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d8:	2028      	movs	r0, #40	; 0x28
 80016da:	f002 fa84 	bl	8003be6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016de:	bf00      	nop
 80016e0:	3738      	adds	r7, #56	; 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40021400 	.word	0x40021400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40021800 	.word	0x40021800

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  UG_PutString(5, 250, "HAL ERROR");
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <Error_Handler+0x14>)
 800170a:	21fa      	movs	r1, #250	; 0xfa
 800170c:	2005      	movs	r0, #5
 800170e:	f000 fdb3 	bl	8002278 <UG_PutString>
  {
 8001712:	e7f9      	b.n	8001708 <Error_Handler+0x8>
 8001714:	08009044 	.word	0x08009044

08001718 <get_piece_proto>:
#include "pieces.h"

piece_proto_t *get_piece_proto(piece_type_t type) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
                NULL_PIECE,
                NULL_PIECE,
                NULL_PIECE}
    };

    switch(type){
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d81d      	bhi.n	8001764 <get_piece_proto+0x4c>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <get_piece_proto+0x18>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	0800174d 	.word	0x0800174d
 8001734:	08001751 	.word	0x08001751
 8001738:	08001765 	.word	0x08001765
 800173c:	08001755 	.word	0x08001755
 8001740:	0800175d 	.word	0x0800175d
 8001744:	08001761 	.word	0x08001761
 8001748:	08001759 	.word	0x08001759
        case PIECE_I: 
            return &i_piece;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <get_piece_proto+0x5c>)
 800174e:	e00a      	b.n	8001766 <get_piece_proto+0x4e>
        case PIECE_J: 
            return &j_piece;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <get_piece_proto+0x60>)
 8001752:	e008      	b.n	8001766 <get_piece_proto+0x4e>
        case PIECE_L:
            return &l_piece;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <get_piece_proto+0x64>)
 8001756:	e006      	b.n	8001766 <get_piece_proto+0x4e>
        case PIECE_O:
            return &o_piece;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <get_piece_proto+0x68>)
 800175a:	e004      	b.n	8001766 <get_piece_proto+0x4e>
        case PIECE_S:
            return &s_piece;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <get_piece_proto+0x6c>)
 800175e:	e002      	b.n	8001766 <get_piece_proto+0x4e>
        case PIECE_Z:
            return &z_piece;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <get_piece_proto+0x70>)
 8001762:	e000      	b.n	8001766 <get_piece_proto+0x4e>
        case PIECE_T:
        default:
            return &t_piece;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <get_piece_proto+0x74>)
    }
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000004 	.word	0x20000004
 8001778:	20000058 	.word	0x20000058
 800177c:	200000ac 	.word	0x200000ac
 8001780:	20000100 	.word	0x20000100
 8001784:	20000154 	.word	0x20000154
 8001788:	200001a8 	.word	0x200001a8
 800178c:	200001fc 	.word	0x200001fc

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x44>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x44>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x44>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x44>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a5b      	ldr	r2, [pc, #364]	; (8001964 <HAL_ADC_MspInit+0x18c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d154      	bne.n	80018a4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_ADC_MspInit+0x190>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_ADC_MspInit+0x190>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b55      	ldr	r3, [pc, #340]	; (8001968 <HAL_ADC_MspInit+0x190>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a54      	ldr	r2, [pc, #336]	; (8001968 <HAL_ADC_MspInit+0x190>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b52      	ldr	r3, [pc, #328]	; (8001968 <HAL_ADC_MspInit+0x190>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 800182a:	230d      	movs	r3, #13
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	484b      	ldr	r0, [pc, #300]	; (800196c <HAL_ADC_MspInit+0x194>)
 800183e:	f002 fcd7 	bl	80041f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001842:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001844:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <HAL_ADC_MspInit+0x19c>)
 8001846:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001848:	4b49      	ldr	r3, [pc, #292]	; (8001970 <HAL_ADC_MspInit+0x198>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800185a:	4b45      	ldr	r3, [pc, #276]	; (8001970 <HAL_ADC_MspInit+0x198>)
 800185c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001860:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001868:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_ADC_MspInit+0x198>)
 800186c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001870:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001874:	2200      	movs	r2, #0
 8001876:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001878:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_ADC_MspInit+0x198>)
 800187a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800187e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001886:	483a      	ldr	r0, [pc, #232]	; (8001970 <HAL_ADC_MspInit+0x198>)
 8001888:	f002 f9c8 	bl	8003c1c <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001892:	f7ff ff35 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a35      	ldr	r2, [pc, #212]	; (8001970 <HAL_ADC_MspInit+0x198>)
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
 800189c:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_ADC_MspInit+0x198>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80018a2:	e05b      	b.n	800195c <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a33      	ldr	r2, [pc, #204]	; (8001978 <HAL_ADC_MspInit+0x1a0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d156      	bne.n	800195c <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a2d      	ldr	r2, [pc, #180]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80018b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80018cc:	f043 0320 	orr.w	r3, r3, #32
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_ADC_MspInit+0x190>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSE_Pin|APP2_Pin;
 80018de:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4822      	ldr	r0, [pc, #136]	; (800197c <HAL_ADC_MspInit+0x1a4>)
 80018f4:	f002 fc7c 	bl	80041f0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 80018fa:	4a22      	ldr	r2, [pc, #136]	; (8001984 <HAL_ADC_MspInit+0x1ac>)
 80018fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001900:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001904:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001918:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 800191c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001920:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001924:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001928:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 800192c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001930:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001938:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001940:	480f      	ldr	r0, [pc, #60]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001942:	f002 f96b 	bl	8003c1c <HAL_DMA_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_ADC_MspInit+0x178>
      Error_Handler();
 800194c:	f7ff fed8 	bl	8001700 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001954:	639a      	str	r2, [r3, #56]	; 0x38
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_ADC_MspInit+0x1a8>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	; 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40012000 	.word	0x40012000
 8001968:	40023800 	.word	0x40023800
 800196c:	40020800 	.word	0x40020800
 8001970:	20000368 	.word	0x20000368
 8001974:	40026410 	.word	0x40026410
 8001978:	40012200 	.word	0x40012200
 800197c:	40021400 	.word	0x40021400
 8001980:	200003c8 	.word	0x200003c8
 8001984:	40026428 	.word	0x40026428

08001988 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	; 0x30
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_CAN_MspInit+0x128>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13a      	bne.n	8001a20 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019aa:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <HAL_CAN_MspInit+0x12c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <HAL_CAN_MspInit+0x12c>)
 80019b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019b4:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_CAN_MspInit+0x12c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10b      	bne.n	80019d4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a3d      	ldr	r2, [pc, #244]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a37      	ldr	r2, [pc, #220]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 80019ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019fe:	2309      	movs	r3, #9
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	482c      	ldr	r0, [pc, #176]	; (8001abc <HAL_CAN_MspInit+0x134>)
 8001a0a:	f002 fbf1 	bl	80041f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2014      	movs	r0, #20
 8001a14:	f002 f8cb 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a18:	2014      	movs	r0, #20
 8001a1a:	f002 f8e4 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a1e:	e042      	b.n	8001aa6 <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_CAN_MspInit+0x138>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d13d      	bne.n	8001aa6 <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_CAN_MspInit+0x12c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_CAN_MspInit+0x12c>)
 8001a4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_CAN_MspInit+0x12c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d10b      	bne.n	8001a6c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_CAN_MspInit+0x130>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 8001a84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a96:	2309      	movs	r3, #9
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4808      	ldr	r0, [pc, #32]	; (8001ac4 <HAL_CAN_MspInit+0x13c>)
 8001aa2:	f002 fba5 	bl	80041f0 <HAL_GPIO_Init>
}
 8001aa6:	bf00      	nop
 8001aa8:	3730      	adds	r7, #48	; 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40006400 	.word	0x40006400
 8001ab4:	200007c4 	.word	0x200007c4
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40006800 	.word	0x40006800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ac      	sub	sp, #176	; 0xb0
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	2284      	movs	r2, #132	; 0x84
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 fbfc 	bl	80082e6 <memset>
  if(hsd->Instance==SDMMC1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_SD_MspInit+0xfc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d161      	bne.n	8001bbc <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001af8:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001afc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fa64 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001b1a:	f7ff fdf1 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_SD_MspInit+0x100>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b66:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b80:	230c      	movs	r3, #12
 8001b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480f      	ldr	r0, [pc, #60]	; (8001bcc <HAL_SD_MspInit+0x104>)
 8001b8e:	f002 fb2f 	bl	80041f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b92:	2304      	movs	r3, #4
 8001b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001baa:	230c      	movs	r3, #12
 8001bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <HAL_SD_MspInit+0x108>)
 8001bb8:	f002 fb1a 	bl	80041f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37b0      	adds	r7, #176	; 0xb0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00

08001bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d129      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a39      	ldr	r2, [pc, #228]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4828      	ldr	r0, [pc, #160]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c44:	f002 fad4 	bl	80041f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c48:	e046      	b.n	8001cd8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <HAL_TIM_Base_MspInit+0x114>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d128      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c94:	2302      	movs	r3, #2
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4813      	ldr	r0, [pc, #76]	; (8001cec <HAL_TIM_Base_MspInit+0x118>)
 8001ca0:	f002 faa6 	bl	80041f0 <HAL_GPIO_Init>
}
 8001ca4:	e018      	b.n	8001cd8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM7)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d113      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001cb6:	f043 0320 	orr.w	r3, r3, #32
 8001cba:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2037      	movs	r0, #55	; 0x37
 8001cce:	f001 ff6e 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cd2:	2037      	movs	r0, #55	; 0x37
 8001cd4:	f001 ff87 	bl	8003be6 <HAL_NVIC_EnableIRQ>
}
 8001cd8:	bf00      	nop
 8001cda:	3730      	adds	r7, #48	; 0x30
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40001400 	.word	0x40001400

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0ae      	sub	sp, #184	; 0xb8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	2284      	movs	r2, #132	; 0x84
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 fae6 	bl	80082e6 <memset>
  if(huart->Instance==UART4)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a64      	ldr	r2, [pc, #400]	; (8001eb0 <HAL_UART_MspInit+0x1bc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d13c      	bne.n	8001d9e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 f952 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d3e:	f7ff fcdf 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d42:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a5b      	ldr	r2, [pc, #364]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b56      	ldr	r3, [pc, #344]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a55      	ldr	r2, [pc, #340]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4848      	ldr	r0, [pc, #288]	; (8001eb8 <HAL_UART_MspInit+0x1c4>)
 8001d98:	f002 fa2a 	bl	80041f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d9c:	e083      	b.n	8001ea6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a46      	ldr	r2, [pc, #280]	; (8001ebc <HAL_UART_MspInit+0x1c8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d13c      	bne.n	8001e22 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 f910 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001dc2:	f7ff fc9d 	bl	8001700 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dde:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a34      	ldr	r2, [pc, #208]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 8001df6:	23c0      	movs	r3, #192	; 0xc0
 8001df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4829      	ldr	r0, [pc, #164]	; (8001ec0 <HAL_UART_MspInit+0x1cc>)
 8001e1c:	f002 f9e8 	bl	80041f0 <HAL_GPIO_Init>
}
 8001e20:	e041      	b.n	8001ea6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_UART_MspInit+0x1d0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d13c      	bne.n	8001ea6 <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e30:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 f8ce 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001e46:	f7ff fc5b 	bl	8001700 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_UART_MspInit+0x1c0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e94:	2307      	movs	r3, #7
 8001e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_UART_MspInit+0x1d4>)
 8001ea2:	f002 f9a5 	bl	80041f0 <HAL_GPIO_Init>
}
 8001ea6:	bf00      	nop
 8001ea8:	37b8      	adds	r7, #184	; 0xb8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40004c00 	.word	0x40004c00
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40007800 	.word	0x40007800
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40004800 	.word	0x40004800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_FMC_MspInit+0xa4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d13f      	bne.n	8001f68 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_FMC_MspInit+0xa4>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_FMC_MspInit+0xa8>)
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_FMC_MspInit+0xa8>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6393      	str	r3, [r2, #56]	; 0x38
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_FMC_MspInit+0xa8>)
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4815      	ldr	r0, [pc, #84]	; (8001f78 <HAL_FMC_MspInit+0xac>)
 8001f22:	f002 f965 	bl	80041f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f26:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f38:	230c      	movs	r3, #12
 8001f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480e      	ldr	r0, [pc, #56]	; (8001f7c <HAL_FMC_MspInit+0xb0>)
 8001f42:	f002 f955 	bl	80041f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f46:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001f4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <HAL_FMC_MspInit+0xb4>)
 8001f62:	f002 f945 	bl	80041f0 <HAL_GPIO_Init>
 8001f66:	e000      	b.n	8001f6a <HAL_FMC_MspInit+0x9e>
    return;
 8001f68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200007c8 	.word	0x200007c8
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40020c00 	.word	0x40020c00

08001f84 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f8c:	f7ff ff9e 	bl	8001ecc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 fdb0 	bl	8002b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <CAN1_RX0_IRQHandler+0x10>)
 8001ff2:	f001 fac7 	bl	8003584 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000428 	.word	0x20000428

08002000 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002004:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002008:	f002 fab8 	bl	800457c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002014:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002018:	f002 fab0 	bl	800457c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800201c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002020:	f002 faac 	bl	800457c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002024:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002028:	f002 faa8 	bl	800457c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TIM7_IRQHandler+0x10>)
 8002036:	f004 fa1b 	bl	8006470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000594 	.word	0x20000594

08002044 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <DMA2_Stream0_IRQHandler+0x10>)
 800204a:	f001 fe95 	bl	8003d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000368 	.word	0x20000368

08002058 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <DMA2_Stream1_IRQHandler+0x10>)
 800205e:	f001 fe8b 	bl	8003d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200003c8 	.word	0x200003c8

0800206c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_kill>:

int _kill(int pid, int sig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002086:	f006 f97d 	bl	8008384 <__errno>
 800208a:	4603      	mov	r3, r0
 800208c:	2216      	movs	r2, #22
 800208e:	601a      	str	r2, [r3, #0]
  return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_exit>:

void _exit (int status)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe7 	bl	800207c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ae:	e7fe      	b.n	80020ae <_exit+0x12>

080020b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e00a      	b.n	80020d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c2:	f3af 8000 	nop.w
 80020c6:	4601      	mov	r1, r0
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	60ba      	str	r2, [r7, #8]
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf0      	blt.n	80020c2 <_read+0x12>
  }

  return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e009      	b.n	8002110 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	60ba      	str	r2, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf1      	blt.n	80020fc <_write+0x12>
  }
  return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_close>:

int _close(int file)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214a:	605a      	str	r2, [r3, #4]
  return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_isatty>:

int _isatty(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f006 f8e2 	bl	8008384 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20050000 	.word	0x20050000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	200007cc 	.word	0x200007cc
 80021f4:	20000928 	.word	0x20000928

080021f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <Tetris>:
//#include <Windows.h>


//void draw_board(game_t *game, piece_t *active_piece);

void Tetris(void){
 800221c:	b580      	push	{r7, lr}
 800221e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002222:	af00      	add	r7, sp, #0
    cell_t board[BOARD_WIDTH][BOARD_HEIGHT + BOARD_EXTRA_ROWS];
    game_t game;
    game.shift_period = 5;
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800222c:	2205      	movs	r2, #5
 800222e:	609a      	str	r2, [r3, #8]
    piece_t active_piece;
    new_piece(&active_piece);
 8002230:	463b      	mov	r3, r7
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fbe0 	bl	80009f8 <new_piece>
    int score = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

    init_board(&game);
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fa43 	bl	80006ce <init_board>

    while(1){
        board_update(&active_piece, &game);
 8002248:	f107 0218 	add.w	r2, r7, #24
 800224c:	463b      	mov	r3, r7
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fb9f 	bl	8000994 <board_update>
        //draw_board(&game, &active_piece);
        HAL_Delay(100);
 8002256:	2064      	movs	r0, #100	; 0x64
 8002258:	f000 fc96 	bl	8002b88 <HAL_Delay>
        if(topped_out(&game)){
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fd08 	bl	8000c76 <topped_out>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d100      	bne.n	800226e <Tetris+0x52>
    while(1){
 800226c:	e7ec      	b.n	8002248 <Tetris+0x2c>
            //printf("YOU TOPPED OUT, BUM!");
            return;
 800226e:	bf00      	nop
        }
    }
}
 8002270:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b087      	sub	sp, #28
 800227c:	af02      	add	r7, sp, #8
 800227e:	4603      	mov	r3, r0
 8002280:	603a      	str	r2, [r7, #0]
 8002282:	80fb      	strh	r3, [r7, #6]
 8002284:	460b      	mov	r3, r1
 8002286:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8002290:	e06d      	b.n	800236e <UG_PutString+0xf6>
   {
      chr = *str++;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	603a      	str	r2, [r7, #0]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b37      	ldr	r3, [pc, #220]	; (8002380 <UG_PutString+0x108>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d361      	bcc.n	800236e <UG_PutString+0xf6>
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <UG_PutString+0x108>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d900      	bls.n	80022ba <UG_PutString+0x42>
 80022b8:	e059      	b.n	800236e <UG_PutString+0xf6>
      if ( chr == '\n' )
 80022ba:	7afb      	ldrb	r3, [r7, #11]
 80022bc:	2b0a      	cmp	r3, #10
 80022be:	d104      	bne.n	80022ca <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 80022c0:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <UG_PutString+0x108>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	889b      	ldrh	r3, [r3, #4]
 80022c6:	81fb      	strh	r3, [r7, #14]
         continue;
 80022c8:	e051      	b.n	800236e <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <UG_PutString+0x108>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <UG_PutString+0x72>
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <UG_PutString+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	7afa      	ldrb	r2, [r7, #11]
 80022dc:	4928      	ldr	r1, [pc, #160]	; (8002380 <UG_PutString+0x108>)
 80022de:	6809      	ldr	r1, [r1, #0]
 80022e0:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80022e2:	1a52      	subs	r2, r2, r1
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	e004      	b.n	80022f4 <UG_PutString+0x7c>
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <UG_PutString+0x108>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <UG_PutString+0x108>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022fe:	4619      	mov	r1, r3
 8002300:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002304:	7abb      	ldrb	r3, [r7, #10]
 8002306:	4413      	add	r3, r2
 8002308:	4299      	cmp	r1, r3
 800230a:	dc11      	bgt.n	8002330 <UG_PutString+0xb8>
      {
         xp = x;
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <UG_PutString+0x108>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <UG_PutString+0x108>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8002322:	b29b      	uxth	r3, r3
 8002324:	4413      	add	r3, r2
 8002326:	b29a      	uxth	r2, r3
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <UG_PutString+0x108>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <UG_PutString+0x108>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002340:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002344:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002348:	7af8      	ldrb	r0, [r7, #11]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4623      	mov	r3, r4
 800234e:	f000 f819 	bl	8002384 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8002352:	7abb      	ldrb	r3, [r7, #10]
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <UG_PutString+0x108>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 800235e:	b21b      	sxth	r3, r3
 8002360:	4413      	add	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	4413      	add	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d18d      	bne.n	8002292 <UG_PutString+0x1a>
   }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	200007d0 	.word	0x200007d0

08002384 <UG_PutChar>:
      xp += cw + gui->char_h_space;
   }
}

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af02      	add	r7, sp, #8
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4623      	mov	r3, r4
 8002394:	71fb      	strb	r3, [r7, #7]
 8002396:	4603      	mov	r3, r0
 8002398:	80bb      	strh	r3, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]
 800239e:	4613      	mov	r3, r2
 80023a0:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <UG_PutChar+0x44>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	332c      	adds	r3, #44	; 0x2c
 80023a8:	883c      	ldrh	r4, [r7, #0]
 80023aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023b2:	79f8      	ldrb	r0, [r7, #7]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	8b3b      	ldrh	r3, [r7, #24]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4623      	mov	r3, r4
 80023bc:	f000 f806 	bl	80023cc <_UG_PutChar>
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	200007d0 	.word	0x200007d0

080023cc <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 80023cc:	b5b0      	push	{r4, r5, r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4604      	mov	r4, r0
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	4603      	mov	r3, r0
 80023e0:	80bb      	strh	r3, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	807b      	strh	r3, [r7, #2]
 80023e6:	4613      	mov	r3, r2
 80023e8:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 80023ee:	7e3b      	ldrb	r3, [r7, #24]
 80023f0:	2bfc      	cmp	r3, #252	; 0xfc
 80023f2:	dc77      	bgt.n	80024e4 <_UG_PutChar+0x118>
 80023f4:	2bd6      	cmp	r3, #214	; 0xd6
 80023f6:	da08      	bge.n	800240a <_UG_PutChar+0x3e>
 80023f8:	2bc4      	cmp	r3, #196	; 0xc4
 80023fa:	d06a      	beq.n	80024d2 <_UG_PutChar+0x106>
 80023fc:	2bc4      	cmp	r3, #196	; 0xc4
 80023fe:	dc71      	bgt.n	80024e4 <_UG_PutChar+0x118>
 8002400:	2bb0      	cmp	r3, #176	; 0xb0
 8002402:	d06c      	beq.n	80024de <_UG_PutChar+0x112>
 8002404:	2bb5      	cmp	r3, #181	; 0xb5
 8002406:	d067      	beq.n	80024d8 <_UG_PutChar+0x10c>
 8002408:	e06c      	b.n	80024e4 <_UG_PutChar+0x118>
 800240a:	3bd6      	subs	r3, #214	; 0xd6
 800240c:	2b26      	cmp	r3, #38	; 0x26
 800240e:	d869      	bhi.n	80024e4 <_UG_PutChar+0x118>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <_UG_PutChar+0x4c>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	080024bb 	.word	0x080024bb
 800241c:	080024e5 	.word	0x080024e5
 8002420:	080024e5 	.word	0x080024e5
 8002424:	080024e5 	.word	0x080024e5
 8002428:	080024e5 	.word	0x080024e5
 800242c:	080024e5 	.word	0x080024e5
 8002430:	080024c7 	.word	0x080024c7
 8002434:	080024e5 	.word	0x080024e5
 8002438:	080024e5 	.word	0x080024e5
 800243c:	080024e5 	.word	0x080024e5
 8002440:	080024e5 	.word	0x080024e5
 8002444:	080024e5 	.word	0x080024e5
 8002448:	080024e5 	.word	0x080024e5
 800244c:	080024e5 	.word	0x080024e5
 8002450:	080024cd 	.word	0x080024cd
 8002454:	080024e5 	.word	0x080024e5
 8002458:	080024e5 	.word	0x080024e5
 800245c:	080024e5 	.word	0x080024e5
 8002460:	080024e5 	.word	0x080024e5
 8002464:	080024e5 	.word	0x080024e5
 8002468:	080024e5 	.word	0x080024e5
 800246c:	080024e5 	.word	0x080024e5
 8002470:	080024e5 	.word	0x080024e5
 8002474:	080024e5 	.word	0x080024e5
 8002478:	080024e5 	.word	0x080024e5
 800247c:	080024e5 	.word	0x080024e5
 8002480:	080024e5 	.word	0x080024e5
 8002484:	080024e5 	.word	0x080024e5
 8002488:	080024e5 	.word	0x080024e5
 800248c:	080024e5 	.word	0x080024e5
 8002490:	080024e5 	.word	0x080024e5
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080024b5 	.word	0x080024b5
 800249c:	080024e5 	.word	0x080024e5
 80024a0:	080024e5 	.word	0x080024e5
 80024a4:	080024e5 	.word	0x080024e5
 80024a8:	080024e5 	.word	0x080024e5
 80024ac:	080024e5 	.word	0x080024e5
 80024b0:	080024c1 	.word	0x080024c1
   {
      case 0xF6: bt = 0x94; break; // ö
 80024b4:	2394      	movs	r3, #148	; 0x94
 80024b6:	763b      	strb	r3, [r7, #24]
 80024b8:	e014      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 80024ba:	2399      	movs	r3, #153	; 0x99
 80024bc:	763b      	strb	r3, [r7, #24]
 80024be:	e011      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 80024c0:	2381      	movs	r3, #129	; 0x81
 80024c2:	763b      	strb	r3, [r7, #24]
 80024c4:	e00e      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 80024c6:	239a      	movs	r3, #154	; 0x9a
 80024c8:	763b      	strb	r3, [r7, #24]
 80024ca:	e00b      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 80024cc:	2384      	movs	r3, #132	; 0x84
 80024ce:	763b      	strb	r3, [r7, #24]
 80024d0:	e008      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 80024d2:	238e      	movs	r3, #142	; 0x8e
 80024d4:	763b      	strb	r3, [r7, #24]
 80024d6:	e005      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 80024d8:	23e6      	movs	r3, #230	; 0xe6
 80024da:	763b      	strb	r3, [r7, #24]
 80024dc:	e002      	b.n	80024e4 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 80024de:	23f8      	movs	r3, #248	; 0xf8
 80024e0:	763b      	strb	r3, [r7, #24]
 80024e2:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 80024e4:	7e3b      	ldrb	r3, [r7, #24]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ea:	895b      	ldrh	r3, [r3, #10]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f0c0 81fc 	bcc.w	80028ea <_UG_PutChar+0x51e>
 80024f2:	7e3b      	ldrb	r3, [r7, #24]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f8:	899b      	ldrh	r3, [r3, #12]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	f200 81f5 	bhi.w	80028ea <_UG_PutChar+0x51e>

   yo = y;
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8002504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002506:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800250a:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 800250c:	8b7b      	ldrh	r3, [r7, #26]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 81ed 	beq.w	80028ee <_UG_PutChar+0x522>
   bn >>= 3;
 8002514:	8b7b      	ldrh	r3, [r7, #26]
 8002516:	08db      	lsrs	r3, r3, #3
 8002518:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 800251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <_UG_PutChar+0x166>
 800252c:	8b7b      	ldrh	r3, [r7, #26]
 800252e:	3301      	adds	r3, #1
 8002530:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <_UG_PutChar+0x182>
 800253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	7e3a      	ldrb	r2, [r7, #24]
 8002540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002542:	8949      	ldrh	r1, [r1, #10]
 8002544:	1a52      	subs	r2, r2, r1
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	e003      	b.n	8002556 <_UG_PutChar+0x18a>
 800254e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002550:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002554:	b29b      	uxth	r3, r3
 8002556:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8002558:	4b93      	ldr	r3, [pc, #588]	; (80027a8 <_UG_PutChar+0x3dc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80d8 	beq.w	800271a <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 800256a:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <_UG_PutChar+0x3dc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	461d      	mov	r5, r3
 8002572:	88ba      	ldrh	r2, [r7, #4]
 8002574:	8a7b      	ldrh	r3, [r7, #18]
 8002576:	4413      	add	r3, r2
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29b      	uxth	r3, r3
 800257e:	b21c      	sxth	r4, r3
 8002580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002582:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002586:	b29a      	uxth	r2, r3
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	4413      	add	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	b21b      	sxth	r3, r3
 8002594:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002598:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800259c:	4622      	mov	r2, r4
 800259e:	47a8      	blx	r5
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 80025a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a6:	791b      	ldrb	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d14d      	bne.n	8002648 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 80025ac:	7e3b      	ldrb	r3, [r7, #24]
 80025ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b0:	8952      	ldrh	r2, [r2, #10]
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	8b7a      	ldrh	r2, [r7, #26]
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 80025c6:	2300      	movs	r3, #0
 80025c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025ca:	e036      	b.n	800263a <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 80025cc:	8a7b      	ldrh	r3, [r7, #18]
 80025ce:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 80025d0:	2300      	movs	r3, #0
 80025d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025d4:	e02a      	b.n	800262c <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1c59      	adds	r1, r3, #1
 80025de:	6179      	str	r1, [r7, #20]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 80025e6:	2300      	movs	r3, #0
 80025e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80025ea:	e016      	b.n	800261a <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 80025ec:	7e7b      	ldrb	r3, [r7, #25]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 80025f6:	883a      	ldrh	r2, [r7, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4610      	mov	r0, r2
 80025fc:	4798      	blx	r3
 80025fe:	e003      	b.n	8002608 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8002600:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4610      	mov	r0, r2
 8002606:	4798      	blx	r3
				   }
				   b >>= 1;
 8002608:	7e7b      	ldrb	r3, [r7, #25]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	767b      	strb	r3, [r7, #25]
				   c--;
 800260e:	8bbb      	ldrh	r3, [r7, #28]
 8002610:	3b01      	subs	r3, #1
 8002612:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8002614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002616:	3301      	adds	r3, #1
 8002618:	847b      	strh	r3, [r7, #34]	; 0x22
 800261a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800261c:	2b07      	cmp	r3, #7
 800261e:	d802      	bhi.n	8002626 <_UG_PutChar+0x25a>
 8002620:	8bbb      	ldrh	r3, [r7, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e2      	bne.n	80025ec <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8002626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002628:	3301      	adds	r3, #1
 800262a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800262c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800262e:	8b7b      	ldrh	r3, [r7, #26]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3d0      	bcc.n	80025d6 <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8002634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002636:	3301      	adds	r3, #1
 8002638:	84bb      	strh	r3, [r7, #36]	; 0x24
 800263a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800263c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800263e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002642:	4293      	cmp	r3, r2
 8002644:	dbc2      	blt.n	80025cc <_UG_PutChar+0x200>
 8002646:	e153      	b.n	80028f0 <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	791b      	ldrb	r3, [r3, #4]
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 814f 	bne.w	80028f0 <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8002652:	7e3b      	ldrb	r3, [r7, #24]
 8002654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002656:	8952      	ldrh	r2, [r2, #10]
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002666:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8002670:	2300      	movs	r3, #0
 8002672:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002674:	e04a      	b.n	800270c <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 8002676:	2300      	movs	r3, #0
 8002678:	84fb      	strh	r3, [r7, #38]	; 0x26
 800267a:	e036      	b.n	80026ea <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 800267c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	6179      	str	r1, [r7, #20]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 800268c:	883b      	ldrh	r3, [r7, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	7e7a      	ldrb	r2, [r7, #25]
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002698:	b2db      	uxtb	r3, r3
 800269a:	7e79      	ldrb	r1, [r7, #25]
 800269c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	121b      	asrs	r3, r3, #8
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	883b      	ldrh	r3, [r7, #0]
 80026b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026b4:	7e79      	ldrb	r1, [r7, #25]
 80026b6:	fb03 f101 	mul.w	r1, r3, r1
 80026ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026c0:	7e78      	ldrb	r0, [r7, #25]
 80026c2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80026c6:	fb00 f303 	mul.w	r3, r0, r3
 80026ca:	440b      	add	r3, r1
 80026cc:	121b      	asrs	r3, r3, #8
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 80026dc:	8a3a      	ldrh	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4610      	mov	r0, r2
 80026e2:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 80026e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026e6:	3301      	adds	r3, #1
 80026e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80026ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80026ec:	8a7b      	ldrh	r3, [r7, #18]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3c4      	bcc.n	800267c <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 80026f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80026f8:	461a      	mov	r2, r3
 80026fa:	8a7b      	ldrh	r3, [r7, #18]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	4413      	add	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8002706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002708:	3301      	adds	r3, #1
 800270a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800270c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800270e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002710:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002714:	4293      	cmp	r3, r2
 8002716:	dbae      	blt.n	8002676 <_UG_PutChar+0x2aa>
 8002718:	e0ea      	b.n	80028f0 <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 800271a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d16e      	bne.n	8002800 <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 8002722:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8002726:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800272a:	8a7b      	ldrh	r3, [r7, #18]
 800272c:	4413      	add	r3, r2
 800272e:	3b01      	subs	r3, #1
 8002730:	461c      	mov	r4, r3
 8002732:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800273a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800273c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002740:	4413      	add	r3, r2
 8002742:	3b01      	subs	r3, #1
 8002744:	460a      	mov	r2, r1
 8002746:	4621      	mov	r1, r4
 8002748:	f000 f8d8 	bl	80028fc <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 800274c:	f000 f91f 	bl	800298e <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8002750:	7e3b      	ldrb	r3, [r7, #24]
 8002752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002754:	8952      	ldrh	r2, [r2, #10]
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	8b7a      	ldrh	r2, [r7, #26]
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 800276a:	2300      	movs	r3, #0
 800276c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800276e:	e040      	b.n	80027f2 <_UG_PutChar+0x426>
         {
           xo = x;
 8002770:	88bb      	ldrh	r3, [r7, #4]
 8002772:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8002774:	8a7b      	ldrh	r3, [r7, #18]
 8002776:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 8002778:	2300      	movs	r3, #0
 800277a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800277c:	e02f      	b.n	80027de <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 800277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	6179      	str	r1, [r7, #20]
 8002788:	4413      	add	r3, r2
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 800278e:	2300      	movs	r3, #0
 8002790:	847b      	strh	r3, [r7, #34]	; 0x22
 8002792:	e01b      	b.n	80027cc <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8002794:	7e7b      	ldrb	r3, [r7, #25]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 800279e:	883b      	ldrh	r3, [r7, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f8fb 	bl	800299c <SSD1963_ConsecutivePSet>
 80027a6:	e005      	b.n	80027b4 <_UG_PutChar+0x3e8>
 80027a8:	200007d0 	.word	0x200007d0
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 80027ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f8f4 	bl	800299c <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 80027b4:	7e7b      	ldrb	r3, [r7, #25]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	767b      	strb	r3, [r7, #25]
               xo++;
 80027ba:	8c3b      	ldrh	r3, [r7, #32]
 80027bc:	3301      	adds	r3, #1
 80027be:	843b      	strh	r3, [r7, #32]
               c--;
 80027c0:	8bbb      	ldrh	r3, [r7, #28]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 80027c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027c8:	3301      	adds	r3, #1
 80027ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80027cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027ce:	2b07      	cmp	r3, #7
 80027d0:	d802      	bhi.n	80027d8 <_UG_PutChar+0x40c>
 80027d2:	8bbb      	ldrh	r3, [r7, #28]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1dd      	bne.n	8002794 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 80027d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027da:	3301      	adds	r3, #1
 80027dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80027de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80027e0:	8b7b      	ldrh	r3, [r7, #26]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3cb      	bcc.n	800277e <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 80027e6:	8bfb      	ldrh	r3, [r7, #30]
 80027e8:	3301      	adds	r3, #1
 80027ea:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 80027ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027ee:	3301      	adds	r3, #1
 80027f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027f6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80027fa:	4293      	cmp	r3, r2
 80027fc:	dbb8      	blt.n	8002770 <_UG_PutChar+0x3a4>
 80027fe:	e077      	b.n	80028f0 <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002802:	791b      	ldrb	r3, [r3, #4]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d173      	bne.n	80028f0 <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8002808:	7e3b      	ldrb	r3, [r7, #24]
 800280a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280c:	8952      	ldrh	r2, [r2, #10]
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002812:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800281c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8002826:	2300      	movs	r3, #0
 8002828:	84bb      	strh	r3, [r7, #36]	; 0x24
 800282a:	e057      	b.n	80028dc <_UG_PutChar+0x510>
         {
            xo = x;
 800282c:	88bb      	ldrh	r3, [r7, #4]
 800282e:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8002830:	2300      	movs	r3, #0
 8002832:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002834:	e03e      	b.n	80028b4 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 8002836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	6179      	str	r1, [r7, #20]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8002846:	883b      	ldrh	r3, [r7, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	7e7a      	ldrb	r2, [r7, #25]
 800284c:	fb03 f202 	mul.w	r2, r3, r2
 8002850:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002852:	b2db      	uxtb	r3, r3
 8002854:	7e79      	ldrb	r1, [r7, #25]
 8002856:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	121b      	asrs	r3, r3, #8
 8002862:	b21b      	sxth	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	883b      	ldrh	r3, [r7, #0]
 800286a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800286e:	7e79      	ldrb	r1, [r7, #25]
 8002870:	fb03 f101 	mul.w	r1, r3, r1
 8002874:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800287a:	7e78      	ldrb	r0, [r7, #25]
 800287c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8002880:	fb00 f303 	mul.w	r3, r0, r3
 8002884:	440b      	add	r3, r1
 8002886:	121b      	asrs	r3, r3, #8
 8002888:	b21b      	sxth	r3, r3
 800288a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288e:	b21b      	sxth	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	b21b      	sxth	r3, r3
 8002894:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <_UG_PutChar+0x52c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80028a0:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80028a4:	8a3a      	ldrh	r2, [r7, #16]
 80028a6:	4798      	blx	r3
               xo++;
 80028a8:	8c3b      	ldrh	r3, [r7, #32]
 80028aa:	3301      	adds	r3, #1
 80028ac:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 80028ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028b0:	3301      	adds	r3, #1
 80028b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3bc      	bcc.n	8002836 <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 80028bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028c2:	461a      	mov	r2, r3
 80028c4:	8a7b      	ldrh	r3, [r7, #18]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4413      	add	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
            yo++;
 80028d0:	8bfb      	ldrh	r3, [r7, #30]
 80028d2:	3301      	adds	r3, #1
 80028d4:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 80028d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028d8:	3301      	adds	r3, #1
 80028da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80028e4:	4293      	cmp	r3, r2
 80028e6:	dba1      	blt.n	800282c <_UG_PutChar+0x460>
 80028e8:	e002      	b.n	80028f0 <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <_UG_PutChar+0x524>
   if ( !bn ) return;
 80028ee:	bf00      	nop
         }
      }
   }
}
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200007d0 	.word	0x200007d0

080028fc <SSD1963_WindowSet>:
    write_command(0x38); //set normal mode
    write_command(0x29); //set display on
}

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	b29b      	uxth	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	b29b      	uxth	r3, r3
 800291e:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29b      	uxth	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	b29b      	uxth	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8002936:	202a      	movs	r0, #42	; 0x2a
 8002938:	f000 f83d 	bl	80029b6 <write_command>
    write_multi_data(data, 4);
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	2104      	movs	r1, #4
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f86c 	bl	8002a20 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	b29b      	uxth	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	b29b      	uxth	r3, r3
 8002952:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	b29b      	uxth	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	b29b      	uxth	r3, r3
 800295c:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	b29b      	uxth	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	b29b      	uxth	r3, r3
 8002968:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8002974:	202b      	movs	r0, #43	; 0x2b
 8002976:	f000 f81e 	bl	80029b6 <write_command>
    write_multi_data(data, 4);
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	2104      	movs	r1, #4
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f84d 	bl	8002a20 <write_multi_data>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <SSD1963_WriteMemoryStart>:
    SSD1963_WindowSet(x, x + 1, y, y + 1);
    write_data(c);
}

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 800298e:	b580      	push	{r7, lr}
 8002990:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8002992:	202c      	movs	r0, #44	; 0x2c
 8002994:	f000 f80f 	bl	80029b6 <write_command>
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f81f 	bl	80029ec <write_data>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 80029c0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80029c4:	79fa      	ldrb	r2, [r7, #7]
 80029c6:	b292      	uxth	r2, r2
 80029c8:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80029ca:	2300      	movs	r3, #0
 80029cc:	81fb      	strh	r3, [r7, #14]
 80029ce:	e002      	b.n	80029d6 <write_command+0x20>
 80029d0:	89fb      	ldrh	r3, [r7, #14]
 80029d2:	3301      	adds	r3, #1
 80029d4:	81fb      	strh	r3, [r7, #14]
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	2b0b      	cmp	r3, #11
 80029da:	d9f9      	bls.n	80029d0 <write_command+0x1a>
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <write_data>:


void write_data(DATA_t data)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <write_data+0x30>)
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80029fc:	2300      	movs	r3, #0
 80029fe:	81fb      	strh	r3, [r7, #14]
 8002a00:	e002      	b.n	8002a08 <write_data+0x1c>
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	3301      	adds	r3, #1
 8002a06:	81fb      	strh	r3, [r7, #14]
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	2b0b      	cmp	r3, #11
 8002a0c:	d9f9      	bls.n	8002a02 <write_data+0x16>
 }
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	60000100 	.word	0x60000100

08002a20 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	81fb      	strh	r3, [r7, #14]
 8002a30:	e016      	b.n	8002a60 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 8002a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <write_multi_data+0x58>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002a42:	2300      	movs	r3, #0
 8002a44:	81bb      	strh	r3, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <write_multi_data+0x2e>
 8002a48:	89bb      	ldrh	r3, [r7, #12]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	81bb      	strh	r3, [r7, #12]
 8002a4e:	89bb      	ldrh	r3, [r7, #12]
 8002a50:	2b0b      	cmp	r3, #11
 8002a52:	d9f9      	bls.n	8002a48 <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 8002a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	81fb      	strh	r3, [r7, #14]
 8002a60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	dbe3      	blt.n	8002a32 <write_multi_data+0x12>
    }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	60000100 	.word	0x60000100

08002a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a80:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a82:	490e      	ldr	r1, [pc, #56]	; (8002abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a88:	e002      	b.n	8002a90 <LoopCopyDataInit>

08002a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8e:	3304      	adds	r3, #4

08002a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a94:	d3f9      	bcc.n	8002a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a96:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a98:	4c0b      	ldr	r4, [pc, #44]	; (8002ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a9c:	e001      	b.n	8002aa2 <LoopFillZerobss>

08002a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa0:	3204      	adds	r2, #4

08002aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa4:	d3fb      	bcc.n	8002a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa6:	f7ff fba7 	bl	80021f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f005 fc71 	bl	8008390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aae:	f7fe f91f 	bl	8000cf0 <main>
  bx  lr    
 8002ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002abc:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8002ac0:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 8002ac4:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002ac8:	20000924 	.word	0x20000924

08002acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC_IRQHandler>

08002ace <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f001 f860 	bl	8003b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ad8:	200f      	movs	r0, #15
 8002ada:	f000 f805 	bl	8002ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ade:	f7fe fe57 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_InitTick+0x54>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_InitTick+0x58>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f87b 	bl	8003c02 <HAL_SYSTICK_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00e      	b.n	8002b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f001 f843 	bl	8003bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <HAL_InitTick+0x5c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000250 	.word	0x20000250
 8002b40:	20000258 	.word	0x20000258
 8002b44:	20000254 	.word	0x20000254

08002b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_IncTick+0x20>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x24>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_IncTick+0x24>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000258 	.word	0x20000258
 8002b6c:	200007d4 	.word	0x200007d4

08002b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return uwTick;
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_GetTick+0x14>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	200007d4 	.word	0x200007d4

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff ffee 	bl	8002b70 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffde 	bl	8002b70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000258 	.word	0x20000258

08002bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e031      	b.n	8002c4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fdf2 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_ADC_Init+0x84>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	f043 0202 	orr.w	r2, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f970 	bl	8002f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3a:	e001      	b.n	8002c40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	ffffeefd 	.word	0xffffeefd

08002c58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x1c>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e136      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x28a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d93a      	bls.n	8002cfa <HAL_ADC_ConfigChannel+0xa2>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c8c:	d035      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b1e      	subs	r3, #30
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a8d      	ldr	r2, [pc, #564]	; (8002ef0 <HAL_ADC_ConfigChannel+0x298>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68d9      	ldr	r1, [r3, #12]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	061a      	lsls	r2, r3, #24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd2:	e035      	b.n	8002d40 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68d9      	ldr	r1, [r3, #12]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4403      	add	r3, r0
 8002cec:	3b1e      	subs	r3, #30
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf8:	e022      	b.n	8002d40 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6919      	ldr	r1, [r3, #16]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2207      	movs	r2, #7
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6919      	ldr	r1, [r3, #16]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4403      	add	r3, r0
 8002d36:	409a      	lsls	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d824      	bhi.n	8002d92 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	3b05      	subs	r3, #5
 8002d5a:	221f      	movs	r2, #31
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43da      	mvns	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	400a      	ands	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	3b05      	subs	r3, #5
 8002d84:	fa00 f203 	lsl.w	r2, r0, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d90:	e04c      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d824      	bhi.n	8002de4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	3b23      	subs	r3, #35	; 0x23
 8002dac:	221f      	movs	r2, #31
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3b23      	subs	r3, #35	; 0x23
 8002dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
 8002de2:	e023      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b41      	subs	r3, #65	; 0x41
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b41      	subs	r3, #65	; 0x41
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1f4>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e3e:	d105      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e4a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10f      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x21e>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d10b      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e68:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a22      	ldr	r2, [pc, #136]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e74:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_ADC_ConfigChannel+0x29c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d12b      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x280>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <HAL_ADC_ConfigChannel+0x298>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <HAL_ADC_ConfigChannel+0x23a>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b11      	cmp	r3, #17
 8002e90:	d122      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e9c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ea8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <HAL_ADC_ConfigChannel+0x298>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_ADC_ConfigChannel+0x2a4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_ADC_ConfigChannel+0x2a8>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9a      	lsrs	r2, r3, #18
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	10000012 	.word	0x10000012
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	20000250 	.word	0x20000250
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f0c:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <ADC_Init+0x1ec>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <ADC_Init+0x1ec>)
 8002f12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f18:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <ADC_Init+0x1ec>)
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4973      	ldr	r1, [pc, #460]	; (80030f0 <ADC_Init+0x1ec>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <ADC_Init+0x1f0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e00f      	b.n	8002ffe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0202 	bic.w	r2, r2, #2
 800300c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800304a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	035a      	lsls	r2, r3, #13
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	e007      	b.n	8003074 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	3b01      	subs	r3, #1
 8003090:	051a      	lsls	r2, r3, #20
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030b6:	025a      	lsls	r2, r3, #9
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	029a      	lsls	r2, r3, #10
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012300 	.word	0x40012300
 80030f4:	0f000001 	.word	0x0f000001

080030f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0ed      	b.n	80032e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fc36 	bl	8001988 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800312c:	f7ff fd20 	bl	8002b70 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003132:	e012      	b.n	800315a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003134:	f7ff fd1c 	bl	8002b70 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d90b      	bls.n	800315a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2205      	movs	r2, #5
 8003152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0c5      	b.n	80032e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0e5      	beq.n	8003134 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0202 	bic.w	r2, r2, #2
 8003176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003178:	f7ff fcfa 	bl	8002b70 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800317e:	e012      	b.n	80031a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003180:	f7ff fcf6 	bl	8002b70 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d90b      	bls.n	80031a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2205      	movs	r2, #5
 800319e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e09f      	b.n	80032e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e5      	bne.n	8003180 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7e1b      	ldrb	r3, [r3, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d108      	bne.n	80031ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e007      	b.n	80031de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7e5b      	ldrb	r3, [r3, #25]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d108      	bne.n	80031f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e007      	b.n	8003208 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7e9b      	ldrb	r3, [r3, #26]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d108      	bne.n	8003222 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0220 	orr.w	r2, r2, #32
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e007      	b.n	8003232 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0220 	bic.w	r2, r2, #32
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7edb      	ldrb	r3, [r3, #27]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0210 	bic.w	r2, r2, #16
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e007      	b.n	800325c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0210 	orr.w	r2, r2, #16
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7f1b      	ldrb	r3, [r3, #28]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e007      	b.n	8003286 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0208 	bic.w	r2, r2, #8
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7f5b      	ldrb	r3, [r3, #29]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d108      	bne.n	80032a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0204 	orr.w	r2, r2, #4
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e007      	b.n	80032b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	ea42 0103 	orr.w	r1, r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003306:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d003      	beq.n	8003316 <HAL_CAN_ConfigFilter+0x26>
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b02      	cmp	r3, #2
 8003312:	f040 80be 	bne.w	8003492 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_CAN_ConfigFilter+0x1bc>)
 8003318:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003330:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	431a      	orrs	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2201      	movs	r2, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	43db      	mvns	r3, r3
 8003368:	401a      	ands	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d123      	bne.n	80033c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800339a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	3248      	adds	r2, #72	; 0x48
 80033a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	3348      	adds	r3, #72	; 0x48
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d122      	bne.n	800340e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3248      	adds	r2, #72	; 0x48
 80033ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003402:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	3348      	adds	r3, #72	; 0x48
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	401a      	ands	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003428:	e007      	b.n	800343a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	431a      	orrs	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43db      	mvns	r3, r3
 800344c:	401a      	ands	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003454:	e007      	b.n	8003466 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	431a      	orrs	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	431a      	orrs	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003484:	f023 0201 	bic.w	r2, r3, #1
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e006      	b.n	80034a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40006400 	.word	0x40006400

080034b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d12e      	bne.n	8003522 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034dc:	f7ff fb48 	bl	8002b70 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034e2:	e012      	b.n	800350a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034e4:	f7ff fb44 	bl	8002b70 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b0a      	cmp	r3, #10
 80034f0:	d90b      	bls.n	800350a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2205      	movs	r2, #5
 8003502:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e012      	b.n	8003530 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e5      	bne.n	80034e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e006      	b.n	8003530 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003548:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d002      	beq.n	8003556 <HAL_CAN_ActivateNotification+0x1e>
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d109      	bne.n	800356a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6959      	ldr	r1, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e006      	b.n	8003578 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d07c      	beq.n	80036c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d023      	beq.n	800361c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f983 	bl	80038f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80035ec:	e016      	b.n	800361c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	e00c      	b.n	800361c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	e002      	b.n	800361c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f989 	bl	800392e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d024      	beq.n	8003670 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800362e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f963 	bl	8003906 <HAL_CAN_TxMailbox1CompleteCallback>
 8003640:	e016      	b.n	8003670 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	e00c      	b.n	8003670 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
 8003668:	e002      	b.n	8003670 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f969 	bl	8003942 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d024      	beq.n	80036c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003682:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f943 	bl	800391a <HAL_CAN_TxMailbox2CompleteCallback>
 8003694:	e016      	b.n	80036c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d004      	beq.n	80036aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
 80036a8:	e00c      	b.n	80036c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	e002      	b.n	80036c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f949 	bl	8003956 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f93a 	bl	800397e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f921 	bl	800396a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2210      	movs	r2, #16
 800374a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f91c 	bl	80039a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f903 	bl	8003992 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2210      	movs	r2, #16
 80037a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f906 	bl	80039ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2208      	movs	r2, #8
 80037c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8ff 	bl	80039ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d07b      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d072      	beq.n	80038ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383e:	2b00      	cmp	r3, #0
 8003840:	d043      	beq.n	80038ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03e      	beq.n	80038ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003852:	2b60      	cmp	r3, #96	; 0x60
 8003854:	d02b      	beq.n	80038ae <HAL_CAN_IRQHandler+0x32a>
 8003856:	2b60      	cmp	r3, #96	; 0x60
 8003858:	d82e      	bhi.n	80038b8 <HAL_CAN_IRQHandler+0x334>
 800385a:	2b50      	cmp	r3, #80	; 0x50
 800385c:	d022      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x320>
 800385e:	2b50      	cmp	r3, #80	; 0x50
 8003860:	d82a      	bhi.n	80038b8 <HAL_CAN_IRQHandler+0x334>
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d019      	beq.n	800389a <HAL_CAN_IRQHandler+0x316>
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d826      	bhi.n	80038b8 <HAL_CAN_IRQHandler+0x334>
 800386a:	2b30      	cmp	r3, #48	; 0x30
 800386c:	d010      	beq.n	8003890 <HAL_CAN_IRQHandler+0x30c>
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	d822      	bhi.n	80038b8 <HAL_CAN_IRQHandler+0x334>
 8003872:	2b10      	cmp	r3, #16
 8003874:	d002      	beq.n	800387c <HAL_CAN_IRQHandler+0x2f8>
 8003876:	2b20      	cmp	r3, #32
 8003878:	d005      	beq.n	8003886 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800387a:	e01d      	b.n	80038b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003884:	e019      	b.n	80038ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f043 0310 	orr.w	r3, r3, #16
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800388e:	e014      	b.n	80038ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003898:	e00f      	b.n	80038ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038a2:	e00a      	b.n	80038ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ac:	e005      	b.n	80038ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038b6:	e000      	b.n	80038ba <HAL_CAN_IRQHandler+0x336>
            break;
 80038b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2204      	movs	r2, #4
 80038d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f87c 	bl	80039e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038ea:	bf00      	nop
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <__NVIC_SetPriorityGrouping>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <__NVIC_SetPriorityGrouping+0x40>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a14:	4013      	ands	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <__NVIC_SetPriorityGrouping+0x40>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	60d3      	str	r3, [r2, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00
 8003a3c:	05fa0000 	.word	0x05fa0000

08003a40 <__NVIC_GetPriorityGrouping>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <__NVIC_GetPriorityGrouping+0x18>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	f003 0307 	and.w	r3, r3, #7
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_EnableIRQ>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db0b      	blt.n	8003a86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	f003 021f 	and.w	r2, r3, #31
 8003a74:	4907      	ldr	r1, [pc, #28]	; (8003a94 <__NVIC_EnableIRQ+0x38>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000e100 	.word	0xe000e100

08003a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	6039      	str	r1, [r7, #0]
 8003aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	db0a      	blt.n	8003ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	490c      	ldr	r1, [pc, #48]	; (8003ae4 <__NVIC_SetPriority+0x4c>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	440b      	add	r3, r1
 8003abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac0:	e00a      	b.n	8003ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	4908      	ldr	r1, [pc, #32]	; (8003ae8 <__NVIC_SetPriority+0x50>)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	3b04      	subs	r3, #4
 8003ad0:	0112      	lsls	r2, r2, #4
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	761a      	strb	r2, [r3, #24]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000e100 	.word	0xe000e100
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f1c3 0307 	rsb	r3, r3, #7
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	bf28      	it	cs
 8003b0a:	2304      	movcs	r3, #4
 8003b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d902      	bls.n	8003b1c <NVIC_EncodePriority+0x30>
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3b03      	subs	r3, #3
 8003b1a:	e000      	b.n	8003b1e <NVIC_EncodePriority+0x32>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	f04f 32ff 	mov.w	r2, #4294967295
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	401a      	ands	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b34:	f04f 31ff 	mov.w	r1, #4294967295
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	43d9      	mvns	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	4313      	orrs	r3, r2
         );
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3724      	adds	r7, #36	; 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b64:	d301      	bcc.n	8003b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00f      	b.n	8003b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <SysTick_Config+0x40>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b72:	210f      	movs	r1, #15
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	f7ff ff8e 	bl	8003a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <SysTick_Config+0x40>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b82:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <SysTick_Config+0x40>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	e000e010 	.word	0xe000e010

08003b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff29 	bl	80039f8 <__NVIC_SetPriorityGrouping>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc0:	f7ff ff3e 	bl	8003a40 <__NVIC_GetPriorityGrouping>
 8003bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ff8e 	bl	8003aec <NVIC_EncodePriority>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff5d 	bl	8003a98 <__NVIC_SetPriority>
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff31 	bl	8003a5c <__NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffa2 	bl	8003b54 <SysTick_Config>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7fe ffa2 	bl	8002b70 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e099      	b.n	8003d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c58:	e00f      	b.n	8003c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c5a:	f7fe ff89 	bl	8002b70 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d908      	bls.n	8003c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2203      	movs	r2, #3
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e078      	b.n	8003d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e8      	bne.n	8003c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <HAL_DMA_Init+0x158>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d107      	bne.n	8003ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d117      	bne.n	8003d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00e      	beq.n	8003d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9e9 	bl	80040f8 <DMA_CheckFifoParam>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e016      	b.n	8003d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f9a0 	bl	800408c <DMA_CalcBaseAndBitshift>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	223f      	movs	r2, #63	; 0x3f
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	f010803f 	.word	0xf010803f

08003d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d84:	4b8e      	ldr	r3, [pc, #568]	; (8003fc0 <HAL_DMA_IRQHandler+0x248>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a8e      	ldr	r2, [pc, #568]	; (8003fc4 <HAL_DMA_IRQHandler+0x24c>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	2208      	movs	r2, #8
 8003da4:	409a      	lsls	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01a      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	2204      	movs	r2, #4
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0204 	orr.w	r2, r3, #4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	2210      	movs	r2, #16
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d043      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03c      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	2210      	movs	r2, #16
 8003e74:	409a      	lsls	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d024      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
 8003ea6:	e01f      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01b      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
 8003eb8:	e016      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0208 	bic.w	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2220      	movs	r2, #32
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 808f 	beq.w	8004018 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8087 	beq.w	8004018 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2220      	movs	r2, #32
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d136      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0216 	bic.w	r2, r2, #22
 8003f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_DMA_IRQHandler+0x1da>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0208 	bic.w	r2, r2, #8
 8003f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	223f      	movs	r2, #63	; 0x3f
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d07e      	beq.n	8004084 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
        }
        return;
 8003f8e:	e079      	b.n	8004084 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10d      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d031      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
 8003fbc:	e02c      	b.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
 8003fbe:	bf00      	nop
 8003fc0:	20000250 	.word	0x20000250
 8003fc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d023      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e01e      	b.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0210 	bic.w	r2, r2, #16
 8003ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	d032      	beq.n	8004086 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2205      	movs	r2, #5
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3301      	adds	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	d307      	bcc.n	8004060 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f2      	bne.n	8004044 <HAL_DMA_IRQHandler+0x2cc>
 800405e:	e000      	b.n	8004062 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004060:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
 8004082:	e000      	b.n	8004086 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004084:	bf00      	nop
    }
  }
}
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	3b10      	subs	r3, #16
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <DMA_CalcBaseAndBitshift+0x60>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <DMA_CalcBaseAndBitshift+0x64>)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d908      	bls.n	80040cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <DMA_CalcBaseAndBitshift+0x68>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	; 0x58
 80040ca:	e006      	b.n	80040da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <DMA_CalcBaseAndBitshift+0x68>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	aaaaaaab 	.word	0xaaaaaaab
 80040f0:	08009068 	.word	0x08009068
 80040f4:	fffffc00 	.word	0xfffffc00

080040f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11f      	bne.n	8004152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d856      	bhi.n	80041c6 <DMA_CheckFifoParam+0xce>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <DMA_CheckFifoParam+0x28>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004131 	.word	0x08004131
 8004124:	08004143 	.word	0x08004143
 8004128:	08004131 	.word	0x08004131
 800412c:	080041c7 	.word	0x080041c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d046      	beq.n	80041ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004140:	e043      	b.n	80041ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414a:	d140      	bne.n	80041ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004150:	e03d      	b.n	80041ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415a:	d121      	bne.n	80041a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d837      	bhi.n	80041d2 <DMA_CheckFifoParam+0xda>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <DMA_CheckFifoParam+0x70>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004179 	.word	0x08004179
 800416c:	0800417f 	.word	0x0800417f
 8004170:	08004179 	.word	0x08004179
 8004174:	08004191 	.word	0x08004191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e030      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d025      	beq.n	80041d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e022      	b.n	80041d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004198:	d11f      	bne.n	80041da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800419e:	e01c      	b.n	80041da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d903      	bls.n	80041ae <DMA_CheckFifoParam+0xb6>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d003      	beq.n	80041b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041ac:	e018      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      break;
 80041b2:	e015      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e00b      	b.n	80041de <DMA_CheckFifoParam+0xe6>
      break;
 80041c6:	bf00      	nop
 80041c8:	e00a      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e008      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e006      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e004      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
    }
  } 
  
  return status; 
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop

080041f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e175      	b.n	80044fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004210:	2201      	movs	r2, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	429a      	cmp	r2, r3
 800422a:	f040 8164 	bne.w	80044f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d005      	beq.n	8004246 <HAL_GPIO_Init+0x56>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d130      	bne.n	80042a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	2203      	movs	r2, #3
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800427c:	2201      	movs	r2, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 0201 	and.w	r2, r3, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d017      	beq.n	80042e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2203      	movs	r2, #3
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d123      	bne.n	8004338 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	08da      	lsrs	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	08da      	lsrs	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3208      	adds	r2, #8
 8004332:	69b9      	ldr	r1, [r7, #24]
 8004334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2203      	movs	r2, #3
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80be 	beq.w	80044f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	4b66      	ldr	r3, [pc, #408]	; (8004514 <HAL_GPIO_Init+0x324>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	4a65      	ldr	r2, [pc, #404]	; (8004514 <HAL_GPIO_Init+0x324>)
 8004380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004384:	6453      	str	r3, [r2, #68]	; 0x44
 8004386:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_GPIO_Init+0x324>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004392:	4a61      	ldr	r2, [pc, #388]	; (8004518 <HAL_GPIO_Init+0x328>)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	3302      	adds	r3, #2
 800439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a58      	ldr	r2, [pc, #352]	; (800451c <HAL_GPIO_Init+0x32c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d037      	beq.n	800442e <HAL_GPIO_Init+0x23e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a57      	ldr	r2, [pc, #348]	; (8004520 <HAL_GPIO_Init+0x330>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_GPIO_Init+0x23a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a56      	ldr	r2, [pc, #344]	; (8004524 <HAL_GPIO_Init+0x334>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02b      	beq.n	8004426 <HAL_GPIO_Init+0x236>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a55      	ldr	r2, [pc, #340]	; (8004528 <HAL_GPIO_Init+0x338>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d025      	beq.n	8004422 <HAL_GPIO_Init+0x232>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a54      	ldr	r2, [pc, #336]	; (800452c <HAL_GPIO_Init+0x33c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01f      	beq.n	800441e <HAL_GPIO_Init+0x22e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a53      	ldr	r2, [pc, #332]	; (8004530 <HAL_GPIO_Init+0x340>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d019      	beq.n	800441a <HAL_GPIO_Init+0x22a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_GPIO_Init+0x344>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_GPIO_Init+0x226>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_GPIO_Init+0x348>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00d      	beq.n	8004412 <HAL_GPIO_Init+0x222>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a50      	ldr	r2, [pc, #320]	; (800453c <HAL_GPIO_Init+0x34c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <HAL_GPIO_Init+0x21e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4f      	ldr	r2, [pc, #316]	; (8004540 <HAL_GPIO_Init+0x350>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d101      	bne.n	800440a <HAL_GPIO_Init+0x21a>
 8004406:	2309      	movs	r3, #9
 8004408:	e012      	b.n	8004430 <HAL_GPIO_Init+0x240>
 800440a:	230a      	movs	r3, #10
 800440c:	e010      	b.n	8004430 <HAL_GPIO_Init+0x240>
 800440e:	2308      	movs	r3, #8
 8004410:	e00e      	b.n	8004430 <HAL_GPIO_Init+0x240>
 8004412:	2307      	movs	r3, #7
 8004414:	e00c      	b.n	8004430 <HAL_GPIO_Init+0x240>
 8004416:	2306      	movs	r3, #6
 8004418:	e00a      	b.n	8004430 <HAL_GPIO_Init+0x240>
 800441a:	2305      	movs	r3, #5
 800441c:	e008      	b.n	8004430 <HAL_GPIO_Init+0x240>
 800441e:	2304      	movs	r3, #4
 8004420:	e006      	b.n	8004430 <HAL_GPIO_Init+0x240>
 8004422:	2303      	movs	r3, #3
 8004424:	e004      	b.n	8004430 <HAL_GPIO_Init+0x240>
 8004426:	2302      	movs	r3, #2
 8004428:	e002      	b.n	8004430 <HAL_GPIO_Init+0x240>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <HAL_GPIO_Init+0x240>
 800442e:	2300      	movs	r3, #0
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	f002 0203 	and.w	r2, r2, #3
 8004436:	0092      	lsls	r2, r2, #2
 8004438:	4093      	lsls	r3, r2
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004440:	4935      	ldr	r1, [pc, #212]	; (8004518 <HAL_GPIO_Init+0x328>)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	3302      	adds	r3, #2
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_GPIO_Init+0x354>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004472:	4a34      	ldr	r2, [pc, #208]	; (8004544 <HAL_GPIO_Init+0x354>)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_GPIO_Init+0x354>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800449c:	4a29      	ldr	r2, [pc, #164]	; (8004544 <HAL_GPIO_Init+0x354>)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044a2:	4b28      	ldr	r3, [pc, #160]	; (8004544 <HAL_GPIO_Init+0x354>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044c6:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <HAL_GPIO_Init+0x354>)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_GPIO_Init+0x354>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <HAL_GPIO_Init+0x354>)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3301      	adds	r3, #1
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b0f      	cmp	r3, #15
 8004500:	f67f ae86 	bls.w	8004210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800
 8004518:	40013800 	.word	0x40013800
 800451c:	40020000 	.word	0x40020000
 8004520:	40020400 	.word	0x40020400
 8004524:	40020800 	.word	0x40020800
 8004528:	40020c00 	.word	0x40020c00
 800452c:	40021000 	.word	0x40021000
 8004530:	40021400 	.word	0x40021400
 8004534:	40021800 	.word	0x40021800
 8004538:	40021c00 	.word	0x40021c00
 800453c:	40022000 	.word	0x40022000
 8004540:	40022400 	.word	0x40022400
 8004544:	40013c00 	.word	0x40013c00

08004548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	807b      	strh	r3, [r7, #2]
 8004554:	4613      	mov	r3, r2
 8004556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004558:	787b      	ldrb	r3, [r7, #1]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004564:	e003      	b.n	800456e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	041a      	lsls	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	619a      	str	r2, [r3, #24]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	4013      	ands	r3, r2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004592:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc f806 	bl	80005ac <HAL_GPIO_EXTI_Callback>
  }
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40013c00 	.word	0x40013c00

080045ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	4b23      	ldr	r3, [pc, #140]	; (8004644 <HAL_PWREx_EnableOverDrive+0x98>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a22      	ldr	r2, [pc, #136]	; (8004644 <HAL_PWREx_EnableOverDrive+0x98>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_PWREx_EnableOverDrive+0x98>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045da:	f7fe fac9 	bl	8002b70 <HAL_GetTick>
 80045de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045e0:	e009      	b.n	80045f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045e2:	f7fe fac5 	bl	8002b70 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045f0:	d901      	bls.n	80045f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e022      	b.n	800463c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004602:	d1ee      	bne.n	80045e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004610:	f7fe faae 	bl	8002b70 <HAL_GetTick>
 8004614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004616:	e009      	b.n	800462c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004618:	f7fe faaa 	bl	8002b70 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004626:	d901      	bls.n	800462c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e007      	b.n	800463c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004638:	d1ee      	bne.n	8004618 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000

0800464c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004654:	2300      	movs	r3, #0
 8004656:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e291      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8087 	beq.w	800477e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004670:	4b96      	ldr	r3, [pc, #600]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b04      	cmp	r3, #4
 800467a:	d00c      	beq.n	8004696 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467c:	4b93      	ldr	r3, [pc, #588]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d112      	bne.n	80046ae <HAL_RCC_OscConfig+0x62>
 8004688:	4b90      	ldr	r3, [pc, #576]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004694:	d10b      	bne.n	80046ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004696:	4b8d      	ldr	r3, [pc, #564]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d06c      	beq.n	800477c <HAL_RCC_OscConfig+0x130>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d168      	bne.n	800477c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e26b      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x7a>
 80046b8:	4b84      	ldr	r3, [pc, #528]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a83      	ldr	r2, [pc, #524]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	e02e      	b.n	8004724 <HAL_RCC_OscConfig+0xd8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x9c>
 80046ce:	4b7f      	ldr	r3, [pc, #508]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7e      	ldr	r2, [pc, #504]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7b      	ldr	r2, [pc, #492]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e01d      	b.n	8004724 <HAL_RCC_OscConfig+0xd8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0xc0>
 80046f2:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80046f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b73      	ldr	r3, [pc, #460]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a72      	ldr	r2, [pc, #456]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e00b      	b.n	8004724 <HAL_RCC_OscConfig+0xd8>
 800470c:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a6e      	ldr	r2, [pc, #440]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a6b      	ldr	r2, [pc, #428]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800471e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe fa20 	bl	8002b70 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe fa1c 	bl	8002b70 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e21f      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e014      	b.n	800477e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe fa0c 	bl	8002b70 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fe fa08 	bl	8002b70 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e20b      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x110>
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d069      	beq.n	800485e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800478a:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004796:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d11c      	bne.n	80047dc <HAL_RCC_OscConfig+0x190>
 80047a2:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d116      	bne.n	80047dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_RCC_OscConfig+0x17a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d001      	beq.n	80047c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e1df      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	493d      	ldr	r1, [pc, #244]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047da:	e040      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d023      	beq.n	800482c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e4:	4b39      	ldr	r3, [pc, #228]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a38      	ldr	r2, [pc, #224]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe f9be 	bl	8002b70 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f8:	f7fe f9ba 	bl	8002b70 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e1bd      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4929      	ldr	r1, [pc, #164]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
 800482a:	e018      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482c:	4b27      	ldr	r3, [pc, #156]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fe f99a 	bl	8002b70 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004840:	f7fe f996 	bl	8002b70 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e199      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d038      	beq.n	80048dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d019      	beq.n	80048a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fe f977 	bl	8002b70 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004886:	f7fe f973 	bl	8002b70 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e176      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x23a>
 80048a4:	e01a      	b.n	80048dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <HAL_RCC_OscConfig+0x280>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fe f95d 	bl	8002b70 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe f959 	bl	8002b70 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d903      	bls.n	80048d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e15c      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
 80048cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	4b91      	ldr	r3, [pc, #580]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80048d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ee      	bne.n	80048ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a4 	beq.w	8004a32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ea:	4b8b      	ldr	r3, [pc, #556]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4a87      	ldr	r2, [pc, #540]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80048fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004900:	6413      	str	r3, [r2, #64]	; 0x40
 8004902:	4b85      	ldr	r3, [pc, #532]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004912:	4b82      	ldr	r3, [pc, #520]	; (8004b1c <HAL_RCC_OscConfig+0x4d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d118      	bne.n	8004950 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800491e:	4b7f      	ldr	r3, [pc, #508]	; (8004b1c <HAL_RCC_OscConfig+0x4d0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7e      	ldr	r2, [pc, #504]	; (8004b1c <HAL_RCC_OscConfig+0x4d0>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492a:	f7fe f921 	bl	8002b70 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004932:	f7fe f91d 	bl	8002b70 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	; 0x64
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e120      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004944:	4b75      	ldr	r3, [pc, #468]	; (8004b1c <HAL_RCC_OscConfig+0x4d0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d106      	bne.n	8004966 <HAL_RCC_OscConfig+0x31a>
 8004958:	4b6f      	ldr	r3, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4a6e      	ldr	r2, [pc, #440]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6713      	str	r3, [r2, #112]	; 0x70
 8004964:	e02d      	b.n	80049c2 <HAL_RCC_OscConfig+0x376>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0x33c>
 800496e:	4b6a      	ldr	r3, [pc, #424]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a69      	ldr	r2, [pc, #420]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
 800497a:	4b67      	ldr	r3, [pc, #412]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	4a66      	ldr	r2, [pc, #408]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6713      	str	r3, [r2, #112]	; 0x70
 8004986:	e01c      	b.n	80049c2 <HAL_RCC_OscConfig+0x376>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_OscConfig+0x35e>
 8004990:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a60      	ldr	r2, [pc, #384]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
 800499c:	4b5e      	ldr	r3, [pc, #376]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a5d      	ldr	r2, [pc, #372]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e00b      	b.n	80049c2 <HAL_RCC_OscConfig+0x376>
 80049aa:	4b5b      	ldr	r3, [pc, #364]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a5a      	ldr	r2, [pc, #360]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a57      	ldr	r2, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fe f8d1 	bl	8002b70 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fe f8cd 	bl	8002b70 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0ce      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e8:	4b4b      	ldr	r3, [pc, #300]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <HAL_RCC_OscConfig+0x386>
 80049f4:	e014      	b.n	8004a20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fe f8bb 	bl	8002b70 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fe f8b7 	bl	8002b70 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0b8      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a4 	beq.w	8004b84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3c:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d06b      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d149      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fe f888 	bl	8002b70 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fe f884 	bl	8002b70 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e087      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe f858 	bl	8002b70 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fe f854 	bl	8002b70 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e057      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x478>
 8004ae2:	e04f      	b.n	8004b84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f83e 	bl	8002b70 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fe f83a 	bl	8002b70 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e03d      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_OscConfig+0x4cc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4ac>
 8004b16:	e035      	b.n	8004b84 <HAL_RCC_OscConfig+0x538>
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x544>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d121      	bne.n	8004b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0d0      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bac:	4b6a      	ldr	r3, [pc, #424]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d910      	bls.n	8004bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b67      	ldr	r3, [pc, #412]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 020f 	bic.w	r2, r3, #15
 8004bc2:	4965      	ldr	r1, [pc, #404]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b63      	ldr	r3, [pc, #396]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0b8      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf4:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a52      	ldr	r2, [pc, #328]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	494d      	ldr	r1, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d040      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d115      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e07f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e073      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06b      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c76:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 0203 	bic.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4936      	ldr	r1, [pc, #216]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c88:	f7fd ff72 	bl	8002b70 <HAL_GetTick>
 8004c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fd ff6e 	bl	8002b70 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e053      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 020c 	and.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d1eb      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d210      	bcs.n	8004ce8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 020f 	bic.w	r2, r3, #15
 8004cce:	4922      	ldr	r1, [pc, #136]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e032      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4916      	ldr	r1, [pc, #88]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d26:	f000 f821 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	490a      	ldr	r1, [pc, #40]	; (8004d60 <HAL_RCC_ClockConfig+0x1cc>)
 8004d38:	5ccb      	ldrb	r3, [r1, r3]
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <HAL_RCC_ClockConfig+0x1d0>)
 8004d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_ClockConfig+0x1d4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd fece 	bl	8002ae8 <HAL_InitTick>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023c00 	.word	0x40023c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	08009050 	.word	0x08009050
 8004d64:	20000250 	.word	0x20000250
 8004d68:	20000254 	.word	0x20000254

08004d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d70:	b094      	sub	sp, #80	; 0x50
 8004d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	2300      	movs	r3, #0
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d84:	4b79      	ldr	r3, [pc, #484]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d00d      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x40>
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	f200 80e1 	bhi.w	8004f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d9e:	e0db      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b73      	ldr	r3, [pc, #460]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004da4:	e0db      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da6:	4b72      	ldr	r3, [pc, #456]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004daa:	e0d8      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004db6:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d063      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	2200      	movs	r2, #0
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	0159      	lsls	r1, r3, #5
 8004dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df0:	0150      	lsls	r0, r2, #5
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4621      	mov	r1, r4
 8004df8:	1a51      	subs	r1, r2, r1
 8004dfa:	6139      	str	r1, [r7, #16]
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e10:	4659      	mov	r1, fp
 8004e12:	018b      	lsls	r3, r1, #6
 8004e14:	4651      	mov	r1, sl
 8004e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	018a      	lsls	r2, r1, #6
 8004e1e:	4651      	mov	r1, sl
 8004e20:	ebb2 0801 	subs.w	r8, r2, r1
 8004e24:	4659      	mov	r1, fp
 8004e26:	eb63 0901 	sbc.w	r9, r3, r1
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3e:	4690      	mov	r8, r2
 8004e40:	4699      	mov	r9, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	eb18 0303 	adds.w	r3, r8, r3
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	eb49 0303 	adc.w	r3, r9, r3
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	028b      	lsls	r3, r1, #10
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e68:	4621      	mov	r1, r4
 8004e6a:	028a      	lsls	r2, r1, #10
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e72:	2200      	movs	r2, #0
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e7c:	f7fb fa18 	bl	80002b0 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e88:	e058      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	2200      	movs	r2, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	4611      	mov	r1, r2
 8004e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	f04f 0000 	mov.w	r0, #0
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	0159      	lsls	r1, r3, #5
 8004eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb6:	0150      	lsls	r0, r2, #5
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004edc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	00eb      	lsls	r3, r5, #3
 8004eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef2:	00e2      	lsls	r2, r4, #3
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	4643      	mov	r3, r8
 8004efa:	18e3      	adds	r3, r4, r3
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	464b      	mov	r3, r9
 8004f00:	eb45 0303 	adc.w	r3, r5, r3
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f12:	4629      	mov	r1, r5
 8004f14:	028b      	lsls	r3, r1, #10
 8004f16:	4621      	mov	r1, r4
 8004f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	028a      	lsls	r2, r1, #10
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	2200      	movs	r2, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	61fa      	str	r2, [r7, #28]
 8004f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f30:	f7fb f9be 	bl	80002b0 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	3301      	adds	r3, #1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f56:	e002      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3750      	adds	r7, #80	; 0x50
 8004f64:	46bd      	mov	sp, r7
 8004f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	00f42400 	.word	0x00f42400

08004f74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000250 	.word	0x20000250

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f90:	f7ff fff0 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	0a9b      	lsrs	r3, r3, #10
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4903      	ldr	r1, [pc, #12]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	08009060 	.word	0x08009060

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb8:	f7ff ffdc 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0b5b      	lsrs	r3, r3, #13
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	08009060 	.word	0x08009060

08004fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005004:	4b69      	ldr	r3, [pc, #420]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	4a68      	ldr	r2, [pc, #416]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800500e:	6093      	str	r3, [r2, #8]
 8005010:	4b66      	ldr	r3, [pc, #408]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	4964      	ldr	r1, [pc, #400]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d017      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005036:	4b5d      	ldr	r3, [pc, #372]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	4959      	ldr	r1, [pc, #356]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005054:	d101      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005056:	2301      	movs	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d017      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005072:	4b4e      	ldr	r3, [pc, #312]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005078:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	494a      	ldr	r1, [pc, #296]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005090:	d101      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800509e:	2301      	movs	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80050ae:	2301      	movs	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 808b 	beq.w	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c0:	4b3a      	ldr	r3, [pc, #232]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	4a39      	ldr	r2, [pc, #228]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6413      	str	r3, [r2, #64]	; 0x40
 80050cc:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050d8:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e4:	f7fd fd44 	bl	8002b70 <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ec:	f7fd fd40 	bl	8002b70 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e357      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800510a:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005112:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d035      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	429a      	cmp	r2, r3
 8005126:	d02e      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005128:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005132:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d114      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd fd08 	bl	8002b70 <HAL_GetTick>
 8005160:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f7fd fd04 	bl	8002b70 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e319      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ee      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005192:	d111      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051a2:	400b      	ands	r3, r1
 80051a4:	4901      	ldr	r1, [pc, #4]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40007000 	.word	0x40007000
 80051b4:	0ffffcff 	.word	0x0ffffcff
 80051b8:	4baa      	ldr	r3, [pc, #680]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4aa9      	ldr	r2, [pc, #676]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051c2:	6093      	str	r3, [r2, #8]
 80051c4:	4ba7      	ldr	r3, [pc, #668]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	49a4      	ldr	r1, [pc, #656]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051e2:	4ba0      	ldr	r3, [pc, #640]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e8:	4a9e      	ldr	r2, [pc, #632]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051f2:	4b9c      	ldr	r3, [pc, #624]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	4999      	ldr	r1, [pc, #612]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005210:	4b94      	ldr	r3, [pc, #592]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800521e:	4991      	ldr	r1, [pc, #580]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005232:	4b8c      	ldr	r3, [pc, #560]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005240:	4988      	ldr	r1, [pc, #544]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005254:	4b83      	ldr	r3, [pc, #524]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005262:	4980      	ldr	r1, [pc, #512]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005276:	4b7b      	ldr	r3, [pc, #492]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	4977      	ldr	r1, [pc, #476]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005298:	4b72      	ldr	r3, [pc, #456]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	496f      	ldr	r1, [pc, #444]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f023 020c 	bic.w	r2, r3, #12
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c8:	4966      	ldr	r1, [pc, #408]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052dc:	4b61      	ldr	r3, [pc, #388]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	495e      	ldr	r1, [pc, #376]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052fe:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	4955      	ldr	r1, [pc, #340]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005320:	4b50      	ldr	r3, [pc, #320]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	494d      	ldr	r1, [pc, #308]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005342:	4b48      	ldr	r3, [pc, #288]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	4944      	ldr	r1, [pc, #272]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005364:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005372:	493c      	ldr	r1, [pc, #240]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005394:	4933      	ldr	r1, [pc, #204]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053a8:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b6:	492b      	ldr	r1, [pc, #172]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80053ca:	4b26      	ldr	r3, [pc, #152]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d8:	4922      	ldr	r1, [pc, #136]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e8:	d101      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540a:	4b16      	ldr	r3, [pc, #88]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	4912      	ldr	r1, [pc, #72]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800542c:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543c:	4909      	ldr	r1, [pc, #36]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d006      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80d9 	beq.w	800560a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a01      	ldr	r2, [pc, #4]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005464:	40023800 	.word	0x40023800
 8005468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546a:	f7fd fb81 	bl	8002b70 <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005472:	f7fd fb7d 	bl	8002b70 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b64      	cmp	r3, #100	; 0x64
 800547e:	d901      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e194      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005484:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d021      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11d      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054a4:	4b64      	ldr	r3, [pc, #400]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b8:	0e1b      	lsrs	r3, r3, #24
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	019a      	lsls	r2, r3, #6
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	071b      	lsls	r3, r3, #28
 80054d8:	4957      	ldr	r1, [pc, #348]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d02e      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550a:	d129      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800550c:	4b4a      	ldr	r3, [pc, #296]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005512:	0c1b      	lsrs	r3, r3, #16
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800551a:	4b47      	ldr	r3, [pc, #284]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005520:	0f1b      	lsrs	r3, r3, #28
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	019a      	lsls	r2, r3, #6
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	431a      	orrs	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	071b      	lsls	r3, r3, #28
 8005540:	493d      	ldr	r1, [pc, #244]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800554a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554e:	f023 021f 	bic.w	r2, r3, #31
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	3b01      	subs	r3, #1
 8005558:	4937      	ldr	r1, [pc, #220]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01d      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800556c:	4b32      	ldr	r3, [pc, #200]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800556e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005572:	0e1b      	lsrs	r3, r3, #24
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800557a:	4b2f      	ldr	r3, [pc, #188]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005580:	0f1b      	lsrs	r3, r3, #28
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	019a      	lsls	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	431a      	orrs	r2, r3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	061b      	lsls	r3, r3, #24
 800559a:	431a      	orrs	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	071b      	lsls	r3, r3, #28
 80055a0:	4925      	ldr	r1, [pc, #148]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d011      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	019a      	lsls	r2, r3, #6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	071b      	lsls	r3, r3, #28
 80055d0:	4919      	ldr	r1, [pc, #100]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fd fac4 	bl	8002b70 <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ec:	f7fd fac0 	bl	8002b70 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e0d7      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055fe:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b01      	cmp	r3, #1
 800560e:	f040 80cd 	bne.w	80057ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a08      	ldr	r2, [pc, #32]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561e:	f7fd faa7 	bl	8002b70 <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005626:	f7fd faa3 	bl	8002b70 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b64      	cmp	r3, #100	; 0x64
 8005632:	d903      	bls.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e0ba      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005638:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800563c:	4b5e      	ldr	r3, [pc, #376]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005648:	d0ed      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005666:	2b00      	cmp	r3, #0
 8005668:	d02e      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d12a      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005672:	4b51      	ldr	r3, [pc, #324]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005680:	4b4d      	ldr	r3, [pc, #308]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	0f1b      	lsrs	r3, r3, #28
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	019a      	lsls	r2, r3, #6
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	071b      	lsls	r3, r3, #28
 80056a6:	4944      	ldr	r1, [pc, #272]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056ae:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	3b01      	subs	r3, #1
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	493d      	ldr	r1, [pc, #244]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d022      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056dc:	d11d      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056de:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056ec:	4b32      	ldr	r3, [pc, #200]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	0f1b      	lsrs	r3, r3, #28
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	019a      	lsls	r2, r3, #6
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	431a      	orrs	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	061b      	lsls	r3, r3, #24
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	4929      	ldr	r1, [pc, #164]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d028      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005726:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005734:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	019a      	lsls	r2, r3, #6
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	041b      	lsls	r3, r3, #16
 800574c:	431a      	orrs	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	071b      	lsls	r3, r3, #28
 800575a:	4917      	ldr	r1, [pc, #92]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4911      	ldr	r1, [pc, #68]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800577e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005784:	f7fd f9f4 	bl	8002b70 <HAL_GetTick>
 8005788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800578a:	e008      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800578c:	f7fd f9f0 	bl	8002b70 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	; 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e007      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057aa:	d1ef      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800

080057bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e022      	b.n	8005814 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fc f971 	bl	8001ac8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f814 	bl	800581c <HAL_SD_InitCard>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e00a      	b.n	8005814 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af04      	add	r7, sp, #16
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005838:	2376      	movs	r3, #118	; 0x76
 800583a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681d      	ldr	r5, [r3, #0]
 8005840:	466c      	mov	r4, sp
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800584a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005854:	4628      	mov	r0, r5
 8005856:	f001 ff69 	bl	800772c <SDMMC_Init>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e059      	b.n	8005920 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800587a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f001 ff8c 	bl	800779e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005894:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005896:	2002      	movs	r0, #2
 8005898:	f7fd f976 	bl	8002b88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb51 	bl	8005f44 <SD_PowerON>
 80058a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e02e      	b.n	8005920 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa70 	bl	8005da8 <SD_InitCard>
 80058c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00b      	beq.n	80058e8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e01b      	b.n	8005920 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 ffe7 	bl	80078c4 <SDMMC_CmdBlockLength>
 80058f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00f      	beq.n	800591e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <HAL_SD_InitCard+0x10c>)
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3728      	adds	r7, #40	; 0x28
 8005924:	46bd      	mov	sp, r7
 8005926:	bdb0      	pop	{r4, r5, r7, pc}
 8005928:	004005ff 	.word	0x004005ff

0800592c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800593a:	0f9b      	lsrs	r3, r3, #30
 800593c:	b2da      	uxtb	r2, r3
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005946:	0e9b      	lsrs	r3, r3, #26
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	b2da      	uxtb	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005958:	0e1b      	lsrs	r3, r3, #24
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	b2da      	uxtb	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	b2da      	uxtb	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	b2da      	uxtb	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005982:	b2da      	uxtb	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800598c:	0d1b      	lsrs	r3, r3, #20
 800598e:	b29a      	uxth	r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059aa:	0bdb      	lsrs	r3, r3, #15
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059bc:	0b9b      	lsrs	r3, r3, #14
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ce:	0b5b      	lsrs	r3, r3, #13
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e0:	0b1b      	lsrs	r3, r3, #12
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d163      	bne.n	8005ac4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a00:	009a      	lsls	r2, r3, #2
 8005a02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a06:	4013      	ands	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005a0c:	0f92      	lsrs	r2, r2, #30
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a18:	0edb      	lsrs	r3, r3, #27
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2a:	0e1b      	lsrs	r3, r3, #24
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3c:	0d5b      	lsrs	r3, r3, #21
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a4e:	0c9b      	lsrs	r3, r3, #18
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a60:	0bdb      	lsrs	r3, r3, #15
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	7e1b      	ldrb	r3, [r3, #24]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	3302      	adds	r3, #2
 8005a84:	2201      	movs	r2, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005a8e:	fb03 f202 	mul.w	r2, r3, r2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	7a1b      	ldrb	r3, [r3, #8]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005ab0:	0a52      	lsrs	r2, r2, #9
 8005ab2:	fb03 f202 	mul.w	r2, r3, r2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ac2:	e031      	b.n	8005b28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d11d      	bne.n	8005b08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	431a      	orrs	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	029a      	lsls	r2, r3, #10
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	661a      	str	r2, [r3, #96]	; 0x60
 8005b06:	e00f      	b.n	8005b28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a58      	ldr	r2, [pc, #352]	; (8005c70 <HAL_SD_GetCardCSD+0x344>)
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e09d      	b.n	8005c64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2c:	0b9b      	lsrs	r3, r3, #14
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b60:	0fdb      	lsrs	r3, r3, #31
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6c:	0f5b      	lsrs	r3, r3, #29
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	0e9b      	lsrs	r3, r3, #26
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	0d9b      	lsrs	r3, r3, #22
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	0d5b      	lsrs	r3, r3, #21
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	0bdb      	lsrs	r3, r3, #15
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	0b9b      	lsrs	r3, r3, #14
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	0b5b      	lsrs	r3, r3, #13
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	0b1b      	lsrs	r3, r3, #12
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	0a9b      	lsrs	r3, r3, #10
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	004005ff 	.word	0x004005ff

08005c74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005c74:	b5b0      	push	{r4, r5, r7, lr}
 8005c76:	b08e      	sub	sp, #56	; 0x38
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2203      	movs	r2, #3
 8005c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d02e      	beq.n	8005cf2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9a:	d106      	bne.n	8005caa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca8:	e029      	b.n	8005cfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cb0:	d10a      	bne.n	8005cc8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9d4 	bl	8006060 <SD_WideBus_Enable>
 8005cb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8005cc6:	e01a      	b.n	8005cfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa11 	bl	80060f6 <SD_WideBus_Disable>
 8005cd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ce2:	e00c      	b.n	8005cfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
 8005cf0:	e005      	b.n	8005cfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a26      	ldr	r2, [pc, #152]	; (8005da4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d1c:	e01f      	b.n	8005d5e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681d      	ldr	r5, [r3, #0]
 8005d44:	466c      	mov	r4, sp
 8005d46:	f107 0314 	add.w	r3, r7, #20
 8005d4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f001 fce7 	bl	800772c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fdac 	bl	80078c4 <SDMMC_CmdBlockLength>
 8005d6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3728      	adds	r7, #40	; 0x28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bdb0      	pop	{r4, r5, r7, pc}
 8005da2:	bf00      	nop
 8005da4:	004005ff 	.word	0x004005ff

08005da8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005da8:	b5b0      	push	{r4, r5, r7, lr}
 8005daa:	b094      	sub	sp, #80	; 0x50
 8005dac:	af04      	add	r7, sp, #16
 8005dae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005db0:	2301      	movs	r3, #1
 8005db2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fcfe 	bl	80077ba <SDMMC_GetPowerState>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005dc8:	e0b8      	b.n	8005f3c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d02f      	beq.n	8005e32 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 fe7f 	bl	8007ada <SDMMC_CmdSendCID>
 8005ddc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <SD_InitCard+0x40>
    {
      return errorstate;
 8005de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de6:	e0a9      	b.n	8005f3c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fd29 	bl	8007846 <SDMMC_GetResponse>
 8005df4:	4602      	mov	r2, r0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2104      	movs	r1, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fd20 	bl	8007846 <SDMMC_GetResponse>
 8005e06:	4602      	mov	r2, r0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2108      	movs	r1, #8
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fd17 	bl	8007846 <SDMMC_GetResponse>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	210c      	movs	r1, #12
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fd0e 	bl	8007846 <SDMMC_GetResponse>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d00d      	beq.n	8005e56 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f107 020e 	add.w	r2, r7, #14
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fe85 	bl	8007b54 <SDMMC_CmdSetRelAdd>
 8005e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <SD_InitCard+0xae>
    {
      return errorstate;
 8005e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e54:	e072      	b.n	8005f3c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d036      	beq.n	8005ecc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005e5e:	89fb      	ldrh	r3, [r7, #14]
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f001 fe4f 	bl	8007b16 <SDMMC_CmdSendCSD>
 8005e78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	e05b      	b.n	8005f3c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 fcdb 	bl	8007846 <SDMMC_GetResponse>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2104      	movs	r1, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fcd2 	bl	8007846 <SDMMC_GetResponse>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2108      	movs	r1, #8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fcc9 	bl	8007846 <SDMMC_GetResponse>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	210c      	movs	r1, #12
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fcc0 	bl	8007846 <SDMMC_GetResponse>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fcb7 	bl	8007846 <SDMMC_GetResponse>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	0d1a      	lsrs	r2, r3, #20
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fd20 	bl	800592c <HAL_SD_GetCardCSD>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ef6:	e021      	b.n	8005f3c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	2200      	movs	r2, #0
 8005f04:	461c      	mov	r4, r3
 8005f06:	4615      	mov	r5, r2
 8005f08:	4622      	mov	r2, r4
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	f001 fcfb 	bl	8007908 <SDMMC_CmdSelDesel>
 8005f12:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <SD_InitCard+0x176>
  {
    return errorstate;
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	e00e      	b.n	8005f3c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681d      	ldr	r5, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	466c      	mov	r4, sp
 8005f26:	f103 0210 	add.w	r2, r3, #16
 8005f2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f30:	3304      	adds	r3, #4
 8005f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f34:	4628      	mov	r0, r5
 8005f36:	f001 fbf9 	bl	800772c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3740      	adds	r7, #64	; 0x40
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bdb0      	pop	{r4, r5, r7, pc}

08005f44 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fcf6 	bl	800794e <SDMMC_CmdGoIdleState>
 8005f62:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <SD_PowerON+0x2a>
  {
    return errorstate;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	e072      	b.n	8006054 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fd09 	bl	800798a <SDMMC_CmdOperCond>
 8005f78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00d      	beq.n	8005f9c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fcdf 	bl	800794e <SDMMC_CmdGoIdleState>
 8005f90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	e05b      	b.n	8006054 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d137      	bne.n	800601a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 fd09 	bl	80079c8 <SDMMC_CmdAppCommand>
 8005fb6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02d      	beq.n	800601a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005fc2:	e047      	b.n	8006054 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fcfc 	bl	80079c8 <SDMMC_CmdAppCommand>
 8005fd0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <SD_PowerON+0x98>
    {
      return errorstate;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	e03b      	b.n	8006054 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	491e      	ldr	r1, [pc, #120]	; (800605c <SD_PowerON+0x118>)
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fd12 	bl	8007a0c <SDMMC_CmdAppOperCommand>
 8005fe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ff0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ff4:	e02e      	b.n	8006054 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fc22 	bl	8007846 <SDMMC_GetResponse>
 8006002:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	0fdb      	lsrs	r3, r3, #31
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <SD_PowerON+0xcc>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <SD_PowerON+0xce>
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

    count++;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	3301      	adds	r3, #1
 8006018:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006020:	4293      	cmp	r3, r2
 8006022:	d802      	bhi.n	800602a <SD_PowerON+0xe6>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0cc      	beq.n	8005fc4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006030:	4293      	cmp	r3, r2
 8006032:	d902      	bls.n	800603a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006038:	e00c      	b.n	8006054 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
 800604a:	e002      	b.n	8006052 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	c1100000 	.word	0xc1100000

08006060 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	2300      	movs	r3, #0
 800606e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fbe5 	bl	8007846 <SDMMC_GetResponse>
 800607c:	4603      	mov	r3, r0
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006086:	d102      	bne.n	800608e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800608c:	e02f      	b.n	80060ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800608e:	f107 030c 	add.w	r3, r7, #12
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f879 	bl	800618c <SD_FindSCR>
 800609a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	e023      	b.n	80060ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01c      	beq.n	80060ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f001 fc83 	bl	80079c8 <SDMMC_CmdAppCommand>
 80060c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	e00f      	b.n	80060ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2102      	movs	r1, #2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 fcbd 	bl	8007a54 <SDMMC_CmdBusWidth>
 80060da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	e003      	b.n	80060ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e001      	b.n	80060ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f001 fb9a 	bl	8007846 <SDMMC_GetResponse>
 8006112:	4603      	mov	r3, r0
 8006114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800611c:	d102      	bne.n	8006124 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800611e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006122:	e02f      	b.n	8006184 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f82e 	bl	800618c <SD_FindSCR>
 8006130:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	e023      	b.n	8006184 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01c      	beq.n	8006180 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f001 fc38 	bl	80079c8 <SDMMC_CmdAppCommand>
 8006158:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	e00f      	b.n	8006184 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fc72 	bl	8007a54 <SDMMC_CmdBusWidth>
 8006170:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	e003      	b.n	8006184 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800617c:	2300      	movs	r3, #0
 800617e:	e001      	b.n	8006184 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006180:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b08f      	sub	sp, #60	; 0x3c
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006196:	f7fc fceb 	bl	8002b70 <HAL_GetTick>
 800619a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80061a0:	2300      	movs	r3, #0
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2108      	movs	r1, #8
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fb86 	bl	80078c4 <SDMMC_CmdBlockLength>
 80061b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	e0b2      	b.n	800632a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f001 fbf9 	bl	80079c8 <SDMMC_CmdAppCommand>
 80061d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	e0a3      	b.n	800632a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80061e8:	2308      	movs	r3, #8
 80061ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80061ec:	2330      	movs	r3, #48	; 0x30
 80061ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80061f0:	2302      	movs	r3, #2
 80061f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f107 0210 	add.w	r2, r7, #16
 8006204:	4611      	mov	r1, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fb30 	bl	800786c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f001 fc41 	bl	8007a98 <SDMMC_CmdSendSCR>
 8006216:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02a      	beq.n	8006274 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	e083      	b.n	800632a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00f      	beq.n	8006250 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	f107 0208 	add.w	r2, r7, #8
 800623c:	18d4      	adds	r4, r2, r3
 800623e:	4608      	mov	r0, r1
 8006240:	f001 faa0 	bl	8007784 <SDMMC_ReadFIFO>
 8006244:	4603      	mov	r3, r0
 8006246:	6023      	str	r3, [r4, #0]
      index++;
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	3301      	adds	r3, #1
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
 800624e:	e006      	b.n	800625e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d012      	beq.n	8006284 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800625e:	f7fc fc87 	bl	8002b70 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d102      	bne.n	8006274 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800626e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006272:	e05a      	b.n	800632a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0cf      	beq.n	8006222 <SD_FindSCR+0x96>
 8006282:	e000      	b.n	8006286 <SD_FindSCR+0xfa>
      break;
 8006284:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2208      	movs	r2, #8
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800629c:	2308      	movs	r3, #8
 800629e:	e044      	b.n	800632a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2202      	movs	r2, #2
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80062b6:	2302      	movs	r3, #2
 80062b8:	e037      	b.n	800632a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2220      	movs	r2, #32
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80062d0:	2320      	movs	r3, #32
 80062d2:	e02a      	b.n	800632a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	061a      	lsls	r2, r3, #24
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0e1b      	lsrs	r3, r3, #24
 80062fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	601a      	str	r2, [r3, #0]
    scr++;
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	3304      	adds	r3, #4
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	061a      	lsls	r2, r3, #24
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006312:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800631c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	0e1b      	lsrs	r3, r3, #24
 8006322:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	373c      	adds	r7, #60	; 0x3c
 800632e:	46bd      	mov	sp, r7
 8006330:	bd90      	pop	{r4, r7, pc}

08006332 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e038      	b.n	80063ba <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7fb fe11 	bl	8001f84 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3308      	adds	r3, #8
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f001 f8c5 	bl	80074fc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	461a      	mov	r2, r3
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	f001 f94d 	bl	800761c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6858      	ldr	r0, [r3, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	f001 f994 	bl	80076bc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	6892      	ldr	r2, [r2, #8]
 800639c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	6892      	ldr	r2, [r2, #8]
 80063a8:	f041 0101 	orr.w	r1, r1, #1
 80063ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e049      	b.n	8006468 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fb fbf3 	bl	8001bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2202      	movs	r2, #2
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f000 f9c9 	bl	8006798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0202 	mvn.w	r2, #2
 800649c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f951 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f943 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f954 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0204 	mvn.w	r2, #4
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f927 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f919 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f92a 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b08      	cmp	r3, #8
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0208 	mvn.w	r2, #8
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2204      	movs	r2, #4
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f8fd 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f8ef 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f900 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b10      	cmp	r3, #16
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0210 	mvn.w	r2, #16
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2208      	movs	r2, #8
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f8d3 	bl	800675a <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8c5 	bl	8006746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8d6 	bl	800676e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0201 	mvn.w	r2, #1
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f89f 	bl	8006732 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fb08 	bl	8006c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d10e      	bne.n	800664e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d107      	bne.n	800664e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fafb 	bl	8006c44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d10e      	bne.n	800667a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d107      	bne.n	800667a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f884 	bl	8006782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d10e      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b20      	cmp	r3, #32
 8006694:	d107      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f06f 0220 	mvn.w	r2, #32
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fabb 	bl	8006c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e031      	b.n	800672a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8fd 	bl	80068d8 <TIM_SlaveTimer_SetConfig>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d009      	beq.n	80066f8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e018      	b.n	800672a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006706:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006716:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a40      	ldr	r2, [pc, #256]	; (80068ac <TIM_Base_SetConfig+0x114>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d013      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b6:	d00f      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3d      	ldr	r2, [pc, #244]	; (80068b0 <TIM_Base_SetConfig+0x118>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00b      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3c      	ldr	r2, [pc, #240]	; (80068b4 <TIM_Base_SetConfig+0x11c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <TIM_Base_SetConfig+0x120>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3a      	ldr	r2, [pc, #232]	; (80068bc <TIM_Base_SetConfig+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d108      	bne.n	80067ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <TIM_Base_SetConfig+0x114>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d02b      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d027      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <TIM_Base_SetConfig+0x118>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d023      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <TIM_Base_SetConfig+0x11c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01f      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2a      	ldr	r2, [pc, #168]	; (80068b8 <TIM_Base_SetConfig+0x120>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01b      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a29      	ldr	r2, [pc, #164]	; (80068bc <TIM_Base_SetConfig+0x124>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d017      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a28      	ldr	r2, [pc, #160]	; (80068c0 <TIM_Base_SetConfig+0x128>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <TIM_Base_SetConfig+0x12c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00f      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <TIM_Base_SetConfig+0x130>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00b      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a25      	ldr	r2, [pc, #148]	; (80068cc <TIM_Base_SetConfig+0x134>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <TIM_Base_SetConfig+0x138>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <TIM_Base_SetConfig+0x13c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d108      	bne.n	800685c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <TIM_Base_SetConfig+0x114>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0xf8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0c      	ldr	r2, [pc, #48]	; (80068bc <TIM_Base_SetConfig+0x124>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	615a      	str	r2, [r3, #20]
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800
 80068cc:	40001800 	.word	0x40001800
 80068d0:	40001c00 	.word	0x40001c00
 80068d4:	40002000 	.word	0x40002000

080068d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4b3e      	ldr	r3, [pc, #248]	; (80069fc <TIM_SlaveTimer_SetConfig+0x124>)
 8006904:	4013      	ands	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b70      	cmp	r3, #112	; 0x70
 8006920:	d01a      	beq.n	8006958 <TIM_SlaveTimer_SetConfig+0x80>
 8006922:	2b70      	cmp	r3, #112	; 0x70
 8006924:	d860      	bhi.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006926:	2b60      	cmp	r3, #96	; 0x60
 8006928:	d054      	beq.n	80069d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800692a:	2b60      	cmp	r3, #96	; 0x60
 800692c:	d85c      	bhi.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
 800692e:	2b50      	cmp	r3, #80	; 0x50
 8006930:	d046      	beq.n	80069c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006932:	2b50      	cmp	r3, #80	; 0x50
 8006934:	d858      	bhi.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d019      	beq.n	800696e <TIM_SlaveTimer_SetConfig+0x96>
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d854      	bhi.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
 800693e:	2b30      	cmp	r3, #48	; 0x30
 8006940:	d055      	beq.n	80069ee <TIM_SlaveTimer_SetConfig+0x116>
 8006942:	2b30      	cmp	r3, #48	; 0x30
 8006944:	d850      	bhi.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d051      	beq.n	80069ee <TIM_SlaveTimer_SetConfig+0x116>
 800694a:	2b20      	cmp	r3, #32
 800694c:	d84c      	bhi.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04d      	beq.n	80069ee <TIM_SlaveTimer_SetConfig+0x116>
 8006952:	2b10      	cmp	r3, #16
 8006954:	d04b      	beq.n	80069ee <TIM_SlaveTimer_SetConfig+0x116>
 8006956:	e047      	b.n	80069e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006968:	f000 f8a9 	bl	8006abe <TIM_ETR_SetConfig>
      break;
 800696c:	e040      	b.n	80069f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b05      	cmp	r3, #5
 8006974:	d101      	bne.n	800697a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e03b      	b.n	80069f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a1a      	ldr	r2, [r3, #32]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
      break;
 80069be:	e017      	b.n	80069f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069cc:	461a      	mov	r2, r3
 80069ce:	f000 f817 	bl	8006a00 <TIM_TI1_ConfigInputStage>
      break;
 80069d2:	e00d      	b.n	80069f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e0:	461a      	mov	r2, r3
 80069e2:	f000 f83c 	bl	8006a5e <TIM_TI2_ConfigInputStage>
      break;
 80069e6:	e003      	b.n	80069f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	75fb      	strb	r3, [r7, #23]
      break;
 80069ec:	e000      	b.n	80069f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80069ee:	bf00      	nop
  }

  return status;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	fffefff8 	.word	0xfffefff8

08006a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f023 0201 	bic.w	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 030a 	bic.w	r3, r3, #10
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b087      	sub	sp, #28
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f023 0210 	bic.w	r2, r3, #16
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	031b      	lsls	r3, r3, #12
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b087      	sub	sp, #28
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
 8006aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	021a      	lsls	r2, r3, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	609a      	str	r2, [r3, #8]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e06d      	b.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a30      	ldr	r2, [pc, #192]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d108      	bne.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a20      	ldr	r2, [pc, #128]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d022      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8a:	d01d      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d018      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d013      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d009      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d10c      	bne.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40010400 	.word	0x40010400
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800

08006c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e040      	b.n	8006cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb f83a 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2224      	movs	r2, #36	; 0x24
 8006c84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 0201 	bic.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f82c 	bl	8006cf4 <UART_SetConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e022      	b.n	8006cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa84 	bl	80071bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb0b 	bl	8007300 <UART_CheckIdleState>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4ba6      	ldr	r3, [pc, #664]	; (8006fb8 <UART_SetConfig+0x2c4>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	6979      	ldr	r1, [r7, #20]
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a94      	ldr	r2, [pc, #592]	; (8006fbc <UART_SetConfig+0x2c8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d120      	bne.n	8006db2 <UART_SetConfig+0xbe>
 8006d70:	4b93      	ldr	r3, [pc, #588]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d816      	bhi.n	8006dac <UART_SetConfig+0xb8>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x90>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d95 	.word	0x08006d95
 8006d88:	08006da1 	.word	0x08006da1
 8006d8c:	08006d9b 	.word	0x08006d9b
 8006d90:	08006da7 	.word	0x08006da7
 8006d94:	2301      	movs	r3, #1
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e150      	b.n	800703c <UART_SetConfig+0x348>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e14d      	b.n	800703c <UART_SetConfig+0x348>
 8006da0:	2304      	movs	r3, #4
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e14a      	b.n	800703c <UART_SetConfig+0x348>
 8006da6:	2308      	movs	r3, #8
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e147      	b.n	800703c <UART_SetConfig+0x348>
 8006dac:	2310      	movs	r3, #16
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	e144      	b.n	800703c <UART_SetConfig+0x348>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a83      	ldr	r2, [pc, #524]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d132      	bne.n	8006e22 <UART_SetConfig+0x12e>
 8006dbc:	4b80      	ldr	r3, [pc, #512]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc2:	f003 030c 	and.w	r3, r3, #12
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d828      	bhi.n	8006e1c <UART_SetConfig+0x128>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <UART_SetConfig+0xdc>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006e1d 	.word	0x08006e1d
 8006dd8:	08006e1d 	.word	0x08006e1d
 8006ddc:	08006e1d 	.word	0x08006e1d
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006e1d 	.word	0x08006e1d
 8006de8:	08006e1d 	.word	0x08006e1d
 8006dec:	08006e1d 	.word	0x08006e1d
 8006df0:	08006e0b 	.word	0x08006e0b
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e1d 	.word	0x08006e1d
 8006e00:	08006e17 	.word	0x08006e17
 8006e04:	2300      	movs	r3, #0
 8006e06:	77fb      	strb	r3, [r7, #31]
 8006e08:	e118      	b.n	800703c <UART_SetConfig+0x348>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	77fb      	strb	r3, [r7, #31]
 8006e0e:	e115      	b.n	800703c <UART_SetConfig+0x348>
 8006e10:	2304      	movs	r3, #4
 8006e12:	77fb      	strb	r3, [r7, #31]
 8006e14:	e112      	b.n	800703c <UART_SetConfig+0x348>
 8006e16:	2308      	movs	r3, #8
 8006e18:	77fb      	strb	r3, [r7, #31]
 8006e1a:	e10f      	b.n	800703c <UART_SetConfig+0x348>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e10c      	b.n	800703c <UART_SetConfig+0x348>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a68      	ldr	r2, [pc, #416]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d120      	bne.n	8006e6e <UART_SetConfig+0x17a>
 8006e2c:	4b64      	ldr	r3, [pc, #400]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e36:	2b30      	cmp	r3, #48	; 0x30
 8006e38:	d013      	beq.n	8006e62 <UART_SetConfig+0x16e>
 8006e3a:	2b30      	cmp	r3, #48	; 0x30
 8006e3c:	d814      	bhi.n	8006e68 <UART_SetConfig+0x174>
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d009      	beq.n	8006e56 <UART_SetConfig+0x162>
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d810      	bhi.n	8006e68 <UART_SetConfig+0x174>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <UART_SetConfig+0x15c>
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d006      	beq.n	8006e5c <UART_SetConfig+0x168>
 8006e4e:	e00b      	b.n	8006e68 <UART_SetConfig+0x174>
 8006e50:	2300      	movs	r3, #0
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e0f2      	b.n	800703c <UART_SetConfig+0x348>
 8006e56:	2302      	movs	r3, #2
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e0ef      	b.n	800703c <UART_SetConfig+0x348>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e0ec      	b.n	800703c <UART_SetConfig+0x348>
 8006e62:	2308      	movs	r3, #8
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e0e9      	b.n	800703c <UART_SetConfig+0x348>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e0e6      	b.n	800703c <UART_SetConfig+0x348>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a56      	ldr	r2, [pc, #344]	; (8006fcc <UART_SetConfig+0x2d8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d120      	bne.n	8006eba <UART_SetConfig+0x1c6>
 8006e78:	4b51      	ldr	r3, [pc, #324]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e82:	2bc0      	cmp	r3, #192	; 0xc0
 8006e84:	d013      	beq.n	8006eae <UART_SetConfig+0x1ba>
 8006e86:	2bc0      	cmp	r3, #192	; 0xc0
 8006e88:	d814      	bhi.n	8006eb4 <UART_SetConfig+0x1c0>
 8006e8a:	2b80      	cmp	r3, #128	; 0x80
 8006e8c:	d009      	beq.n	8006ea2 <UART_SetConfig+0x1ae>
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	d810      	bhi.n	8006eb4 <UART_SetConfig+0x1c0>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <UART_SetConfig+0x1a8>
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d006      	beq.n	8006ea8 <UART_SetConfig+0x1b4>
 8006e9a:	e00b      	b.n	8006eb4 <UART_SetConfig+0x1c0>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e0cc      	b.n	800703c <UART_SetConfig+0x348>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e0c9      	b.n	800703c <UART_SetConfig+0x348>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e0c6      	b.n	800703c <UART_SetConfig+0x348>
 8006eae:	2308      	movs	r3, #8
 8006eb0:	77fb      	strb	r3, [r7, #31]
 8006eb2:	e0c3      	b.n	800703c <UART_SetConfig+0x348>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e0c0      	b.n	800703c <UART_SetConfig+0x348>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a44      	ldr	r2, [pc, #272]	; (8006fd0 <UART_SetConfig+0x2dc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d125      	bne.n	8006f10 <UART_SetConfig+0x21c>
 8006ec4:	4b3e      	ldr	r3, [pc, #248]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed2:	d017      	beq.n	8006f04 <UART_SetConfig+0x210>
 8006ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed8:	d817      	bhi.n	8006f0a <UART_SetConfig+0x216>
 8006eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ede:	d00b      	beq.n	8006ef8 <UART_SetConfig+0x204>
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee4:	d811      	bhi.n	8006f0a <UART_SetConfig+0x216>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <UART_SetConfig+0x1fe>
 8006eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eee:	d006      	beq.n	8006efe <UART_SetConfig+0x20a>
 8006ef0:	e00b      	b.n	8006f0a <UART_SetConfig+0x216>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e0a1      	b.n	800703c <UART_SetConfig+0x348>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e09e      	b.n	800703c <UART_SetConfig+0x348>
 8006efe:	2304      	movs	r3, #4
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e09b      	b.n	800703c <UART_SetConfig+0x348>
 8006f04:	2308      	movs	r3, #8
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e098      	b.n	800703c <UART_SetConfig+0x348>
 8006f0a:	2310      	movs	r3, #16
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e095      	b.n	800703c <UART_SetConfig+0x348>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <UART_SetConfig+0x2e0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d125      	bne.n	8006f66 <UART_SetConfig+0x272>
 8006f1a:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f28:	d017      	beq.n	8006f5a <UART_SetConfig+0x266>
 8006f2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f2e:	d817      	bhi.n	8006f60 <UART_SetConfig+0x26c>
 8006f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f34:	d00b      	beq.n	8006f4e <UART_SetConfig+0x25a>
 8006f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3a:	d811      	bhi.n	8006f60 <UART_SetConfig+0x26c>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <UART_SetConfig+0x254>
 8006f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f44:	d006      	beq.n	8006f54 <UART_SetConfig+0x260>
 8006f46:	e00b      	b.n	8006f60 <UART_SetConfig+0x26c>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e076      	b.n	800703c <UART_SetConfig+0x348>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e073      	b.n	800703c <UART_SetConfig+0x348>
 8006f54:	2304      	movs	r3, #4
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e070      	b.n	800703c <UART_SetConfig+0x348>
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e06d      	b.n	800703c <UART_SetConfig+0x348>
 8006f60:	2310      	movs	r3, #16
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e06a      	b.n	800703c <UART_SetConfig+0x348>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <UART_SetConfig+0x2e4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d138      	bne.n	8006fe2 <UART_SetConfig+0x2ee>
 8006f70:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f7e:	d017      	beq.n	8006fb0 <UART_SetConfig+0x2bc>
 8006f80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f84:	d82a      	bhi.n	8006fdc <UART_SetConfig+0x2e8>
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d00b      	beq.n	8006fa4 <UART_SetConfig+0x2b0>
 8006f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f90:	d824      	bhi.n	8006fdc <UART_SetConfig+0x2e8>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <UART_SetConfig+0x2aa>
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9a:	d006      	beq.n	8006faa <UART_SetConfig+0x2b6>
 8006f9c:	e01e      	b.n	8006fdc <UART_SetConfig+0x2e8>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e04b      	b.n	800703c <UART_SetConfig+0x348>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e048      	b.n	800703c <UART_SetConfig+0x348>
 8006faa:	2304      	movs	r3, #4
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e045      	b.n	800703c <UART_SetConfig+0x348>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e042      	b.n	800703c <UART_SetConfig+0x348>
 8006fb6:	bf00      	nop
 8006fb8:	efff69f3 	.word	0xefff69f3
 8006fbc:	40011000 	.word	0x40011000
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	40004400 	.word	0x40004400
 8006fc8:	40004800 	.word	0x40004800
 8006fcc:	40004c00 	.word	0x40004c00
 8006fd0:	40005000 	.word	0x40005000
 8006fd4:	40011400 	.word	0x40011400
 8006fd8:	40007800 	.word	0x40007800
 8006fdc:	2310      	movs	r3, #16
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e02c      	b.n	800703c <UART_SetConfig+0x348>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a72      	ldr	r2, [pc, #456]	; (80071b0 <UART_SetConfig+0x4bc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d125      	bne.n	8007038 <UART_SetConfig+0x344>
 8006fec:	4b71      	ldr	r3, [pc, #452]	; (80071b4 <UART_SetConfig+0x4c0>)
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ff6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ffa:	d017      	beq.n	800702c <UART_SetConfig+0x338>
 8006ffc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007000:	d817      	bhi.n	8007032 <UART_SetConfig+0x33e>
 8007002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007006:	d00b      	beq.n	8007020 <UART_SetConfig+0x32c>
 8007008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800700c:	d811      	bhi.n	8007032 <UART_SetConfig+0x33e>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <UART_SetConfig+0x326>
 8007012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007016:	d006      	beq.n	8007026 <UART_SetConfig+0x332>
 8007018:	e00b      	b.n	8007032 <UART_SetConfig+0x33e>
 800701a:	2300      	movs	r3, #0
 800701c:	77fb      	strb	r3, [r7, #31]
 800701e:	e00d      	b.n	800703c <UART_SetConfig+0x348>
 8007020:	2302      	movs	r3, #2
 8007022:	77fb      	strb	r3, [r7, #31]
 8007024:	e00a      	b.n	800703c <UART_SetConfig+0x348>
 8007026:	2304      	movs	r3, #4
 8007028:	77fb      	strb	r3, [r7, #31]
 800702a:	e007      	b.n	800703c <UART_SetConfig+0x348>
 800702c:	2308      	movs	r3, #8
 800702e:	77fb      	strb	r3, [r7, #31]
 8007030:	e004      	b.n	800703c <UART_SetConfig+0x348>
 8007032:	2310      	movs	r3, #16
 8007034:	77fb      	strb	r3, [r7, #31]
 8007036:	e001      	b.n	800703c <UART_SetConfig+0x348>
 8007038:	2310      	movs	r3, #16
 800703a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007044:	d15b      	bne.n	80070fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007046:	7ffb      	ldrb	r3, [r7, #31]
 8007048:	2b08      	cmp	r3, #8
 800704a:	d828      	bhi.n	800709e <UART_SetConfig+0x3aa>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0x360>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007079 	.word	0x08007079
 8007058:	08007081 	.word	0x08007081
 800705c:	08007089 	.word	0x08007089
 8007060:	0800709f 	.word	0x0800709f
 8007064:	0800708f 	.word	0x0800708f
 8007068:	0800709f 	.word	0x0800709f
 800706c:	0800709f 	.word	0x0800709f
 8007070:	0800709f 	.word	0x0800709f
 8007074:	08007097 	.word	0x08007097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fd ff88 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 800707c:	61b8      	str	r0, [r7, #24]
        break;
 800707e:	e013      	b.n	80070a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fd ff98 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8007084:	61b8      	str	r0, [r7, #24]
        break;
 8007086:	e00f      	b.n	80070a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007088:	4b4b      	ldr	r3, [pc, #300]	; (80071b8 <UART_SetConfig+0x4c4>)
 800708a:	61bb      	str	r3, [r7, #24]
        break;
 800708c:	e00c      	b.n	80070a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708e:	f7fd fe6d 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8007092:	61b8      	str	r0, [r7, #24]
        break;
 8007094:	e008      	b.n	80070a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709a:	61bb      	str	r3, [r7, #24]
        break;
 800709c:	e004      	b.n	80070a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	77bb      	strb	r3, [r7, #30]
        break;
 80070a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d074      	beq.n	8007198 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	005a      	lsls	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2b0f      	cmp	r3, #15
 80070c8:	d916      	bls.n	80070f8 <UART_SetConfig+0x404>
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d0:	d212      	bcs.n	80070f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f023 030f 	bic.w	r3, r3, #15
 80070da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	89fb      	ldrh	r3, [r7, #14]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	89fa      	ldrh	r2, [r7, #14]
 80070f4:	60da      	str	r2, [r3, #12]
 80070f6:	e04f      	b.n	8007198 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	77bb      	strb	r3, [r7, #30]
 80070fc:	e04c      	b.n	8007198 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070fe:	7ffb      	ldrb	r3, [r7, #31]
 8007100:	2b08      	cmp	r3, #8
 8007102:	d828      	bhi.n	8007156 <UART_SetConfig+0x462>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x418>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	08007157 	.word	0x08007157
 800711c:	08007147 	.word	0x08007147
 8007120:	08007157 	.word	0x08007157
 8007124:	08007157 	.word	0x08007157
 8007128:	08007157 	.word	0x08007157
 800712c:	0800714f 	.word	0x0800714f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fd ff2c 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8007134:	61b8      	str	r0, [r7, #24]
        break;
 8007136:	e013      	b.n	8007160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007138:	f7fd ff3c 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 800713c:	61b8      	str	r0, [r7, #24]
        break;
 800713e:	e00f      	b.n	8007160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007140:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <UART_SetConfig+0x4c4>)
 8007142:	61bb      	str	r3, [r7, #24]
        break;
 8007144:	e00c      	b.n	8007160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007146:	f7fd fe11 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 800714a:	61b8      	str	r0, [r7, #24]
        break;
 800714c:	e008      	b.n	8007160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800714e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007152:	61bb      	str	r3, [r7, #24]
        break;
 8007154:	e004      	b.n	8007160 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	77bb      	strb	r3, [r7, #30]
        break;
 800715e:	bf00      	nop
    }

    if (pclk != 0U)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d018      	beq.n	8007198 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	085a      	lsrs	r2, r3, #1
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	441a      	add	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	fbb2 f3f3 	udiv	r3, r2, r3
 8007178:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b0f      	cmp	r3, #15
 800717e:	d909      	bls.n	8007194 <UART_SetConfig+0x4a0>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007186:	d205      	bcs.n	8007194 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60da      	str	r2, [r3, #12]
 8007192:	e001      	b.n	8007198 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80071a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40007c00 	.word	0x40007c00
 80071b4:	40023800 	.word	0x40023800
 80071b8:	00f42400 	.word	0x00f42400

080071bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01a      	beq.n	80072d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ba:	d10a      	bne.n	80072d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	605a      	str	r2, [r3, #4]
  }
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af02      	add	r7, sp, #8
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007310:	f7fb fc2e 	bl	8002b70 <HAL_GetTick>
 8007314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b08      	cmp	r3, #8
 8007322:	d10e      	bne.n	8007342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f81b 	bl	800736e <UART_WaitOnFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e011      	b.n	8007366 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b09c      	sub	sp, #112	; 0x70
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737e:	e0a7      	b.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007386:	f000 80a3 	beq.w	80074d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738a:	f7fb fbf1 	bl	8002b70 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800739a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800739c:	2b00      	cmp	r3, #0
 800739e:	d13f      	bne.n	8007420 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073b4:	667b      	str	r3, [r7, #100]	; 0x64
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e6      	bne.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	663b      	str	r3, [r7, #96]	; 0x60
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e5      	bne.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e068      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d050      	beq.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743c:	d148      	bne.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007446:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800745c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
 8007468:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800746c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e6      	bne.n	8007448 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	613b      	str	r3, [r7, #16]
   return(result);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	66bb      	str	r3, [r7, #104]	; 0x68
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3308      	adds	r3, #8
 8007498:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800749a:	623a      	str	r2, [r7, #32]
 800749c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	69f9      	ldr	r1, [r7, #28]
 80074a0:	6a3a      	ldr	r2, [r7, #32]
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e5      	bne.n	800747a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e010      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69da      	ldr	r2, [r3, #28]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4013      	ands	r3, r2
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	f43f af48 	beq.w	8007380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3770      	adds	r7, #112	; 0x70
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	f023 0101 	bic.w	r1, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b08      	cmp	r3, #8
 8007524:	d102      	bne.n	800752c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007526:	2340      	movs	r3, #64	; 0x40
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e001      	b.n	8007530 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800753c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007542:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007548:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800754e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007554:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800755a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007560:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007566:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800756c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8007594:	4b20      	ldr	r3, [pc, #128]	; (8007618 <FMC_NORSRAM_Init+0x11c>)
 8007596:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800759e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80075ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	43db      	mvns	r3, r3
 80075be:	ea02 0103 	and.w	r1, r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4319      	orrs	r1, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d8:	d10c      	bne.n	80075f4 <FMC_NORSRAM_Init+0xf8>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d008      	beq.n	80075f4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	0008fb7f 	.word	0x0008fb7f

0800761c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007632:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	431a      	orrs	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	431a      	orrs	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	431a      	orrs	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	3b01      	subs	r3, #1
 8007658:	051b      	lsls	r3, r3, #20
 800765a:	431a      	orrs	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	3b02      	subs	r3, #2
 8007662:	061b      	lsls	r3, r3, #24
 8007664:	431a      	orrs	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	4313      	orrs	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	3201      	adds	r2, #1
 8007670:	4319      	orrs	r1, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007684:	d113      	bne.n	80076ae <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800768e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	051b      	lsls	r3, r3, #20
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	431a      	orrs	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076d0:	d11d      	bne.n	800770e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80076dc:	4013      	ands	r3, r2
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	6811      	ldr	r1, [r2, #0]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	6852      	ldr	r2, [r2, #4]
 80076e6:	0112      	lsls	r2, r2, #4
 80076e8:	4311      	orrs	r1, r2
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	6892      	ldr	r2, [r2, #8]
 80076ee:	0212      	lsls	r2, r2, #8
 80076f0:	4311      	orrs	r1, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	6992      	ldr	r2, [r2, #24]
 80076f6:	4311      	orrs	r1, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	68d2      	ldr	r2, [r2, #12]
 80076fc:	0412      	lsls	r2, r2, #16
 80076fe:	430a      	orrs	r2, r1
 8007700:	ea43 0102 	orr.w	r1, r3, r2
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800770c:	e005      	b.n	800771a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	cff00000 	.word	0xcff00000

0800772c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800772c:	b084      	sub	sp, #16
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	f107 001c 	add.w	r0, r7, #28
 800773a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007742:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007744:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007746:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800774a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800774e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007752:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007756:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	4b07      	ldr	r3, [pc, #28]	; (8007780 <SDMMC_Init+0x54>)
 8007764:	4013      	ands	r3, r2
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	b004      	add	sp, #16
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	ffff8100 	.word	0xffff8100

08007784 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2203      	movs	r2, #3
 80077aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0303 	and.w	r3, r3, #3
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007802:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <SDMMC_SendCommand+0x50>)
 8007810:	4013      	ands	r3, r2
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	fffff000 	.word	0xfffff000

0800782c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	b2db      	uxtb	r3, r3
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3314      	adds	r3, #20
 8007854:	461a      	mov	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	4413      	add	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
}  
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007892:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007898:	431a      	orrs	r2, r3
                       Data->DPSM);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800789e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0

}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80078d2:	2310      	movs	r3, #16
 80078d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078d6:	2340      	movs	r3, #64	; 0x40
 80078d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078da:	2300      	movs	r3, #0
 80078dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078e4:	f107 0308 	add.w	r3, r7, #8
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff ff74 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80078f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f4:	2110      	movs	r1, #16
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f94e 	bl	8007b98 <SDMMC_GetCmdResp1>
 80078fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078fe:	69fb      	ldr	r3, [r7, #28]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007918:	2307      	movs	r3, #7
 800791a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007928:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800792a:	f107 0310 	add.w	r3, r7, #16
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff ff51 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007936:	f241 3288 	movw	r2, #5000	; 0x1388
 800793a:	2107      	movs	r1, #7
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f92b 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007942:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007946:	4618      	mov	r0, r3
 8007948:	3728      	adds	r7, #40	; 0x28
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ff30 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fb45 	bl	8008008 <SDMMC_GetCmdError>
 800797e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007980:	69fb      	ldr	r3, [r7, #28]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3720      	adds	r7, #32
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b088      	sub	sp, #32
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007992:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007998:	2308      	movs	r3, #8
 800799a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079aa:	f107 0308 	add.w	r3, r7, #8
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff ff11 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fad8 	bl	8007f6c <SDMMC_GetCmdResp7>
 80079bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079be:	69fb      	ldr	r3, [r7, #28]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3720      	adds	r7, #32
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80079d6:	2337      	movs	r3, #55	; 0x37
 80079d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fef2 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80079f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f8:	2137      	movs	r1, #55	; 0x37
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f8cc 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a02:	69fb      	ldr	r3, [r7, #28]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <SDMMC_CmdAppOperCommand+0x44>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007a1e:	2329      	movs	r3, #41	; 0x29
 8007a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a22:	2340      	movs	r3, #64	; 0x40
 8007a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a30:	f107 0308 	add.w	r3, r7, #8
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff fece 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9e1 	bl	8007e04 <SDMMC_GetCmdResp3>
 8007a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a44:	69fb      	ldr	r3, [r7, #28]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3720      	adds	r7, #32
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	80100000 	.word	0x80100000

08007a54 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007a62:	2306      	movs	r3, #6
 8007a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a66:	2340      	movs	r3, #64	; 0x40
 8007a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a74:	f107 0308 	add.w	r3, r7, #8
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff feac 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a84:	2106      	movs	r1, #6
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f886 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007a8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007aa4:	2333      	movs	r3, #51	; 0x33
 8007aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ab6:	f107 0308 	add.w	r3, r7, #8
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fe8b 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac6:	2133      	movs	r1, #51	; 0x33
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f865 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b088      	sub	sp, #32
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007aea:	23c0      	movs	r3, #192	; 0xc0
 8007aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007aee:	2300      	movs	r3, #0
 8007af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007af8:	f107 0308 	add.w	r3, r7, #8
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fe6a 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f935 	bl	8007d74 <SDMMC_GetCmdResp2>
 8007b0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b088      	sub	sp, #32
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007b24:	2309      	movs	r3, #9
 8007b26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007b28:	23c0      	movs	r3, #192	; 0xc0
 8007b2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b36:	f107 0308 	add.w	r3, r7, #8
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fe4b 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f916 	bl	8007d74 <SDMMC_GetCmdResp2>
 8007b48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007b62:	2303      	movs	r3, #3
 8007b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b74:	f107 0308 	add.w	r3, r7, #8
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff fe2c 	bl	80077d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	2103      	movs	r1, #3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f97b 	bl	8007e80 <SDMMC_GetCmdResp6>
 8007b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ba6:	4b70      	ldr	r3, [pc, #448]	; (8007d68 <SDMMC_GetCmdResp1+0x1d0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a70      	ldr	r2, [pc, #448]	; (8007d6c <SDMMC_GetCmdResp1+0x1d4>)
 8007bac:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb0:	0a5a      	lsrs	r2, r3, #9
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	61fa      	str	r2, [r7, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bc8:	e0c9      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0ef      	beq.n	8007bba <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1ea      	bne.n	8007bba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	e0b1      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0a6      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	22c5      	movs	r2, #197	; 0xc5
 8007c14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fe08 	bl	800782c <SDMMC_GetCommandResponse>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d001      	beq.n	8007c2a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e099      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fe0a 	bl	8007846 <SDMMC_GetResponse>
 8007c32:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4b4e      	ldr	r3, [pc, #312]	; (8007d70 <SDMMC_GetCmdResp1+0x1d8>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e08d      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da02      	bge.n	8007c4e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c4c:	e087      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	e080      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	e079      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c78:	e071      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c88:	e069      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c98:	e061      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ca8:	e059      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cb8:	e051      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cc8:	e049      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cd8:	e041      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce8:	e039      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cf8:	e031      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d08:	e029      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d18:	e021      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d28:	e019      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d38:	e011      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d48:	e009      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d58:	e001      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000250 	.word	0x20000250
 8007d6c:	10624dd3 	.word	0x10624dd3
 8007d70:	fdffe008 	.word	0xfdffe008

08007d74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d7c:	4b1f      	ldr	r3, [pc, #124]	; (8007dfc <SDMMC_GetCmdResp2+0x88>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1f      	ldr	r2, [pc, #124]	; (8007e00 <SDMMC_GetCmdResp2+0x8c>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	0a5b      	lsrs	r3, r3, #9
 8007d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
 8007d90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1e5a      	subs	r2, r3, #1
 8007d96:	60fa      	str	r2, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007da0:	e026      	b.n	8007df0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0ef      	beq.n	8007d92 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ea      	bne.n	8007d92 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dce:	2304      	movs	r3, #4
 8007dd0:	e00e      	b.n	8007df0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d004      	beq.n	8007de8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e003      	b.n	8007df0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	22c5      	movs	r2, #197	; 0xc5
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20000250 	.word	0x20000250
 8007e00:	10624dd3 	.word	0x10624dd3

08007e04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e0c:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <SDMMC_GetCmdResp3+0x74>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1a      	ldr	r2, [pc, #104]	; (8007e7c <SDMMC_GetCmdResp3+0x78>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0a5b      	lsrs	r3, r3, #9
 8007e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1e5a      	subs	r2, r3, #1
 8007e26:	60fa      	str	r2, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e30:	e01b      	b.n	8007e6a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ef      	beq.n	8007e22 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1ea      	bne.n	8007e22 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e5e:	2304      	movs	r3, #4
 8007e60:	e003      	b.n	8007e6a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	22c5      	movs	r2, #197	; 0xc5
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000250 	.word	0x20000250
 8007e7c:	10624dd3 	.word	0x10624dd3

08007e80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e8e:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <SDMMC_GetCmdResp6+0xe4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a35      	ldr	r2, [pc, #212]	; (8007f68 <SDMMC_GetCmdResp6+0xe8>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	0a5b      	lsrs	r3, r3, #9
 8007e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	1e5a      	subs	r2, r3, #1
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eb2:	e052      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0ef      	beq.n	8007ea4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1ea      	bne.n	8007ea4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2204      	movs	r2, #4
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	e03a      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e02f      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff fc96 	bl	800782c <SDMMC_GetCommandResponse>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d001      	beq.n	8007f0e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e025      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	22c5      	movs	r2, #197	; 0xc5
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff fc95 	bl	8007846 <SDMMC_GetResponse>
 8007f1c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e011      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f44:	e009      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f54:	e001      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000250 	.word	0x20000250
 8007f68:	10624dd3 	.word	0x10624dd3

08007f6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f74:	4b22      	ldr	r3, [pc, #136]	; (8008000 <SDMMC_GetCmdResp7+0x94>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a22      	ldr	r2, [pc, #136]	; (8008004 <SDMMC_GetCmdResp7+0x98>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	0a5b      	lsrs	r3, r3, #9
 8007f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f84:	fb02 f303 	mul.w	r3, r2, r3
 8007f88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	1e5a      	subs	r2, r3, #1
 8007f8e:	60fa      	str	r2, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f98:	e02c      	b.n	8007ff4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0ef      	beq.n	8007f8a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ea      	bne.n	8007f8a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	e014      	b.n	8007ff4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e009      	b.n	8007ff4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2240      	movs	r2, #64	; 0x40
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ff2:	2300      	movs	r3, #0
  
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000250 	.word	0x20000250
 8008004:	10624dd3 	.word	0x10624dd3

08008008 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <SDMMC_GetCmdError+0x50>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a11      	ldr	r2, [pc, #68]	; (800805c <SDMMC_GetCmdError+0x54>)
 8008016:	fba2 2303 	umull	r2, r3, r2, r3
 800801a:	0a5b      	lsrs	r3, r3, #9
 800801c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008020:	fb02 f303 	mul.w	r3, r2, r3
 8008024:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1e5a      	subs	r2, r3, #1
 800802a:	60fa      	str	r2, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008034:	e009      	b.n	800804a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f1      	beq.n	8008026 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	22c5      	movs	r2, #197	; 0xc5
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000250 	.word	0x20000250
 800805c:	10624dd3 	.word	0x10624dd3

08008060 <rand>:
 8008060:	4b16      	ldr	r3, [pc, #88]	; (80080bc <rand+0x5c>)
 8008062:	b510      	push	{r4, lr}
 8008064:	681c      	ldr	r4, [r3, #0]
 8008066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008068:	b9b3      	cbnz	r3, 8008098 <rand+0x38>
 800806a:	2018      	movs	r0, #24
 800806c:	f000 fa22 	bl	80084b4 <malloc>
 8008070:	4602      	mov	r2, r0
 8008072:	6320      	str	r0, [r4, #48]	; 0x30
 8008074:	b920      	cbnz	r0, 8008080 <rand+0x20>
 8008076:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <rand+0x60>)
 8008078:	4812      	ldr	r0, [pc, #72]	; (80080c4 <rand+0x64>)
 800807a:	2152      	movs	r1, #82	; 0x52
 800807c:	f000 f9b0 	bl	80083e0 <__assert_func>
 8008080:	4911      	ldr	r1, [pc, #68]	; (80080c8 <rand+0x68>)
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <rand+0x6c>)
 8008084:	e9c0 1300 	strd	r1, r3, [r0]
 8008088:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <rand+0x70>)
 800808a:	6083      	str	r3, [r0, #8]
 800808c:	230b      	movs	r3, #11
 800808e:	8183      	strh	r3, [r0, #12]
 8008090:	2100      	movs	r1, #0
 8008092:	2001      	movs	r0, #1
 8008094:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008098:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800809a:	480e      	ldr	r0, [pc, #56]	; (80080d4 <rand+0x74>)
 800809c:	690b      	ldr	r3, [r1, #16]
 800809e:	694c      	ldr	r4, [r1, #20]
 80080a0:	4a0d      	ldr	r2, [pc, #52]	; (80080d8 <rand+0x78>)
 80080a2:	4358      	muls	r0, r3
 80080a4:	fb02 0004 	mla	r0, r2, r4, r0
 80080a8:	fba3 3202 	umull	r3, r2, r3, r2
 80080ac:	3301      	adds	r3, #1
 80080ae:	eb40 0002 	adc.w	r0, r0, r2
 80080b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80080b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80080ba:	bd10      	pop	{r4, pc}
 80080bc:	200002b4 	.word	0x200002b4
 80080c0:	08009070 	.word	0x08009070
 80080c4:	08009087 	.word	0x08009087
 80080c8:	abcd330e 	.word	0xabcd330e
 80080cc:	e66d1234 	.word	0xe66d1234
 80080d0:	0005deec 	.word	0x0005deec
 80080d4:	5851f42d 	.word	0x5851f42d
 80080d8:	4c957f2d 	.word	0x4c957f2d

080080dc <std>:
 80080dc:	2300      	movs	r3, #0
 80080de:	b510      	push	{r4, lr}
 80080e0:	4604      	mov	r4, r0
 80080e2:	e9c0 3300 	strd	r3, r3, [r0]
 80080e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ea:	6083      	str	r3, [r0, #8]
 80080ec:	8181      	strh	r1, [r0, #12]
 80080ee:	6643      	str	r3, [r0, #100]	; 0x64
 80080f0:	81c2      	strh	r2, [r0, #14]
 80080f2:	6183      	str	r3, [r0, #24]
 80080f4:	4619      	mov	r1, r3
 80080f6:	2208      	movs	r2, #8
 80080f8:	305c      	adds	r0, #92	; 0x5c
 80080fa:	f000 f8f4 	bl	80082e6 <memset>
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <std+0x58>)
 8008100:	6263      	str	r3, [r4, #36]	; 0x24
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <std+0x5c>)
 8008104:	62a3      	str	r3, [r4, #40]	; 0x28
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <std+0x60>)
 8008108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <std+0x64>)
 800810c:	6323      	str	r3, [r4, #48]	; 0x30
 800810e:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <std+0x68>)
 8008110:	6224      	str	r4, [r4, #32]
 8008112:	429c      	cmp	r4, r3
 8008114:	d006      	beq.n	8008124 <std+0x48>
 8008116:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800811a:	4294      	cmp	r4, r2
 800811c:	d002      	beq.n	8008124 <std+0x48>
 800811e:	33d0      	adds	r3, #208	; 0xd0
 8008120:	429c      	cmp	r4, r3
 8008122:	d105      	bne.n	8008130 <std+0x54>
 8008124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812c:	f000 b954 	b.w	80083d8 <__retarget_lock_init_recursive>
 8008130:	bd10      	pop	{r4, pc}
 8008132:	bf00      	nop
 8008134:	08008261 	.word	0x08008261
 8008138:	08008283 	.word	0x08008283
 800813c:	080082bb 	.word	0x080082bb
 8008140:	080082df 	.word	0x080082df
 8008144:	200007d8 	.word	0x200007d8

08008148 <stdio_exit_handler>:
 8008148:	4a02      	ldr	r2, [pc, #8]	; (8008154 <stdio_exit_handler+0xc>)
 800814a:	4903      	ldr	r1, [pc, #12]	; (8008158 <stdio_exit_handler+0x10>)
 800814c:	4803      	ldr	r0, [pc, #12]	; (800815c <stdio_exit_handler+0x14>)
 800814e:	f000 b869 	b.w	8008224 <_fwalk_sglue>
 8008152:	bf00      	nop
 8008154:	2000025c 	.word	0x2000025c
 8008158:	08008729 	.word	0x08008729
 800815c:	20000268 	.word	0x20000268

08008160 <cleanup_stdio>:
 8008160:	6841      	ldr	r1, [r0, #4]
 8008162:	4b0c      	ldr	r3, [pc, #48]	; (8008194 <cleanup_stdio+0x34>)
 8008164:	4299      	cmp	r1, r3
 8008166:	b510      	push	{r4, lr}
 8008168:	4604      	mov	r4, r0
 800816a:	d001      	beq.n	8008170 <cleanup_stdio+0x10>
 800816c:	f000 fadc 	bl	8008728 <_fflush_r>
 8008170:	68a1      	ldr	r1, [r4, #8]
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <cleanup_stdio+0x38>)
 8008174:	4299      	cmp	r1, r3
 8008176:	d002      	beq.n	800817e <cleanup_stdio+0x1e>
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fad5 	bl	8008728 <_fflush_r>
 800817e:	68e1      	ldr	r1, [r4, #12]
 8008180:	4b06      	ldr	r3, [pc, #24]	; (800819c <cleanup_stdio+0x3c>)
 8008182:	4299      	cmp	r1, r3
 8008184:	d004      	beq.n	8008190 <cleanup_stdio+0x30>
 8008186:	4620      	mov	r0, r4
 8008188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818c:	f000 bacc 	b.w	8008728 <_fflush_r>
 8008190:	bd10      	pop	{r4, pc}
 8008192:	bf00      	nop
 8008194:	200007d8 	.word	0x200007d8
 8008198:	20000840 	.word	0x20000840
 800819c:	200008a8 	.word	0x200008a8

080081a0 <global_stdio_init.part.0>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <global_stdio_init.part.0+0x30>)
 80081a4:	4c0b      	ldr	r4, [pc, #44]	; (80081d4 <global_stdio_init.part.0+0x34>)
 80081a6:	4a0c      	ldr	r2, [pc, #48]	; (80081d8 <global_stdio_init.part.0+0x38>)
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	4620      	mov	r0, r4
 80081ac:	2200      	movs	r2, #0
 80081ae:	2104      	movs	r1, #4
 80081b0:	f7ff ff94 	bl	80080dc <std>
 80081b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081b8:	2201      	movs	r2, #1
 80081ba:	2109      	movs	r1, #9
 80081bc:	f7ff ff8e 	bl	80080dc <std>
 80081c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081c4:	2202      	movs	r2, #2
 80081c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ca:	2112      	movs	r1, #18
 80081cc:	f7ff bf86 	b.w	80080dc <std>
 80081d0:	20000910 	.word	0x20000910
 80081d4:	200007d8 	.word	0x200007d8
 80081d8:	08008149 	.word	0x08008149

080081dc <__sfp_lock_acquire>:
 80081dc:	4801      	ldr	r0, [pc, #4]	; (80081e4 <__sfp_lock_acquire+0x8>)
 80081de:	f000 b8fc 	b.w	80083da <__retarget_lock_acquire_recursive>
 80081e2:	bf00      	nop
 80081e4:	20000919 	.word	0x20000919

080081e8 <__sfp_lock_release>:
 80081e8:	4801      	ldr	r0, [pc, #4]	; (80081f0 <__sfp_lock_release+0x8>)
 80081ea:	f000 b8f7 	b.w	80083dc <__retarget_lock_release_recursive>
 80081ee:	bf00      	nop
 80081f0:	20000919 	.word	0x20000919

080081f4 <__sinit>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	4604      	mov	r4, r0
 80081f8:	f7ff fff0 	bl	80081dc <__sfp_lock_acquire>
 80081fc:	6a23      	ldr	r3, [r4, #32]
 80081fe:	b11b      	cbz	r3, 8008208 <__sinit+0x14>
 8008200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008204:	f7ff bff0 	b.w	80081e8 <__sfp_lock_release>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__sinit+0x28>)
 800820a:	6223      	str	r3, [r4, #32]
 800820c:	4b04      	ldr	r3, [pc, #16]	; (8008220 <__sinit+0x2c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f5      	bne.n	8008200 <__sinit+0xc>
 8008214:	f7ff ffc4 	bl	80081a0 <global_stdio_init.part.0>
 8008218:	e7f2      	b.n	8008200 <__sinit+0xc>
 800821a:	bf00      	nop
 800821c:	08008161 	.word	0x08008161
 8008220:	20000910 	.word	0x20000910

08008224 <_fwalk_sglue>:
 8008224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008228:	4607      	mov	r7, r0
 800822a:	4688      	mov	r8, r1
 800822c:	4614      	mov	r4, r2
 800822e:	2600      	movs	r6, #0
 8008230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008234:	f1b9 0901 	subs.w	r9, r9, #1
 8008238:	d505      	bpl.n	8008246 <_fwalk_sglue+0x22>
 800823a:	6824      	ldr	r4, [r4, #0]
 800823c:	2c00      	cmp	r4, #0
 800823e:	d1f7      	bne.n	8008230 <_fwalk_sglue+0xc>
 8008240:	4630      	mov	r0, r6
 8008242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d907      	bls.n	800825c <_fwalk_sglue+0x38>
 800824c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008250:	3301      	adds	r3, #1
 8008252:	d003      	beq.n	800825c <_fwalk_sglue+0x38>
 8008254:	4629      	mov	r1, r5
 8008256:	4638      	mov	r0, r7
 8008258:	47c0      	blx	r8
 800825a:	4306      	orrs	r6, r0
 800825c:	3568      	adds	r5, #104	; 0x68
 800825e:	e7e9      	b.n	8008234 <_fwalk_sglue+0x10>

08008260 <__sread>:
 8008260:	b510      	push	{r4, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	f000 f868 	bl	800833c <_read_r>
 800826c:	2800      	cmp	r0, #0
 800826e:	bfab      	itete	ge
 8008270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008272:	89a3      	ldrhlt	r3, [r4, #12]
 8008274:	181b      	addge	r3, r3, r0
 8008276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800827a:	bfac      	ite	ge
 800827c:	6563      	strge	r3, [r4, #84]	; 0x54
 800827e:	81a3      	strhlt	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__swrite>:
 8008282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008286:	461f      	mov	r7, r3
 8008288:	898b      	ldrh	r3, [r1, #12]
 800828a:	05db      	lsls	r3, r3, #23
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	4616      	mov	r6, r2
 8008292:	d505      	bpl.n	80082a0 <__swrite+0x1e>
 8008294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008298:	2302      	movs	r3, #2
 800829a:	2200      	movs	r2, #0
 800829c:	f000 f83c 	bl	8008318 <_lseek_r>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	4632      	mov	r2, r6
 80082ae:	463b      	mov	r3, r7
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	f000 b853 	b.w	8008360 <_write_r>

080082ba <__sseek>:
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 f829 	bl	8008318 <_lseek_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	bf15      	itete	ne
 80082cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082d6:	81a3      	strheq	r3, [r4, #12]
 80082d8:	bf18      	it	ne
 80082da:	81a3      	strhne	r3, [r4, #12]
 80082dc:	bd10      	pop	{r4, pc}

080082de <__sclose>:
 80082de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e2:	f000 b809 	b.w	80082f8 <_close_r>

080082e6 <memset>:
 80082e6:	4402      	add	r2, r0
 80082e8:	4603      	mov	r3, r0
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d100      	bne.n	80082f0 <memset+0xa>
 80082ee:	4770      	bx	lr
 80082f0:	f803 1b01 	strb.w	r1, [r3], #1
 80082f4:	e7f9      	b.n	80082ea <memset+0x4>
	...

080082f8 <_close_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	; (8008314 <_close_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7f9 ff0d 	bl	8002122 <_close>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_close_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_close_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20000914 	.word	0x20000914

08008318 <_lseek_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d07      	ldr	r5, [pc, #28]	; (8008338 <_lseek_r+0x20>)
 800831c:	4604      	mov	r4, r0
 800831e:	4608      	mov	r0, r1
 8008320:	4611      	mov	r1, r2
 8008322:	2200      	movs	r2, #0
 8008324:	602a      	str	r2, [r5, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f7f9 ff22 	bl	8002170 <_lseek>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_lseek_r+0x1e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_lseek_r+0x1e>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20000914 	.word	0x20000914

0800833c <_read_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	; (800835c <_read_r+0x20>)
 8008340:	4604      	mov	r4, r0
 8008342:	4608      	mov	r0, r1
 8008344:	4611      	mov	r1, r2
 8008346:	2200      	movs	r2, #0
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7f9 feb0 	bl	80020b0 <_read>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_read_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_read_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20000914 	.word	0x20000914

08008360 <_write_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	; (8008380 <_write_r+0x20>)
 8008364:	4604      	mov	r4, r0
 8008366:	4608      	mov	r0, r1
 8008368:	4611      	mov	r1, r2
 800836a:	2200      	movs	r2, #0
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	f7f9 febb 	bl	80020ea <_write>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d102      	bne.n	800837e <_write_r+0x1e>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b103      	cbz	r3, 800837e <_write_r+0x1e>
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	20000914 	.word	0x20000914

08008384 <__errno>:
 8008384:	4b01      	ldr	r3, [pc, #4]	; (800838c <__errno+0x8>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	200002b4 	.word	0x200002b4

08008390 <__libc_init_array>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	4d0d      	ldr	r5, [pc, #52]	; (80083c8 <__libc_init_array+0x38>)
 8008394:	4c0d      	ldr	r4, [pc, #52]	; (80083cc <__libc_init_array+0x3c>)
 8008396:	1b64      	subs	r4, r4, r5
 8008398:	10a4      	asrs	r4, r4, #2
 800839a:	2600      	movs	r6, #0
 800839c:	42a6      	cmp	r6, r4
 800839e:	d109      	bne.n	80083b4 <__libc_init_array+0x24>
 80083a0:	4d0b      	ldr	r5, [pc, #44]	; (80083d0 <__libc_init_array+0x40>)
 80083a2:	4c0c      	ldr	r4, [pc, #48]	; (80083d4 <__libc_init_array+0x44>)
 80083a4:	f000 fe42 	bl	800902c <_init>
 80083a8:	1b64      	subs	r4, r4, r5
 80083aa:	10a4      	asrs	r4, r4, #2
 80083ac:	2600      	movs	r6, #0
 80083ae:	42a6      	cmp	r6, r4
 80083b0:	d105      	bne.n	80083be <__libc_init_array+0x2e>
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b8:	4798      	blx	r3
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7ee      	b.n	800839c <__libc_init_array+0xc>
 80083be:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c2:	4798      	blx	r3
 80083c4:	3601      	adds	r6, #1
 80083c6:	e7f2      	b.n	80083ae <__libc_init_array+0x1e>
 80083c8:	08009158 	.word	0x08009158
 80083cc:	08009158 	.word	0x08009158
 80083d0:	08009158 	.word	0x08009158
 80083d4:	0800915c 	.word	0x0800915c

080083d8 <__retarget_lock_init_recursive>:
 80083d8:	4770      	bx	lr

080083da <__retarget_lock_acquire_recursive>:
 80083da:	4770      	bx	lr

080083dc <__retarget_lock_release_recursive>:
 80083dc:	4770      	bx	lr
	...

080083e0 <__assert_func>:
 80083e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083e2:	4614      	mov	r4, r2
 80083e4:	461a      	mov	r2, r3
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <__assert_func+0x2c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4605      	mov	r5, r0
 80083ec:	68d8      	ldr	r0, [r3, #12]
 80083ee:	b14c      	cbz	r4, 8008404 <__assert_func+0x24>
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <__assert_func+0x30>)
 80083f2:	9100      	str	r1, [sp, #0]
 80083f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083f8:	4906      	ldr	r1, [pc, #24]	; (8008414 <__assert_func+0x34>)
 80083fa:	462b      	mov	r3, r5
 80083fc:	f000 f9bc 	bl	8008778 <fiprintf>
 8008400:	f000 f9dc 	bl	80087bc <abort>
 8008404:	4b04      	ldr	r3, [pc, #16]	; (8008418 <__assert_func+0x38>)
 8008406:	461c      	mov	r4, r3
 8008408:	e7f3      	b.n	80083f2 <__assert_func+0x12>
 800840a:	bf00      	nop
 800840c:	200002b4 	.word	0x200002b4
 8008410:	080090df 	.word	0x080090df
 8008414:	080090ec 	.word	0x080090ec
 8008418:	0800911a 	.word	0x0800911a

0800841c <_free_r>:
 800841c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800841e:	2900      	cmp	r1, #0
 8008420:	d044      	beq.n	80084ac <_free_r+0x90>
 8008422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008426:	9001      	str	r0, [sp, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f1a1 0404 	sub.w	r4, r1, #4
 800842e:	bfb8      	it	lt
 8008430:	18e4      	addlt	r4, r4, r3
 8008432:	f000 f8e7 	bl	8008604 <__malloc_lock>
 8008436:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <_free_r+0x94>)
 8008438:	9801      	ldr	r0, [sp, #4]
 800843a:	6813      	ldr	r3, [r2, #0]
 800843c:	b933      	cbnz	r3, 800844c <_free_r+0x30>
 800843e:	6063      	str	r3, [r4, #4]
 8008440:	6014      	str	r4, [r2, #0]
 8008442:	b003      	add	sp, #12
 8008444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008448:	f000 b8e2 	b.w	8008610 <__malloc_unlock>
 800844c:	42a3      	cmp	r3, r4
 800844e:	d908      	bls.n	8008462 <_free_r+0x46>
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	1961      	adds	r1, r4, r5
 8008454:	428b      	cmp	r3, r1
 8008456:	bf01      	itttt	eq
 8008458:	6819      	ldreq	r1, [r3, #0]
 800845a:	685b      	ldreq	r3, [r3, #4]
 800845c:	1949      	addeq	r1, r1, r5
 800845e:	6021      	streq	r1, [r4, #0]
 8008460:	e7ed      	b.n	800843e <_free_r+0x22>
 8008462:	461a      	mov	r2, r3
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	b10b      	cbz	r3, 800846c <_free_r+0x50>
 8008468:	42a3      	cmp	r3, r4
 800846a:	d9fa      	bls.n	8008462 <_free_r+0x46>
 800846c:	6811      	ldr	r1, [r2, #0]
 800846e:	1855      	adds	r5, r2, r1
 8008470:	42a5      	cmp	r5, r4
 8008472:	d10b      	bne.n	800848c <_free_r+0x70>
 8008474:	6824      	ldr	r4, [r4, #0]
 8008476:	4421      	add	r1, r4
 8008478:	1854      	adds	r4, r2, r1
 800847a:	42a3      	cmp	r3, r4
 800847c:	6011      	str	r1, [r2, #0]
 800847e:	d1e0      	bne.n	8008442 <_free_r+0x26>
 8008480:	681c      	ldr	r4, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	6053      	str	r3, [r2, #4]
 8008486:	440c      	add	r4, r1
 8008488:	6014      	str	r4, [r2, #0]
 800848a:	e7da      	b.n	8008442 <_free_r+0x26>
 800848c:	d902      	bls.n	8008494 <_free_r+0x78>
 800848e:	230c      	movs	r3, #12
 8008490:	6003      	str	r3, [r0, #0]
 8008492:	e7d6      	b.n	8008442 <_free_r+0x26>
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	1961      	adds	r1, r4, r5
 8008498:	428b      	cmp	r3, r1
 800849a:	bf04      	itt	eq
 800849c:	6819      	ldreq	r1, [r3, #0]
 800849e:	685b      	ldreq	r3, [r3, #4]
 80084a0:	6063      	str	r3, [r4, #4]
 80084a2:	bf04      	itt	eq
 80084a4:	1949      	addeq	r1, r1, r5
 80084a6:	6021      	streq	r1, [r4, #0]
 80084a8:	6054      	str	r4, [r2, #4]
 80084aa:	e7ca      	b.n	8008442 <_free_r+0x26>
 80084ac:	b003      	add	sp, #12
 80084ae:	bd30      	pop	{r4, r5, pc}
 80084b0:	2000091c 	.word	0x2000091c

080084b4 <malloc>:
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <malloc+0xc>)
 80084b6:	4601      	mov	r1, r0
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	f000 b823 	b.w	8008504 <_malloc_r>
 80084be:	bf00      	nop
 80084c0:	200002b4 	.word	0x200002b4

080084c4 <sbrk_aligned>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4e0e      	ldr	r6, [pc, #56]	; (8008500 <sbrk_aligned+0x3c>)
 80084c8:	460c      	mov	r4, r1
 80084ca:	6831      	ldr	r1, [r6, #0]
 80084cc:	4605      	mov	r5, r0
 80084ce:	b911      	cbnz	r1, 80084d6 <sbrk_aligned+0x12>
 80084d0:	f000 f964 	bl	800879c <_sbrk_r>
 80084d4:	6030      	str	r0, [r6, #0]
 80084d6:	4621      	mov	r1, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	f000 f95f 	bl	800879c <_sbrk_r>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d00a      	beq.n	80084f8 <sbrk_aligned+0x34>
 80084e2:	1cc4      	adds	r4, r0, #3
 80084e4:	f024 0403 	bic.w	r4, r4, #3
 80084e8:	42a0      	cmp	r0, r4
 80084ea:	d007      	beq.n	80084fc <sbrk_aligned+0x38>
 80084ec:	1a21      	subs	r1, r4, r0
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f954 	bl	800879c <_sbrk_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d101      	bne.n	80084fc <sbrk_aligned+0x38>
 80084f8:	f04f 34ff 	mov.w	r4, #4294967295
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	20000920 	.word	0x20000920

08008504 <_malloc_r>:
 8008504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008508:	1ccd      	adds	r5, r1, #3
 800850a:	f025 0503 	bic.w	r5, r5, #3
 800850e:	3508      	adds	r5, #8
 8008510:	2d0c      	cmp	r5, #12
 8008512:	bf38      	it	cc
 8008514:	250c      	movcc	r5, #12
 8008516:	2d00      	cmp	r5, #0
 8008518:	4607      	mov	r7, r0
 800851a:	db01      	blt.n	8008520 <_malloc_r+0x1c>
 800851c:	42a9      	cmp	r1, r5
 800851e:	d905      	bls.n	800852c <_malloc_r+0x28>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	2600      	movs	r6, #0
 8008526:	4630      	mov	r0, r6
 8008528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008600 <_malloc_r+0xfc>
 8008530:	f000 f868 	bl	8008604 <__malloc_lock>
 8008534:	f8d8 3000 	ldr.w	r3, [r8]
 8008538:	461c      	mov	r4, r3
 800853a:	bb5c      	cbnz	r4, 8008594 <_malloc_r+0x90>
 800853c:	4629      	mov	r1, r5
 800853e:	4638      	mov	r0, r7
 8008540:	f7ff ffc0 	bl	80084c4 <sbrk_aligned>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	4604      	mov	r4, r0
 8008548:	d155      	bne.n	80085f6 <_malloc_r+0xf2>
 800854a:	f8d8 4000 	ldr.w	r4, [r8]
 800854e:	4626      	mov	r6, r4
 8008550:	2e00      	cmp	r6, #0
 8008552:	d145      	bne.n	80085e0 <_malloc_r+0xdc>
 8008554:	2c00      	cmp	r4, #0
 8008556:	d048      	beq.n	80085ea <_malloc_r+0xe6>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	4631      	mov	r1, r6
 800855c:	4638      	mov	r0, r7
 800855e:	eb04 0903 	add.w	r9, r4, r3
 8008562:	f000 f91b 	bl	800879c <_sbrk_r>
 8008566:	4581      	cmp	r9, r0
 8008568:	d13f      	bne.n	80085ea <_malloc_r+0xe6>
 800856a:	6821      	ldr	r1, [r4, #0]
 800856c:	1a6d      	subs	r5, r5, r1
 800856e:	4629      	mov	r1, r5
 8008570:	4638      	mov	r0, r7
 8008572:	f7ff ffa7 	bl	80084c4 <sbrk_aligned>
 8008576:	3001      	adds	r0, #1
 8008578:	d037      	beq.n	80085ea <_malloc_r+0xe6>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	442b      	add	r3, r5
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	f8d8 3000 	ldr.w	r3, [r8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d038      	beq.n	80085fa <_malloc_r+0xf6>
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	42a2      	cmp	r2, r4
 800858c:	d12b      	bne.n	80085e6 <_malloc_r+0xe2>
 800858e:	2200      	movs	r2, #0
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	e00f      	b.n	80085b4 <_malloc_r+0xb0>
 8008594:	6822      	ldr	r2, [r4, #0]
 8008596:	1b52      	subs	r2, r2, r5
 8008598:	d41f      	bmi.n	80085da <_malloc_r+0xd6>
 800859a:	2a0b      	cmp	r2, #11
 800859c:	d917      	bls.n	80085ce <_malloc_r+0xca>
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	6025      	str	r5, [r4, #0]
 80085a4:	bf18      	it	ne
 80085a6:	6059      	strne	r1, [r3, #4]
 80085a8:	6863      	ldr	r3, [r4, #4]
 80085aa:	bf08      	it	eq
 80085ac:	f8c8 1000 	streq.w	r1, [r8]
 80085b0:	5162      	str	r2, [r4, r5]
 80085b2:	604b      	str	r3, [r1, #4]
 80085b4:	4638      	mov	r0, r7
 80085b6:	f104 060b 	add.w	r6, r4, #11
 80085ba:	f000 f829 	bl	8008610 <__malloc_unlock>
 80085be:	f026 0607 	bic.w	r6, r6, #7
 80085c2:	1d23      	adds	r3, r4, #4
 80085c4:	1af2      	subs	r2, r6, r3
 80085c6:	d0ae      	beq.n	8008526 <_malloc_r+0x22>
 80085c8:	1b9b      	subs	r3, r3, r6
 80085ca:	50a3      	str	r3, [r4, r2]
 80085cc:	e7ab      	b.n	8008526 <_malloc_r+0x22>
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	6862      	ldr	r2, [r4, #4]
 80085d2:	d1dd      	bne.n	8008590 <_malloc_r+0x8c>
 80085d4:	f8c8 2000 	str.w	r2, [r8]
 80085d8:	e7ec      	b.n	80085b4 <_malloc_r+0xb0>
 80085da:	4623      	mov	r3, r4
 80085dc:	6864      	ldr	r4, [r4, #4]
 80085de:	e7ac      	b.n	800853a <_malloc_r+0x36>
 80085e0:	4634      	mov	r4, r6
 80085e2:	6876      	ldr	r6, [r6, #4]
 80085e4:	e7b4      	b.n	8008550 <_malloc_r+0x4c>
 80085e6:	4613      	mov	r3, r2
 80085e8:	e7cc      	b.n	8008584 <_malloc_r+0x80>
 80085ea:	230c      	movs	r3, #12
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	4638      	mov	r0, r7
 80085f0:	f000 f80e 	bl	8008610 <__malloc_unlock>
 80085f4:	e797      	b.n	8008526 <_malloc_r+0x22>
 80085f6:	6025      	str	r5, [r4, #0]
 80085f8:	e7dc      	b.n	80085b4 <_malloc_r+0xb0>
 80085fa:	605b      	str	r3, [r3, #4]
 80085fc:	deff      	udf	#255	; 0xff
 80085fe:	bf00      	nop
 8008600:	2000091c 	.word	0x2000091c

08008604 <__malloc_lock>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__malloc_lock+0x8>)
 8008606:	f7ff bee8 	b.w	80083da <__retarget_lock_acquire_recursive>
 800860a:	bf00      	nop
 800860c:	20000918 	.word	0x20000918

08008610 <__malloc_unlock>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__malloc_unlock+0x8>)
 8008612:	f7ff bee3 	b.w	80083dc <__retarget_lock_release_recursive>
 8008616:	bf00      	nop
 8008618:	20000918 	.word	0x20000918

0800861c <__sflush_r>:
 800861c:	898a      	ldrh	r2, [r1, #12]
 800861e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	0710      	lsls	r0, r2, #28
 8008626:	460c      	mov	r4, r1
 8008628:	d458      	bmi.n	80086dc <__sflush_r+0xc0>
 800862a:	684b      	ldr	r3, [r1, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	dc05      	bgt.n	800863c <__sflush_r+0x20>
 8008630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	dc02      	bgt.n	800863c <__sflush_r+0x20>
 8008636:	2000      	movs	r0, #0
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800863e:	2e00      	cmp	r6, #0
 8008640:	d0f9      	beq.n	8008636 <__sflush_r+0x1a>
 8008642:	2300      	movs	r3, #0
 8008644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008648:	682f      	ldr	r7, [r5, #0]
 800864a:	6a21      	ldr	r1, [r4, #32]
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	d032      	beq.n	80086b6 <__sflush_r+0x9a>
 8008650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	075a      	lsls	r2, r3, #29
 8008656:	d505      	bpl.n	8008664 <__sflush_r+0x48>
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	1ac0      	subs	r0, r0, r3
 800865c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800865e:	b10b      	cbz	r3, 8008664 <__sflush_r+0x48>
 8008660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008662:	1ac0      	subs	r0, r0, r3
 8008664:	2300      	movs	r3, #0
 8008666:	4602      	mov	r2, r0
 8008668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800866a:	6a21      	ldr	r1, [r4, #32]
 800866c:	4628      	mov	r0, r5
 800866e:	47b0      	blx	r6
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	89a3      	ldrh	r3, [r4, #12]
 8008674:	d106      	bne.n	8008684 <__sflush_r+0x68>
 8008676:	6829      	ldr	r1, [r5, #0]
 8008678:	291d      	cmp	r1, #29
 800867a:	d82b      	bhi.n	80086d4 <__sflush_r+0xb8>
 800867c:	4a29      	ldr	r2, [pc, #164]	; (8008724 <__sflush_r+0x108>)
 800867e:	410a      	asrs	r2, r1
 8008680:	07d6      	lsls	r6, r2, #31
 8008682:	d427      	bmi.n	80086d4 <__sflush_r+0xb8>
 8008684:	2200      	movs	r2, #0
 8008686:	6062      	str	r2, [r4, #4]
 8008688:	04d9      	lsls	r1, r3, #19
 800868a:	6922      	ldr	r2, [r4, #16]
 800868c:	6022      	str	r2, [r4, #0]
 800868e:	d504      	bpl.n	800869a <__sflush_r+0x7e>
 8008690:	1c42      	adds	r2, r0, #1
 8008692:	d101      	bne.n	8008698 <__sflush_r+0x7c>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b903      	cbnz	r3, 800869a <__sflush_r+0x7e>
 8008698:	6560      	str	r0, [r4, #84]	; 0x54
 800869a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800869c:	602f      	str	r7, [r5, #0]
 800869e:	2900      	cmp	r1, #0
 80086a0:	d0c9      	beq.n	8008636 <__sflush_r+0x1a>
 80086a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086a6:	4299      	cmp	r1, r3
 80086a8:	d002      	beq.n	80086b0 <__sflush_r+0x94>
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7ff feb6 	bl	800841c <_free_r>
 80086b0:	2000      	movs	r0, #0
 80086b2:	6360      	str	r0, [r4, #52]	; 0x34
 80086b4:	e7c0      	b.n	8008638 <__sflush_r+0x1c>
 80086b6:	2301      	movs	r3, #1
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b0      	blx	r6
 80086bc:	1c41      	adds	r1, r0, #1
 80086be:	d1c8      	bne.n	8008652 <__sflush_r+0x36>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0c5      	beq.n	8008652 <__sflush_r+0x36>
 80086c6:	2b1d      	cmp	r3, #29
 80086c8:	d001      	beq.n	80086ce <__sflush_r+0xb2>
 80086ca:	2b16      	cmp	r3, #22
 80086cc:	d101      	bne.n	80086d2 <__sflush_r+0xb6>
 80086ce:	602f      	str	r7, [r5, #0]
 80086d0:	e7b1      	b.n	8008636 <__sflush_r+0x1a>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	e7ad      	b.n	8008638 <__sflush_r+0x1c>
 80086dc:	690f      	ldr	r7, [r1, #16]
 80086de:	2f00      	cmp	r7, #0
 80086e0:	d0a9      	beq.n	8008636 <__sflush_r+0x1a>
 80086e2:	0793      	lsls	r3, r2, #30
 80086e4:	680e      	ldr	r6, [r1, #0]
 80086e6:	bf08      	it	eq
 80086e8:	694b      	ldreq	r3, [r1, #20]
 80086ea:	600f      	str	r7, [r1, #0]
 80086ec:	bf18      	it	ne
 80086ee:	2300      	movne	r3, #0
 80086f0:	eba6 0807 	sub.w	r8, r6, r7
 80086f4:	608b      	str	r3, [r1, #8]
 80086f6:	f1b8 0f00 	cmp.w	r8, #0
 80086fa:	dd9c      	ble.n	8008636 <__sflush_r+0x1a>
 80086fc:	6a21      	ldr	r1, [r4, #32]
 80086fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008700:	4643      	mov	r3, r8
 8008702:	463a      	mov	r2, r7
 8008704:	4628      	mov	r0, r5
 8008706:	47b0      	blx	r6
 8008708:	2800      	cmp	r0, #0
 800870a:	dc06      	bgt.n	800871a <__sflush_r+0xfe>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e78e      	b.n	8008638 <__sflush_r+0x1c>
 800871a:	4407      	add	r7, r0
 800871c:	eba8 0800 	sub.w	r8, r8, r0
 8008720:	e7e9      	b.n	80086f6 <__sflush_r+0xda>
 8008722:	bf00      	nop
 8008724:	dfbffffe 	.word	0xdfbffffe

08008728 <_fflush_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	690b      	ldr	r3, [r1, #16]
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	b913      	cbnz	r3, 8008738 <_fflush_r+0x10>
 8008732:	2500      	movs	r5, #0
 8008734:	4628      	mov	r0, r5
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	b118      	cbz	r0, 8008742 <_fflush_r+0x1a>
 800873a:	6a03      	ldr	r3, [r0, #32]
 800873c:	b90b      	cbnz	r3, 8008742 <_fflush_r+0x1a>
 800873e:	f7ff fd59 	bl	80081f4 <__sinit>
 8008742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0f3      	beq.n	8008732 <_fflush_r+0xa>
 800874a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800874c:	07d0      	lsls	r0, r2, #31
 800874e:	d404      	bmi.n	800875a <_fflush_r+0x32>
 8008750:	0599      	lsls	r1, r3, #22
 8008752:	d402      	bmi.n	800875a <_fflush_r+0x32>
 8008754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008756:	f7ff fe40 	bl	80083da <__retarget_lock_acquire_recursive>
 800875a:	4628      	mov	r0, r5
 800875c:	4621      	mov	r1, r4
 800875e:	f7ff ff5d 	bl	800861c <__sflush_r>
 8008762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008764:	07da      	lsls	r2, r3, #31
 8008766:	4605      	mov	r5, r0
 8008768:	d4e4      	bmi.n	8008734 <_fflush_r+0xc>
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	059b      	lsls	r3, r3, #22
 800876e:	d4e1      	bmi.n	8008734 <_fflush_r+0xc>
 8008770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008772:	f7ff fe33 	bl	80083dc <__retarget_lock_release_recursive>
 8008776:	e7dd      	b.n	8008734 <_fflush_r+0xc>

08008778 <fiprintf>:
 8008778:	b40e      	push	{r1, r2, r3}
 800877a:	b503      	push	{r0, r1, lr}
 800877c:	4601      	mov	r1, r0
 800877e:	ab03      	add	r3, sp, #12
 8008780:	4805      	ldr	r0, [pc, #20]	; (8008798 <fiprintf+0x20>)
 8008782:	f853 2b04 	ldr.w	r2, [r3], #4
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f000 f847 	bl	800881c <_vfiprintf_r>
 800878e:	b002      	add	sp, #8
 8008790:	f85d eb04 	ldr.w	lr, [sp], #4
 8008794:	b003      	add	sp, #12
 8008796:	4770      	bx	lr
 8008798:	200002b4 	.word	0x200002b4

0800879c <_sbrk_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d06      	ldr	r5, [pc, #24]	; (80087b8 <_sbrk_r+0x1c>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f7f9 fcf0 	bl	800218c <_sbrk>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_sbrk_r+0x1a>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_sbrk_r+0x1a>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	20000914 	.word	0x20000914

080087bc <abort>:
 80087bc:	b508      	push	{r3, lr}
 80087be:	2006      	movs	r0, #6
 80087c0:	f000 fb94 	bl	8008eec <raise>
 80087c4:	2001      	movs	r0, #1
 80087c6:	f7f9 fc69 	bl	800209c <_exit>

080087ca <__sfputc_r>:
 80087ca:	6893      	ldr	r3, [r2, #8]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	b410      	push	{r4}
 80087d2:	6093      	str	r3, [r2, #8]
 80087d4:	da08      	bge.n	80087e8 <__sfputc_r+0x1e>
 80087d6:	6994      	ldr	r4, [r2, #24]
 80087d8:	42a3      	cmp	r3, r4
 80087da:	db01      	blt.n	80087e0 <__sfputc_r+0x16>
 80087dc:	290a      	cmp	r1, #10
 80087de:	d103      	bne.n	80087e8 <__sfputc_r+0x1e>
 80087e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e4:	f000 bac4 	b.w	8008d70 <__swbuf_r>
 80087e8:	6813      	ldr	r3, [r2, #0]
 80087ea:	1c58      	adds	r0, r3, #1
 80087ec:	6010      	str	r0, [r2, #0]
 80087ee:	7019      	strb	r1, [r3, #0]
 80087f0:	4608      	mov	r0, r1
 80087f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <__sfputs_r>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	4606      	mov	r6, r0
 80087fc:	460f      	mov	r7, r1
 80087fe:	4614      	mov	r4, r2
 8008800:	18d5      	adds	r5, r2, r3
 8008802:	42ac      	cmp	r4, r5
 8008804:	d101      	bne.n	800880a <__sfputs_r+0x12>
 8008806:	2000      	movs	r0, #0
 8008808:	e007      	b.n	800881a <__sfputs_r+0x22>
 800880a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880e:	463a      	mov	r2, r7
 8008810:	4630      	mov	r0, r6
 8008812:	f7ff ffda 	bl	80087ca <__sfputc_r>
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	d1f3      	bne.n	8008802 <__sfputs_r+0xa>
 800881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800881c <_vfiprintf_r>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	460d      	mov	r5, r1
 8008822:	b09d      	sub	sp, #116	; 0x74
 8008824:	4614      	mov	r4, r2
 8008826:	4698      	mov	r8, r3
 8008828:	4606      	mov	r6, r0
 800882a:	b118      	cbz	r0, 8008834 <_vfiprintf_r+0x18>
 800882c:	6a03      	ldr	r3, [r0, #32]
 800882e:	b90b      	cbnz	r3, 8008834 <_vfiprintf_r+0x18>
 8008830:	f7ff fce0 	bl	80081f4 <__sinit>
 8008834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008836:	07d9      	lsls	r1, r3, #31
 8008838:	d405      	bmi.n	8008846 <_vfiprintf_r+0x2a>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	059a      	lsls	r2, r3, #22
 800883e:	d402      	bmi.n	8008846 <_vfiprintf_r+0x2a>
 8008840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008842:	f7ff fdca 	bl	80083da <__retarget_lock_acquire_recursive>
 8008846:	89ab      	ldrh	r3, [r5, #12]
 8008848:	071b      	lsls	r3, r3, #28
 800884a:	d501      	bpl.n	8008850 <_vfiprintf_r+0x34>
 800884c:	692b      	ldr	r3, [r5, #16]
 800884e:	b99b      	cbnz	r3, 8008878 <_vfiprintf_r+0x5c>
 8008850:	4629      	mov	r1, r5
 8008852:	4630      	mov	r0, r6
 8008854:	f000 faca 	bl	8008dec <__swsetup_r>
 8008858:	b170      	cbz	r0, 8008878 <_vfiprintf_r+0x5c>
 800885a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800885c:	07dc      	lsls	r4, r3, #31
 800885e:	d504      	bpl.n	800886a <_vfiprintf_r+0x4e>
 8008860:	f04f 30ff 	mov.w	r0, #4294967295
 8008864:	b01d      	add	sp, #116	; 0x74
 8008866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	0598      	lsls	r0, r3, #22
 800886e:	d4f7      	bmi.n	8008860 <_vfiprintf_r+0x44>
 8008870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008872:	f7ff fdb3 	bl	80083dc <__retarget_lock_release_recursive>
 8008876:	e7f3      	b.n	8008860 <_vfiprintf_r+0x44>
 8008878:	2300      	movs	r3, #0
 800887a:	9309      	str	r3, [sp, #36]	; 0x24
 800887c:	2320      	movs	r3, #32
 800887e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008882:	f8cd 800c 	str.w	r8, [sp, #12]
 8008886:	2330      	movs	r3, #48	; 0x30
 8008888:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a3c <_vfiprintf_r+0x220>
 800888c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008890:	f04f 0901 	mov.w	r9, #1
 8008894:	4623      	mov	r3, r4
 8008896:	469a      	mov	sl, r3
 8008898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889c:	b10a      	cbz	r2, 80088a2 <_vfiprintf_r+0x86>
 800889e:	2a25      	cmp	r2, #37	; 0x25
 80088a0:	d1f9      	bne.n	8008896 <_vfiprintf_r+0x7a>
 80088a2:	ebba 0b04 	subs.w	fp, sl, r4
 80088a6:	d00b      	beq.n	80088c0 <_vfiprintf_r+0xa4>
 80088a8:	465b      	mov	r3, fp
 80088aa:	4622      	mov	r2, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7ff ffa2 	bl	80087f8 <__sfputs_r>
 80088b4:	3001      	adds	r0, #1
 80088b6:	f000 80a9 	beq.w	8008a0c <_vfiprintf_r+0x1f0>
 80088ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088bc:	445a      	add	r2, fp
 80088be:	9209      	str	r2, [sp, #36]	; 0x24
 80088c0:	f89a 3000 	ldrb.w	r3, [sl]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80a1 	beq.w	8008a0c <_vfiprintf_r+0x1f0>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f04f 32ff 	mov.w	r2, #4294967295
 80088d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d4:	f10a 0a01 	add.w	sl, sl, #1
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	9307      	str	r3, [sp, #28]
 80088dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e0:	931a      	str	r3, [sp, #104]	; 0x68
 80088e2:	4654      	mov	r4, sl
 80088e4:	2205      	movs	r2, #5
 80088e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ea:	4854      	ldr	r0, [pc, #336]	; (8008a3c <_vfiprintf_r+0x220>)
 80088ec:	f7f7 fc90 	bl	8000210 <memchr>
 80088f0:	9a04      	ldr	r2, [sp, #16]
 80088f2:	b9d8      	cbnz	r0, 800892c <_vfiprintf_r+0x110>
 80088f4:	06d1      	lsls	r1, r2, #27
 80088f6:	bf44      	itt	mi
 80088f8:	2320      	movmi	r3, #32
 80088fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fe:	0713      	lsls	r3, r2, #28
 8008900:	bf44      	itt	mi
 8008902:	232b      	movmi	r3, #43	; 0x2b
 8008904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008908:	f89a 3000 	ldrb.w	r3, [sl]
 800890c:	2b2a      	cmp	r3, #42	; 0x2a
 800890e:	d015      	beq.n	800893c <_vfiprintf_r+0x120>
 8008910:	9a07      	ldr	r2, [sp, #28]
 8008912:	4654      	mov	r4, sl
 8008914:	2000      	movs	r0, #0
 8008916:	f04f 0c0a 	mov.w	ip, #10
 800891a:	4621      	mov	r1, r4
 800891c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008920:	3b30      	subs	r3, #48	; 0x30
 8008922:	2b09      	cmp	r3, #9
 8008924:	d94d      	bls.n	80089c2 <_vfiprintf_r+0x1a6>
 8008926:	b1b0      	cbz	r0, 8008956 <_vfiprintf_r+0x13a>
 8008928:	9207      	str	r2, [sp, #28]
 800892a:	e014      	b.n	8008956 <_vfiprintf_r+0x13a>
 800892c:	eba0 0308 	sub.w	r3, r0, r8
 8008930:	fa09 f303 	lsl.w	r3, r9, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	46a2      	mov	sl, r4
 800893a:	e7d2      	b.n	80088e2 <_vfiprintf_r+0xc6>
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	1d19      	adds	r1, r3, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	9103      	str	r1, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	bfbb      	ittet	lt
 8008948:	425b      	neglt	r3, r3
 800894a:	f042 0202 	orrlt.w	r2, r2, #2
 800894e:	9307      	strge	r3, [sp, #28]
 8008950:	9307      	strlt	r3, [sp, #28]
 8008952:	bfb8      	it	lt
 8008954:	9204      	strlt	r2, [sp, #16]
 8008956:	7823      	ldrb	r3, [r4, #0]
 8008958:	2b2e      	cmp	r3, #46	; 0x2e
 800895a:	d10c      	bne.n	8008976 <_vfiprintf_r+0x15a>
 800895c:	7863      	ldrb	r3, [r4, #1]
 800895e:	2b2a      	cmp	r3, #42	; 0x2a
 8008960:	d134      	bne.n	80089cc <_vfiprintf_r+0x1b0>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	1d1a      	adds	r2, r3, #4
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	9203      	str	r2, [sp, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	bfb8      	it	lt
 800896e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008972:	3402      	adds	r4, #2
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a4c <_vfiprintf_r+0x230>
 800897a:	7821      	ldrb	r1, [r4, #0]
 800897c:	2203      	movs	r2, #3
 800897e:	4650      	mov	r0, sl
 8008980:	f7f7 fc46 	bl	8000210 <memchr>
 8008984:	b138      	cbz	r0, 8008996 <_vfiprintf_r+0x17a>
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	eba0 000a 	sub.w	r0, r0, sl
 800898c:	2240      	movs	r2, #64	; 0x40
 800898e:	4082      	lsls	r2, r0
 8008990:	4313      	orrs	r3, r2
 8008992:	3401      	adds	r4, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899a:	4829      	ldr	r0, [pc, #164]	; (8008a40 <_vfiprintf_r+0x224>)
 800899c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089a0:	2206      	movs	r2, #6
 80089a2:	f7f7 fc35 	bl	8000210 <memchr>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d03f      	beq.n	8008a2a <_vfiprintf_r+0x20e>
 80089aa:	4b26      	ldr	r3, [pc, #152]	; (8008a44 <_vfiprintf_r+0x228>)
 80089ac:	bb1b      	cbnz	r3, 80089f6 <_vfiprintf_r+0x1da>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	3307      	adds	r3, #7
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	3308      	adds	r3, #8
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089bc:	443b      	add	r3, r7
 80089be:	9309      	str	r3, [sp, #36]	; 0x24
 80089c0:	e768      	b.n	8008894 <_vfiprintf_r+0x78>
 80089c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c6:	460c      	mov	r4, r1
 80089c8:	2001      	movs	r0, #1
 80089ca:	e7a6      	b.n	800891a <_vfiprintf_r+0xfe>
 80089cc:	2300      	movs	r3, #0
 80089ce:	3401      	adds	r4, #1
 80089d0:	9305      	str	r3, [sp, #20]
 80089d2:	4619      	mov	r1, r3
 80089d4:	f04f 0c0a 	mov.w	ip, #10
 80089d8:	4620      	mov	r0, r4
 80089da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089de:	3a30      	subs	r2, #48	; 0x30
 80089e0:	2a09      	cmp	r2, #9
 80089e2:	d903      	bls.n	80089ec <_vfiprintf_r+0x1d0>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0c6      	beq.n	8008976 <_vfiprintf_r+0x15a>
 80089e8:	9105      	str	r1, [sp, #20]
 80089ea:	e7c4      	b.n	8008976 <_vfiprintf_r+0x15a>
 80089ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f0:	4604      	mov	r4, r0
 80089f2:	2301      	movs	r3, #1
 80089f4:	e7f0      	b.n	80089d8 <_vfiprintf_r+0x1bc>
 80089f6:	ab03      	add	r3, sp, #12
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	462a      	mov	r2, r5
 80089fc:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <_vfiprintf_r+0x22c>)
 80089fe:	a904      	add	r1, sp, #16
 8008a00:	4630      	mov	r0, r6
 8008a02:	f3af 8000 	nop.w
 8008a06:	4607      	mov	r7, r0
 8008a08:	1c78      	adds	r0, r7, #1
 8008a0a:	d1d6      	bne.n	80089ba <_vfiprintf_r+0x19e>
 8008a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a0e:	07d9      	lsls	r1, r3, #31
 8008a10:	d405      	bmi.n	8008a1e <_vfiprintf_r+0x202>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	059a      	lsls	r2, r3, #22
 8008a16:	d402      	bmi.n	8008a1e <_vfiprintf_r+0x202>
 8008a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a1a:	f7ff fcdf 	bl	80083dc <__retarget_lock_release_recursive>
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	065b      	lsls	r3, r3, #25
 8008a22:	f53f af1d 	bmi.w	8008860 <_vfiprintf_r+0x44>
 8008a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a28:	e71c      	b.n	8008864 <_vfiprintf_r+0x48>
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <_vfiprintf_r+0x22c>)
 8008a32:	a904      	add	r1, sp, #16
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f879 	bl	8008b2c <_printf_i>
 8008a3a:	e7e4      	b.n	8008a06 <_vfiprintf_r+0x1ea>
 8008a3c:	0800911b 	.word	0x0800911b
 8008a40:	08009125 	.word	0x08009125
 8008a44:	00000000 	.word	0x00000000
 8008a48:	080087f9 	.word	0x080087f9
 8008a4c:	08009121 	.word	0x08009121

08008a50 <_printf_common>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	4616      	mov	r6, r2
 8008a56:	4699      	mov	r9, r3
 8008a58:	688a      	ldr	r2, [r1, #8]
 8008a5a:	690b      	ldr	r3, [r1, #16]
 8008a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bfb8      	it	lt
 8008a64:	4613      	movlt	r3, r2
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	b10a      	cbz	r2, 8008a76 <_printf_common+0x26>
 8008a72:	3301      	adds	r3, #1
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	0699      	lsls	r1, r3, #26
 8008a7a:	bf42      	ittt	mi
 8008a7c:	6833      	ldrmi	r3, [r6, #0]
 8008a7e:	3302      	addmi	r3, #2
 8008a80:	6033      	strmi	r3, [r6, #0]
 8008a82:	6825      	ldr	r5, [r4, #0]
 8008a84:	f015 0506 	ands.w	r5, r5, #6
 8008a88:	d106      	bne.n	8008a98 <_printf_common+0x48>
 8008a8a:	f104 0a19 	add.w	sl, r4, #25
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	6832      	ldr	r2, [r6, #0]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dc26      	bgt.n	8008ae6 <_printf_common+0x96>
 8008a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a9c:	1e13      	subs	r3, r2, #0
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	bf18      	it	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	0692      	lsls	r2, r2, #26
 8008aa6:	d42b      	bmi.n	8008b00 <_printf_common+0xb0>
 8008aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aac:	4649      	mov	r1, r9
 8008aae:	4638      	mov	r0, r7
 8008ab0:	47c0      	blx	r8
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d01e      	beq.n	8008af4 <_printf_common+0xa4>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	f003 0306 	and.w	r3, r3, #6
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	bf02      	ittt	eq
 8008ac2:	68e5      	ldreq	r5, [r4, #12]
 8008ac4:	6833      	ldreq	r3, [r6, #0]
 8008ac6:	1aed      	subeq	r5, r5, r3
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	bf0c      	ite	eq
 8008acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad0:	2500      	movne	r5, #0
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bfc4      	itt	gt
 8008ad6:	1a9b      	subgt	r3, r3, r2
 8008ad8:	18ed      	addgt	r5, r5, r3
 8008ada:	2600      	movs	r6, #0
 8008adc:	341a      	adds	r4, #26
 8008ade:	42b5      	cmp	r5, r6
 8008ae0:	d11a      	bne.n	8008b18 <_printf_common+0xc8>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e008      	b.n	8008af8 <_printf_common+0xa8>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4649      	mov	r1, r9
 8008aec:	4638      	mov	r0, r7
 8008aee:	47c0      	blx	r8
 8008af0:	3001      	adds	r0, #1
 8008af2:	d103      	bne.n	8008afc <_printf_common+0xac>
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afc:	3501      	adds	r5, #1
 8008afe:	e7c6      	b.n	8008a8e <_printf_common+0x3e>
 8008b00:	18e1      	adds	r1, r4, r3
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	2030      	movs	r0, #48	; 0x30
 8008b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b0a:	4422      	add	r2, r4
 8008b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b14:	3302      	adds	r3, #2
 8008b16:	e7c7      	b.n	8008aa8 <_printf_common+0x58>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c0      	blx	r8
 8008b22:	3001      	adds	r0, #1
 8008b24:	d0e6      	beq.n	8008af4 <_printf_common+0xa4>
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7d9      	b.n	8008ade <_printf_common+0x8e>
	...

08008b2c <_printf_i>:
 8008b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	7e0f      	ldrb	r7, [r1, #24]
 8008b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b34:	2f78      	cmp	r7, #120	; 0x78
 8008b36:	4691      	mov	r9, r2
 8008b38:	4680      	mov	r8, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	469a      	mov	sl, r3
 8008b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b42:	d807      	bhi.n	8008b54 <_printf_i+0x28>
 8008b44:	2f62      	cmp	r7, #98	; 0x62
 8008b46:	d80a      	bhi.n	8008b5e <_printf_i+0x32>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	f000 80d4 	beq.w	8008cf6 <_printf_i+0x1ca>
 8008b4e:	2f58      	cmp	r7, #88	; 0x58
 8008b50:	f000 80c0 	beq.w	8008cd4 <_printf_i+0x1a8>
 8008b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b5c:	e03a      	b.n	8008bd4 <_printf_i+0xa8>
 8008b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b62:	2b15      	cmp	r3, #21
 8008b64:	d8f6      	bhi.n	8008b54 <_printf_i+0x28>
 8008b66:	a101      	add	r1, pc, #4	; (adr r1, 8008b6c <_printf_i+0x40>)
 8008b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008b55 	.word	0x08008b55
 8008b78:	08008b55 	.word	0x08008b55
 8008b7c:	08008b55 	.word	0x08008b55
 8008b80:	08008b55 	.word	0x08008b55
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008b55 	.word	0x08008b55
 8008b8c:	08008b55 	.word	0x08008b55
 8008b90:	08008b55 	.word	0x08008b55
 8008b94:	08008b55 	.word	0x08008b55
 8008b98:	08008cdd 	.word	0x08008cdd
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008c97 	.word	0x08008c97
 8008ba4:	08008b55 	.word	0x08008b55
 8008ba8:	08008b55 	.word	0x08008b55
 8008bac:	08008cff 	.word	0x08008cff
 8008bb0:	08008b55 	.word	0x08008b55
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008b55 	.word	0x08008b55
 8008bbc:	08008b55 	.word	0x08008b55
 8008bc0:	08008c9f 	.word	0x08008c9f
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	1d1a      	adds	r2, r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	602a      	str	r2, [r5, #0]
 8008bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e09f      	b.n	8008d18 <_printf_i+0x1ec>
 8008bd8:	6820      	ldr	r0, [r4, #0]
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	0607      	lsls	r7, r0, #24
 8008bde:	f103 0104 	add.w	r1, r3, #4
 8008be2:	6029      	str	r1, [r5, #0]
 8008be4:	d501      	bpl.n	8008bea <_printf_i+0xbe>
 8008be6:	681e      	ldr	r6, [r3, #0]
 8008be8:	e003      	b.n	8008bf2 <_printf_i+0xc6>
 8008bea:	0646      	lsls	r6, r0, #25
 8008bec:	d5fb      	bpl.n	8008be6 <_printf_i+0xba>
 8008bee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bf2:	2e00      	cmp	r6, #0
 8008bf4:	da03      	bge.n	8008bfe <_printf_i+0xd2>
 8008bf6:	232d      	movs	r3, #45	; 0x2d
 8008bf8:	4276      	negs	r6, r6
 8008bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bfe:	485a      	ldr	r0, [pc, #360]	; (8008d68 <_printf_i+0x23c>)
 8008c00:	230a      	movs	r3, #10
 8008c02:	e012      	b.n	8008c2a <_printf_i+0xfe>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	6029      	str	r1, [r5, #0]
 8008c0c:	0605      	lsls	r5, r0, #24
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0xe8>
 8008c10:	681e      	ldr	r6, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <_printf_i+0xee>
 8008c14:	0641      	lsls	r1, r0, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0xe4>
 8008c18:	881e      	ldrh	r6, [r3, #0]
 8008c1a:	4853      	ldr	r0, [pc, #332]	; (8008d68 <_printf_i+0x23c>)
 8008c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c1e:	bf0c      	ite	eq
 8008c20:	2308      	moveq	r3, #8
 8008c22:	230a      	movne	r3, #10
 8008c24:	2100      	movs	r1, #0
 8008c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c2a:	6865      	ldr	r5, [r4, #4]
 8008c2c:	60a5      	str	r5, [r4, #8]
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	bfa2      	ittt	ge
 8008c32:	6821      	ldrge	r1, [r4, #0]
 8008c34:	f021 0104 	bicge.w	r1, r1, #4
 8008c38:	6021      	strge	r1, [r4, #0]
 8008c3a:	b90e      	cbnz	r6, 8008c40 <_printf_i+0x114>
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	d04b      	beq.n	8008cd8 <_printf_i+0x1ac>
 8008c40:	4615      	mov	r5, r2
 8008c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c46:	fb03 6711 	mls	r7, r3, r1, r6
 8008c4a:	5dc7      	ldrb	r7, [r0, r7]
 8008c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c50:	4637      	mov	r7, r6
 8008c52:	42bb      	cmp	r3, r7
 8008c54:	460e      	mov	r6, r1
 8008c56:	d9f4      	bls.n	8008c42 <_printf_i+0x116>
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d10b      	bne.n	8008c74 <_printf_i+0x148>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07de      	lsls	r6, r3, #31
 8008c60:	d508      	bpl.n	8008c74 <_printf_i+0x148>
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	4299      	cmp	r1, r3
 8008c68:	bfde      	ittt	le
 8008c6a:	2330      	movle	r3, #48	; 0x30
 8008c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c74:	1b52      	subs	r2, r2, r5
 8008c76:	6122      	str	r2, [r4, #16]
 8008c78:	f8cd a000 	str.w	sl, [sp]
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	aa03      	add	r2, sp, #12
 8008c80:	4621      	mov	r1, r4
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7ff fee4 	bl	8008a50 <_printf_common>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d14a      	bne.n	8008d22 <_printf_i+0x1f6>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	b004      	add	sp, #16
 8008c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	f043 0320 	orr.w	r3, r3, #32
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	4833      	ldr	r0, [pc, #204]	; (8008d6c <_printf_i+0x240>)
 8008ca0:	2778      	movs	r7, #120	; 0x78
 8008ca2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	6829      	ldr	r1, [r5, #0]
 8008caa:	061f      	lsls	r7, r3, #24
 8008cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cb0:	d402      	bmi.n	8008cb8 <_printf_i+0x18c>
 8008cb2:	065f      	lsls	r7, r3, #25
 8008cb4:	bf48      	it	mi
 8008cb6:	b2b6      	uxthmi	r6, r6
 8008cb8:	07df      	lsls	r7, r3, #31
 8008cba:	bf48      	it	mi
 8008cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8008cc0:	6029      	str	r1, [r5, #0]
 8008cc2:	bf48      	it	mi
 8008cc4:	6023      	strmi	r3, [r4, #0]
 8008cc6:	b91e      	cbnz	r6, 8008cd0 <_printf_i+0x1a4>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	f023 0320 	bic.w	r3, r3, #32
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	e7a7      	b.n	8008c24 <_printf_i+0xf8>
 8008cd4:	4824      	ldr	r0, [pc, #144]	; (8008d68 <_printf_i+0x23c>)
 8008cd6:	e7e4      	b.n	8008ca2 <_printf_i+0x176>
 8008cd8:	4615      	mov	r5, r2
 8008cda:	e7bd      	b.n	8008c58 <_printf_i+0x12c>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	6826      	ldr	r6, [r4, #0]
 8008ce0:	6961      	ldr	r1, [r4, #20]
 8008ce2:	1d18      	adds	r0, r3, #4
 8008ce4:	6028      	str	r0, [r5, #0]
 8008ce6:	0635      	lsls	r5, r6, #24
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	d501      	bpl.n	8008cf0 <_printf_i+0x1c4>
 8008cec:	6019      	str	r1, [r3, #0]
 8008cee:	e002      	b.n	8008cf6 <_printf_i+0x1ca>
 8008cf0:	0670      	lsls	r0, r6, #25
 8008cf2:	d5fb      	bpl.n	8008cec <_printf_i+0x1c0>
 8008cf4:	8019      	strh	r1, [r3, #0]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	4615      	mov	r5, r2
 8008cfc:	e7bc      	b.n	8008c78 <_printf_i+0x14c>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	1d1a      	adds	r2, r3, #4
 8008d02:	602a      	str	r2, [r5, #0]
 8008d04:	681d      	ldr	r5, [r3, #0]
 8008d06:	6862      	ldr	r2, [r4, #4]
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f7f7 fa80 	bl	8000210 <memchr>
 8008d10:	b108      	cbz	r0, 8008d16 <_printf_i+0x1ea>
 8008d12:	1b40      	subs	r0, r0, r5
 8008d14:	6060      	str	r0, [r4, #4]
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d20:	e7aa      	b.n	8008c78 <_printf_i+0x14c>
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4649      	mov	r1, r9
 8008d28:	4640      	mov	r0, r8
 8008d2a:	47d0      	blx	sl
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d0ad      	beq.n	8008c8c <_printf_i+0x160>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	079b      	lsls	r3, r3, #30
 8008d34:	d413      	bmi.n	8008d5e <_printf_i+0x232>
 8008d36:	68e0      	ldr	r0, [r4, #12]
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	4298      	cmp	r0, r3
 8008d3c:	bfb8      	it	lt
 8008d3e:	4618      	movlt	r0, r3
 8008d40:	e7a6      	b.n	8008c90 <_printf_i+0x164>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4632      	mov	r2, r6
 8008d46:	4649      	mov	r1, r9
 8008d48:	4640      	mov	r0, r8
 8008d4a:	47d0      	blx	sl
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d09d      	beq.n	8008c8c <_printf_i+0x160>
 8008d50:	3501      	adds	r5, #1
 8008d52:	68e3      	ldr	r3, [r4, #12]
 8008d54:	9903      	ldr	r1, [sp, #12]
 8008d56:	1a5b      	subs	r3, r3, r1
 8008d58:	42ab      	cmp	r3, r5
 8008d5a:	dcf2      	bgt.n	8008d42 <_printf_i+0x216>
 8008d5c:	e7eb      	b.n	8008d36 <_printf_i+0x20a>
 8008d5e:	2500      	movs	r5, #0
 8008d60:	f104 0619 	add.w	r6, r4, #25
 8008d64:	e7f5      	b.n	8008d52 <_printf_i+0x226>
 8008d66:	bf00      	nop
 8008d68:	0800912c 	.word	0x0800912c
 8008d6c:	0800913d 	.word	0x0800913d

08008d70 <__swbuf_r>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	460e      	mov	r6, r1
 8008d74:	4614      	mov	r4, r2
 8008d76:	4605      	mov	r5, r0
 8008d78:	b118      	cbz	r0, 8008d82 <__swbuf_r+0x12>
 8008d7a:	6a03      	ldr	r3, [r0, #32]
 8008d7c:	b90b      	cbnz	r3, 8008d82 <__swbuf_r+0x12>
 8008d7e:	f7ff fa39 	bl	80081f4 <__sinit>
 8008d82:	69a3      	ldr	r3, [r4, #24]
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	071a      	lsls	r2, r3, #28
 8008d8a:	d525      	bpl.n	8008dd8 <__swbuf_r+0x68>
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	b31b      	cbz	r3, 8008dd8 <__swbuf_r+0x68>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	6922      	ldr	r2, [r4, #16]
 8008d94:	1a98      	subs	r0, r3, r2
 8008d96:	6963      	ldr	r3, [r4, #20]
 8008d98:	b2f6      	uxtb	r6, r6
 8008d9a:	4283      	cmp	r3, r0
 8008d9c:	4637      	mov	r7, r6
 8008d9e:	dc04      	bgt.n	8008daa <__swbuf_r+0x3a>
 8008da0:	4621      	mov	r1, r4
 8008da2:	4628      	mov	r0, r5
 8008da4:	f7ff fcc0 	bl	8008728 <_fflush_r>
 8008da8:	b9e0      	cbnz	r0, 8008de4 <__swbuf_r+0x74>
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	60a3      	str	r3, [r4, #8]
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	6022      	str	r2, [r4, #0]
 8008db6:	701e      	strb	r6, [r3, #0]
 8008db8:	6962      	ldr	r2, [r4, #20]
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d004      	beq.n	8008dca <__swbuf_r+0x5a>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d506      	bpl.n	8008dd4 <__swbuf_r+0x64>
 8008dc6:	2e0a      	cmp	r6, #10
 8008dc8:	d104      	bne.n	8008dd4 <__swbuf_r+0x64>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f7ff fcab 	bl	8008728 <_fflush_r>
 8008dd2:	b938      	cbnz	r0, 8008de4 <__swbuf_r+0x74>
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 f806 	bl	8008dec <__swsetup_r>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d0d5      	beq.n	8008d90 <__swbuf_r+0x20>
 8008de4:	f04f 37ff 	mov.w	r7, #4294967295
 8008de8:	e7f4      	b.n	8008dd4 <__swbuf_r+0x64>
	...

08008dec <__swsetup_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4b2a      	ldr	r3, [pc, #168]	; (8008e98 <__swsetup_r+0xac>)
 8008df0:	4605      	mov	r5, r0
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	460c      	mov	r4, r1
 8008df6:	b118      	cbz	r0, 8008e00 <__swsetup_r+0x14>
 8008df8:	6a03      	ldr	r3, [r0, #32]
 8008dfa:	b90b      	cbnz	r3, 8008e00 <__swsetup_r+0x14>
 8008dfc:	f7ff f9fa 	bl	80081f4 <__sinit>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e06:	0718      	lsls	r0, r3, #28
 8008e08:	d422      	bmi.n	8008e50 <__swsetup_r+0x64>
 8008e0a:	06d9      	lsls	r1, r3, #27
 8008e0c:	d407      	bmi.n	8008e1e <__swsetup_r+0x32>
 8008e0e:	2309      	movs	r3, #9
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	e034      	b.n	8008e88 <__swsetup_r+0x9c>
 8008e1e:	0758      	lsls	r0, r3, #29
 8008e20:	d512      	bpl.n	8008e48 <__swsetup_r+0x5c>
 8008e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e24:	b141      	cbz	r1, 8008e38 <__swsetup_r+0x4c>
 8008e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	d002      	beq.n	8008e34 <__swsetup_r+0x48>
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f7ff faf4 	bl	800841c <_free_r>
 8008e34:	2300      	movs	r3, #0
 8008e36:	6363      	str	r3, [r4, #52]	; 0x34
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	2300      	movs	r3, #0
 8008e42:	6063      	str	r3, [r4, #4]
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f043 0308 	orr.w	r3, r3, #8
 8008e4e:	81a3      	strh	r3, [r4, #12]
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	b94b      	cbnz	r3, 8008e68 <__swsetup_r+0x7c>
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5e:	d003      	beq.n	8008e68 <__swsetup_r+0x7c>
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f884 	bl	8008f70 <__smakebuf_r>
 8008e68:	89a0      	ldrh	r0, [r4, #12]
 8008e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e6e:	f010 0301 	ands.w	r3, r0, #1
 8008e72:	d00a      	beq.n	8008e8a <__swsetup_r+0x9e>
 8008e74:	2300      	movs	r3, #0
 8008e76:	60a3      	str	r3, [r4, #8]
 8008e78:	6963      	ldr	r3, [r4, #20]
 8008e7a:	425b      	negs	r3, r3
 8008e7c:	61a3      	str	r3, [r4, #24]
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	b943      	cbnz	r3, 8008e94 <__swsetup_r+0xa8>
 8008e82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e86:	d1c4      	bne.n	8008e12 <__swsetup_r+0x26>
 8008e88:	bd38      	pop	{r3, r4, r5, pc}
 8008e8a:	0781      	lsls	r1, r0, #30
 8008e8c:	bf58      	it	pl
 8008e8e:	6963      	ldrpl	r3, [r4, #20]
 8008e90:	60a3      	str	r3, [r4, #8]
 8008e92:	e7f4      	b.n	8008e7e <__swsetup_r+0x92>
 8008e94:	2000      	movs	r0, #0
 8008e96:	e7f7      	b.n	8008e88 <__swsetup_r+0x9c>
 8008e98:	200002b4 	.word	0x200002b4

08008e9c <_raise_r>:
 8008e9c:	291f      	cmp	r1, #31
 8008e9e:	b538      	push	{r3, r4, r5, lr}
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	d904      	bls.n	8008eb0 <_raise_r+0x14>
 8008ea6:	2316      	movs	r3, #22
 8008ea8:	6003      	str	r3, [r0, #0]
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008eb2:	b112      	cbz	r2, 8008eba <_raise_r+0x1e>
 8008eb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008eb8:	b94b      	cbnz	r3, 8008ece <_raise_r+0x32>
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f830 	bl	8008f20 <_getpid_r>
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eca:	f000 b817 	b.w	8008efc <_kill_r>
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d00a      	beq.n	8008ee8 <_raise_r+0x4c>
 8008ed2:	1c59      	adds	r1, r3, #1
 8008ed4:	d103      	bne.n	8008ede <_raise_r+0x42>
 8008ed6:	2316      	movs	r3, #22
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	2001      	movs	r0, #1
 8008edc:	e7e7      	b.n	8008eae <_raise_r+0x12>
 8008ede:	2400      	movs	r4, #0
 8008ee0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	4798      	blx	r3
 8008ee8:	2000      	movs	r0, #0
 8008eea:	e7e0      	b.n	8008eae <_raise_r+0x12>

08008eec <raise>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <raise+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f7ff bfd3 	b.w	8008e9c <_raise_r>
 8008ef6:	bf00      	nop
 8008ef8:	200002b4 	.word	0x200002b4

08008efc <_kill_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d07      	ldr	r5, [pc, #28]	; (8008f1c <_kill_r+0x20>)
 8008f00:	2300      	movs	r3, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	602b      	str	r3, [r5, #0]
 8008f0a:	f7f9 f8b7 	bl	800207c <_kill>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d102      	bne.n	8008f18 <_kill_r+0x1c>
 8008f12:	682b      	ldr	r3, [r5, #0]
 8008f14:	b103      	cbz	r3, 8008f18 <_kill_r+0x1c>
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	bd38      	pop	{r3, r4, r5, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20000914 	.word	0x20000914

08008f20 <_getpid_r>:
 8008f20:	f7f9 b8a4 	b.w	800206c <_getpid>

08008f24 <__swhatbuf_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	460c      	mov	r4, r1
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	b096      	sub	sp, #88	; 0x58
 8008f30:	4615      	mov	r5, r2
 8008f32:	461e      	mov	r6, r3
 8008f34:	da0d      	bge.n	8008f52 <__swhatbuf_r+0x2e>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f3c:	f04f 0100 	mov.w	r1, #0
 8008f40:	bf0c      	ite	eq
 8008f42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f46:	2340      	movne	r3, #64	; 0x40
 8008f48:	2000      	movs	r0, #0
 8008f4a:	6031      	str	r1, [r6, #0]
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	b016      	add	sp, #88	; 0x58
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	466a      	mov	r2, sp
 8008f54:	f000 f848 	bl	8008fe8 <_fstat_r>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	dbec      	blt.n	8008f36 <__swhatbuf_r+0x12>
 8008f5c:	9901      	ldr	r1, [sp, #4]
 8008f5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f66:	4259      	negs	r1, r3
 8008f68:	4159      	adcs	r1, r3
 8008f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6e:	e7eb      	b.n	8008f48 <__swhatbuf_r+0x24>

08008f70 <__smakebuf_r>:
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f74:	079d      	lsls	r5, r3, #30
 8008f76:	4606      	mov	r6, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d507      	bpl.n	8008f8c <__smakebuf_r+0x1c>
 8008f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	2301      	movs	r3, #1
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	b002      	add	sp, #8
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	ab01      	add	r3, sp, #4
 8008f8e:	466a      	mov	r2, sp
 8008f90:	f7ff ffc8 	bl	8008f24 <__swhatbuf_r>
 8008f94:	9900      	ldr	r1, [sp, #0]
 8008f96:	4605      	mov	r5, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff fab3 	bl	8008504 <_malloc_r>
 8008f9e:	b948      	cbnz	r0, 8008fb4 <__smakebuf_r+0x44>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d4ef      	bmi.n	8008f88 <__smakebuf_r+0x18>
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7e3      	b.n	8008f7c <__smakebuf_r+0xc>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	6020      	str	r0, [r4, #0]
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	6163      	str	r3, [r4, #20]
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	6120      	str	r0, [r4, #16]
 8008fc6:	b15b      	cbz	r3, 8008fe0 <__smakebuf_r+0x70>
 8008fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f81d 	bl	800900c <_isatty_r>
 8008fd2:	b128      	cbz	r0, 8008fe0 <__smakebuf_r+0x70>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	431d      	orrs	r5, r3
 8008fe4:	81a5      	strh	r5, [r4, #12]
 8008fe6:	e7cf      	b.n	8008f88 <__smakebuf_r+0x18>

08008fe8 <_fstat_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d07      	ldr	r5, [pc, #28]	; (8009008 <_fstat_r+0x20>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	f7f9 f8a0 	bl	800213a <_fstat>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d102      	bne.n	8009004 <_fstat_r+0x1c>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	b103      	cbz	r3, 8009004 <_fstat_r+0x1c>
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	bd38      	pop	{r3, r4, r5, pc}
 8009006:	bf00      	nop
 8009008:	20000914 	.word	0x20000914

0800900c <_isatty_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d06      	ldr	r5, [pc, #24]	; (8009028 <_isatty_r+0x1c>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f9 f89f 	bl	800215a <_isatty>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_isatty_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_isatty_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000914 	.word	0x20000914

0800902c <_init>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	bf00      	nop
 8009030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009032:	bc08      	pop	{r3}
 8009034:	469e      	mov	lr, r3
 8009036:	4770      	bx	lr

08009038 <_fini>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr
